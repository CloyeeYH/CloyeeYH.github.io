<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[csapp_bombLab]]></title>
    <url>%2F2019%2F12%2F18%2Fcsapp-bombLab%2F</url>
    <content type="text"><![CDATA[phase_11234567891011121308048b30 &lt;phase_1&gt;: 8048b30: 55 push %ebp 8048b31: 89 e5 mov %esp,%ebp 8048b33: 83 ec 10 sub $0x10,%esp 8048b36: 68 24 a1 04 08 push $0x804a124 8048b3b: ff 75 08 pushl 0x8(%ebp) 8048b3e: e8 63 05 00 00 call 80490a6 &lt;strings_not_equal&gt; 8048b43: 83 c4 10 add $0x10,%esp 8048b46: 85 c0 test %eax,%eax 8048b48: 74 05 je 8048b4f &lt;phase_1+0x1f&gt; 8048b4a: e8 5a 06 00 00 call 80491a9 &lt;explode_bomb&gt; 8048b4f: c9 leave 8048b50: c3 ret 直接查看0x804a124地址里的值 Border relations with Canada have never been better. phase_2123456789101112131415161718192021222324252627282930313208048b51 &lt;phase_2&gt;: 8048b51: 55 push %ebp 8048b52: 89 e5 mov %esp,%ebp 8048b54: 53 push %ebx 8048b55: 83 ec 2c sub $0x2c,%esp 8048b58: 65 a1 14 00 00 00 mov %gs:0x14,%eax 8048b5e: 89 45 f4 mov %eax,-0xc(%ebp) 8048b61: 31 c0 xor %eax,%eax 8048b63: 8d 45 dc lea -0x24(%ebp),%eax 8048b66: 50 push %eax 8048b67: ff 75 08 pushl 0x8(%ebp)#准备工作 8048b6a: e8 62 06 00 00 call 80491d1 &lt;read_six_numbers&gt; 8048b6f: 83 c4 10 add $0x10,%esp 8048b72: 83 7d dc 00 cmpl $0x0,-0x24(%ebp) 8048b76: 79 05 jns 8048b7d &lt;phase_2+0x2c&gt; #-36(%ebp)=0 8048b78: e8 2c 06 00 00 call 80491a9 &lt;explode_bomb&gt; 8048b7d: bb 01 00 00 00 mov $0x1,%ebx 8048b82: 89 d8 mov %ebx,%eax 8048b84: 03 44 9d d8 add -0x28(%ebp,%ebx,4),%eax #上一个数加上ebx也是eax里的值 8048b88: 39 44 9d dc cmp %eax,-0x24(%ebp,%ebx,4) #比较计算后的值和上一单元的值 8048b8c: 74 05 je 8048b93 &lt;phase_2+0x42&gt; 8048b8e: e8 16 06 00 00 call 80491a9 &lt;explode_bomb&gt; 8048b93: 83 c3 01 add $0x1,%ebx 8048b96: 83 fb 06 cmp $0x6,%ebx 8048b99: 75 e7 jne 8048b82 &lt;phase_2+0x31&gt; 8048b9b: 8b 45 f4 mov -0xc(%ebp),%eax 8048b9e: 65 33 05 14 00 00 00 xor %gs:0x14,%eax 8048ba5: 74 05 je 8048bac &lt;phase_2+0x5b&gt; 8048ba7: e8 e4 fb ff ff call 8048790 &lt;__stack_chk_fail@plt&gt; 8048bac: 8b 5d fc mov -0x4(%ebp),%ebx 8048baf: c9 leave 8048bb0: c3 ret 地址为8048b72一行和下一行表示ebp-36和0比较，如果0-（ebp-36)里面的值之后不是非负数那么就会调用bomb函数，引起爆炸，所以，ebp-36里的值只能为0。再往下看，设ebx里的值为i，地址为 8048b7d~ 8048b84三行运行之后就是eax赋值为1，地址为ebp+4i-40的值加上eax里的1相加后放到eax里。下一行是eax里的值和地址为ebp+4i-36也就是上一个单元里的值进行比较，不相等也会调用bomb函数，所以，根据这个，第一遍可以推出ebp-32的值为1，之后就可以一直如此（下一数等于其上一个数加上ebx里的值，ebx是逐一递增的）推出ebp-16~ebp-36之间的六个值分别为0 1 3 6 10 15栈帧分析如图 phase_31234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283&lt;phase_3&gt;: 8048bb1: 55 push %ebp 8048bb2: 89 e5 mov %esp,%ebp 8048bb4: 83 ec 24 sub $0x24,%esp 8048bb7: 65 a1 14 00 00 00 mov %gs:0x14,%eax 8048bbd: 89 45 f4 mov %eax,-0xc(%ebp) 8048bc0: 31 c0 xor %eax,%eax 8048bc2: 8d 45 f0 lea -0x10(%ebp),%eax 8048bc5: 50 push %eax 8048bc6: 8d 45 eb lea -0x15(%ebp),%eax 8048bc9: 50 push %eax 8048bca: 8d 45 ec lea -0x14(%ebp),%eax 8048bcd: 50 push %eax 8048bce: 68 82 a1 04 08 push $0x804a182 #%d %c %d 8048bd3: ff 75 08 pushl 0x8(%ebp) 8048bd6: e8 35 fc ff ff call 8048810 &lt;__isoc99_sscanf@plt&gt; 8048bdb: 83 c4 20 add $0x20,%esp 8048bde: 83 f8 02 cmp $0x2,%eax 8048be1: 7f 05 jg 8048be8 &lt;phase_3+0x37&gt; 8048be3: e8 c1 05 00 00 call 80491a9 &lt;explode_bomb&gt; 8048be8: 83 7d ec 07 cmpl $0x7,-0x14(%ebp) 8048bec: 0f 87 ef 00 00 00 ja 8048ce1 &lt;phase_3+0x130&gt; #输入的数要小于7 8048bf2: 8b 45 ec mov -0x14(%ebp),%eax 8048bf5: ff 24 85 a0 a1 04 08 jmp *0x804a1a0(,%eax,4) #0x08048c3e 8048bfc: b8 6a 00 00 00 mov $0x6a,%eax 8048c01: 81 7d f0 d9 00 00 00 cmpl $0xd9,-0x10(%ebp) 8048c08: 0f 84 dd 00 00 00 je 8048ceb &lt;phase_3+0x13a&gt; 8048c0e: e8 96 05 00 00 call 80491a9 &lt;explode_bomb&gt; 8048c13: b8 6a 00 00 00 mov $0x6a,%eax 8048c18: e9 ce 00 00 00 jmp 8048ceb &lt;phase_3+0x13a&gt; 8048c1d: b8 68 00 00 00 mov $0x68,%eax 8048c22: 81 7d f0 e4 01 00 00 cmpl $0x1e4,-0x10(%ebp) 8048c29: 0f 84 bc 00 00 00 je 8048ceb &lt;phase_3+0x13a&gt; 8048c2f: e8 75 05 00 00 call 80491a9 &lt;explode_bomb&gt; 8048c34: b8 68 00 00 00 mov $0x68,%eax 8048c39: e9 ad 00 00 00 jmp 8048ceb &lt;phase_3+0x13a&gt; 8048c3e: b8 72 00 00 00 mov $0x72,%eax #跳到这 8048c43: 81 7d f0 82 03 00 00 cmpl $0x382,-0x10(%ebp)#898 也就是第三个数 8048c4a: 0f 84 9b 00 00 00 je 8048ceb &lt;phase_3+0x13a&gt; 8048c50: e8 54 05 00 00 call 80491a9 &lt;explode_bomb&gt; 8048c55: b8 72 00 00 00 mov $0x72,%eax 8048c5a: e9 8c 00 00 00 jmp 8048ceb &lt;phase_3+0x13a&gt; 8048c5f: b8 6d 00 00 00 mov $0x6d,%eax 8048c64: 81 7d f0 06 03 00 00 cmpl $0x306,-0x10(%ebp) 8048c6b: 74 7e je 8048ceb &lt;phase_3+0x13a&gt; 8048c6d: e8 37 05 00 00 call 80491a9 &lt;explode_bomb&gt; 8048c72: b8 6d 00 00 00 mov $0x6d,%eax 8048c77: eb 72 jmp 8048ceb &lt;phase_3+0x13a&gt; 8048c79: b8 62 00 00 00 mov $0x62,%eax 8048c7e: 81 7d f0 0d 02 00 00 cmpl $0x20d,-0x10(%ebp) 8048c85: 74 64 je 8048ceb &lt;phase_3+0x13a&gt; 8048c87: e8 1d 05 00 00 call 80491a9 &lt;explode_bomb&gt; 8048c8c: b8 62 00 00 00 mov $0x62,%eax 8048c91: eb 58 jmp 8048ceb &lt;phase_3+0x13a&gt; 8048c93: b8 63 00 00 00 mov $0x63,%eax 8048c98: 81 7d f0 4b 02 00 00 cmpl $0x24b,-0x10(%ebp) 8048c9f: 74 4a je 8048ceb &lt;phase_3+0x13a&gt; 8048ca1: e8 03 05 00 00 call 80491a9 &lt;explode_bomb&gt; 8048ca6: b8 63 00 00 00 mov $0x63,%eax 8048cab: eb 3e jmp 8048ceb &lt;phase_3+0x13a&gt; 8048cad: b8 65 00 00 00 mov $0x65,%eax 8048cb2: 81 7d f0 53 02 00 00 cmpl $0x253,-0x10(%ebp) 8048cb9: 74 30 je 8048ceb &lt;phase_3+0x13a&gt; 8048cbb: e8 e9 04 00 00 call 80491a9 &lt;explode_bomb&gt; 8048cc0: b8 65 00 00 00 mov $0x65,%eax 8048cc5: eb 24 jmp 8048ceb &lt;phase_3+0x13a&gt; 8048cc7: b8 65 00 00 00 mov $0x65,%eax 8048ccc: 81 7d f0 5c 01 00 00 cmpl $0x15c,-0x10(%ebp) 8048cd3: 74 16 je 8048ceb &lt;phase_3+0x13a&gt; 8048cd5: e8 cf 04 00 00 call 80491a9 &lt;explode_bomb&gt; 8048cda: b8 65 00 00 00 mov $0x65,%eax 8048cdf: eb 0a jmp 8048ceb &lt;phase_3+0x13a&gt; 8048ce1: e8 c3 04 00 00 call 80491a9 &lt;explode_bomb&gt; 8048ce6: b8 73 00 00 00 mov $0x73,%eax 8048ceb: 3a 45 eb cmp -0x15(%ebp),%al #也就是第二个字符的ascii是0x72 也就是r 8048cee: 74 05 je 8048cf5 &lt;phase_3+0x144&gt; 8048cf0: e8 b4 04 00 00 call 80491a9 &lt;explode_bomb&gt; 8048cf5: 8b 45 f4 mov -0xc(%ebp),%eax 8048cf8: 65 33 05 14 00 00 00 xor %gs:0x14,%eax 8048cff: 74 05 je 8048d06 &lt;phase_3+0x155&gt; 8048d01: e8 8a fa ff ff call 8048790 &lt;__stack_chk_fail@plt&gt; 8048d06: c9 leave 8048d07: c3 ret 首先给出了明地址8048bce，看看里面是啥 ，发现是%d %c %d，这意味着输入一个数一个字符和一个数，再往下看，8048bde这里把scanf函数的返回值和2比较，由于我们之前已经找到了输入的格式，所以此时的eax为确定的3。接着往后，地址为ebp-14里的内容和7比较，也就是说，第一个数要小于7，初步测试用2，之后通过gdb调试发现跳到0x08048c3e，之后是地址为ebp-16的值和0x382即898比较，只有相等才不会调用bomb函数，也就是说第三个数是898，再往后跳转到8048ceb，此时的eax里是0x72，要求地址为ebp-21的值和al里的值相等，又因为之前看到输入里有一个字符，也就是说，字符的ascii码为0x72，即r,至此，第三个字符完成。当然，如果一开始输入的不是二而是其他小于7的数，后面的各个跳转到的位置也会变化，后两个输入也会不同，也就是这个字符的答案不唯一。 phase_412345678910111213141516171819202122232425262728293031323334353637383940414208048d08 &lt;func4&gt;: 8048d08: 55 push %ebp 8048d09: 89 e5 mov %esp,%ebp 8048d0b: 56 push %esi 8048d0c: 53 push %ebx 8048d0d: 8b 4d 08 mov 0x8(%ebp),%ecx 8048d10: 8b 5d 0c mov 0xc(%ebp),%ebx 8048d13: 8b 75 10 mov 0x10(%ebp),%esi 8048d16: 89 f0 mov %esi,%eax 8048d18: 29 d8 sub %ebx,%eax 8048d1a: 89 c2 mov %eax,%edx 8048d1c: c1 ea 1f shr $0x1f,%edx 8048d1f: 01 d0 add %edx,%eax 8048d21: d1 f8 sar %eax 8048d23: 8d 14 18 lea (%eax,%ebx,1),%edx 8048d26: 39 ca cmp %ecx,%edx 8048d28: 7e 15 jle 8048d3f &lt;func4+0x37&gt; 8048d2a: 83 ec 04 sub $0x4,%esp 8048d2d: 83 ea 01 sub $0x1,%edx 8048d30: 52 push %edx 8048d31: 53 push %ebx 8048d32: 51 push %ecx 8048d33: e8 d0 ff ff ff call 8048d08 &lt;func4&gt; 8048d38: 83 c4 10 add $0x10,%esp 8048d3b: 01 c0 add %eax,%eax 8048d3d: eb 1e jmp 8048d5d &lt;func4+0x55&gt; 8048d3f: b8 00 00 00 00 mov $0x0,%eax 8048d44: 39 ca cmp %ecx,%edx 8048d46: 7d 15 jge 8048d5d &lt;func4+0x55&gt; 8048d48: 83 ec 04 sub $0x4,%esp 8048d4b: 56 push %esi 8048d4c: 83 c2 01 add $0x1,%edx 8048d4f: 52 push %edx 8048d50: 51 push %ecx 8048d51: e8 b2 ff ff ff call 8048d08 &lt;func4&gt; 8048d56: 83 c4 10 add $0x10,%esp 8048d59: 8d 44 00 01 lea 0x1(%eax,%eax,1),%eax #eax=2 8048d5d: 8d 65 f8 lea -0x8(%ebp),%esp 8048d60: 5b pop %ebx 8048d61: 5e pop %esi 8048d62: 5d pop %ebp 8048d63: c3 ret 12345678910static int func4(int a, int b, int c)&#123; int tmp = (((c - b) + ((c - b) &gt;&gt; 31)) &gt;&gt; 1) + b; if (tmp &lt;= a) &#123; if (tmp == a) &#123; return (0); &#125; else &#123; return func4(a, tmp + 1, c) * 2 + 1; &#125; &#125; else &#123; return func4(a, b, tmp - 1) * 2; &#125;&#125; 1234567891011121314151617181920212223242526272829303132333435363708048d64 &lt;phase_4&gt;: 8048d64: 55 push %ebp 8048d65: 89 e5 mov %esp,%ebp 8048d67: 83 ec 18 sub $0x18,%esp 8048d6a: 65 a1 14 00 00 00 mov %gs:0x14,%eax 8048d70: 89 45 f4 mov %eax,-0xc(%ebp) 8048d73: 31 c0 xor %eax,%eax 8048d75: 8d 45 f0 lea -0x10(%ebp),%eax 8048d78: 50 push %eax 8048d79: 8d 45 ec lea -0x14(%ebp),%eax 8048d7c: 50 push %eax 8048d7d: 68 0f a3 04 08 push $0x804a30f # %d %d 8048d82: ff 75 08 pushl 0x8(%ebp) 8048d85: e8 86 fa ff ff call 8048810 &lt;__isoc99_sscanf@plt&gt; 8048d8a: 83 c4 10 add $0x10,%esp 8048d8d: 83 f8 02 cmp $0x2,%eax #输入两个数 8048d90: 75 06 jne 8048d98 &lt;phase_4+0x34&gt; 8048d92: 83 7d ec 0e cmpl $0xe,-0x14(%ebp) 8048d96: 76 05 jbe 8048d9d &lt;phase_4+0x39&gt; #&lt;= 8048d98: e8 0c 04 00 00 call 80491a9 &lt;explode_bomb&gt; 8048d9d: 83 ec 04 sub $0x4,%esp 8048da0: 6a 0e push $0xe 8048da2: 6a 00 push $0x0 8048da4: ff 75 ec pushl -0x14(%ebp) 8048da7: e8 5c ff ff ff call 8048d08 &lt;func4&gt; 8048dac: 83 c4 10 add $0x10,%esp 8048daf: 83 f8 05 cmp $0x5,%eax #返回值必须为5 8048db2: 75 06 jne 8048dba &lt;phase_4+0x56&gt; 8048db4: 83 7d f0 05 cmpl $0x5,-0x10(%ebp) 8048db8: 74 05 je 8048dbf &lt;phase_4+0x5b&gt; 8048dba: e8 ea 03 00 00 call 80491a9 &lt;explode_bomb&gt; 8048dbf: 8b 45 f4 mov -0xc(%ebp),%eax 8048dc2: 65 33 05 14 00 00 00 xor %gs:0x14,%eax 8048dc9: 74 05 je 8048dd0 &lt;phase_4+0x6c&gt; 8048dcb: e8 c0 f9 ff ff call 8048790 &lt;__stack_chk_fail@plt&gt; 8048dd0: c9 leave 8048dd1: c3 ret 首先打印地址0x804a30f的内容发现是%d %d初步判定是输入两个整型，再往下看有一个输入返回值和2的比较也就是说必须输入两个数，这就基本确定是输入两个数。再往后看，发现是调用func4函数，这个函数的参数第一个是输入的值，第二个是0，第三个是0xe。看func4的功能，func4的c函数见上。再回来看phase_4函数，发现要求返回值是5，不然就会调用bomb函数。再去看func4，是一个递归，最后一次只能是0才能回去，那就从0开始，两个选择，要么是2×返回值，要么是2×返回值+1，从零开始，先乘二加一，再乘二，再乘二加一就是5，也就是第一次要输入的数&gt;tmp,在这里就是输入的数大于7，第二次是输入的数小于tmp，在这里是输入的数小于11，第三次是输入的数大于tmp，在这里是输入的数大于5，第四次就是输入的数等于tmp，计算出tmp=10，这就是输入的第一个参数。再往后看，很简单了，第二个参数和5比较，不相等就bomb，所以第二个参数是5. phase_512345678910111213141516171819202122232425262728293031323334353637383940414208048dd2 &lt;phase_5&gt;: 8048dd2: 55 push %ebp 8048dd3: 89 e5 mov %esp,%ebp 8048dd5: 83 ec 18 sub $0x18,%esp 8048dd8: 65 a1 14 00 00 00 mov %gs:0x14,%eax 8048dde: 89 45 f4 mov %eax,-0xc(%ebp) 8048de1: 31 c0 xor %eax,%eax 8048de3: 8d 45 f0 lea -0x10(%ebp),%eax 8048de6: 50 push %eax 8048de7: 8d 45 ec lea -0x14(%ebp),%eax 8048dea: 50 push %eax 8048deb: 68 0f a3 04 08 push $0x804a30f #%d %d 8048df0: ff 75 08 pushl 0x8(%ebp) 8048df3: e8 18 fa ff ff call 8048810 &lt;__isoc99_sscanf@plt&gt; 8048df8: 83 c4 10 add $0x10,%esp 8048dfb: 83 f8 01 cmp $0x1,%eax 8048dfe: 7f 05 jg 8048e05 &lt;phase_5+0x33&gt; 8048e00: e8 a4 03 00 00 call 80491a9 &lt;explode_bomb&gt; 8048e05: 8b 45 ec mov -0x14(%ebp),%eax 8048e08: 83 e0 0f and $0xf,%eax 8048e0b: 89 45 ec mov %eax,-0x14(%ebp) 8048e0e: 83 f8 0f cmp $0xf,%eax 8048e11: 74 2c je 8048e3f &lt;phase_5+0x6d&gt; 8048e13: b9 00 00 00 00 mov $0x0,%ecx 8048e18: ba 00 00 00 00 mov $0x0,%edx 8048e1d: 83 c2 01 add $0x1,%edx 8048e20: 8b 04 85 c0 a1 04 08 mov 0x804a1c0(,%eax,4),%eax 8048e27: 01 c1 add %eax,%ecx 8048e29: 83 f8 0f cmp $0xf,%eax 8048e2c: 75 ef jne 8048e1d &lt;phase_5+0x4b&gt; 8048e2e: c7 45 ec 0f 00 00 00 movl $0xf,-0x14(%ebp) 8048e35: 83 fa 0f cmp $0xf,%edx 8048e38: 75 05 jne 8048e3f &lt;phase_5+0x6d&gt; 8048e3a: 3b 4d f0 cmp -0x10(%ebp),%ecx 8048e3d: 74 05 je 8048e44 &lt;phase_5+0x72&gt; 8048e3f: e8 65 03 00 00 call 80491a9 &lt;explode_bomb&gt; 8048e44: 8b 45 f4 mov -0xc(%ebp),%eax 8048e47: 65 33 05 14 00 00 00 xor %gs:0x14,%eax 8048e4e: 74 05 je 8048e55 &lt;phase_5+0x83&gt; 8048e50: e8 3b f9 ff ff call 8048790 &lt;__stack_chk_fail@plt&gt; 8048e55: c9 leave 8048e56: c3 ret 地址为0x804a30f 的内容是%d %d ，根据之前的经验，还是输入两个整型。再往后看，这个的意思就是ecx中存放sum，edx中存放数组下标i，eax中存放a[i],a的起始地址为0x804a1c0，要求找到相应的正确起始下标并且保证值为15的数在数组下标为15的地方，打印出这个数组：12 3 7 11 13 9 4 8 0 10 1 2 14 6 15 也就是要想办法让第a[1]的值是12，mov %eax,-0x14(%ebp) cmp $0xf,%eax je 8048e3f &lt;phase_5+0x6d&gt;这三句给了提示，输入的数组下标不超过14，从头来，试到第五个就是12开头了。也就是第一个数是5，再往后看，-0x10(%ebp),%ecx要求第二个参数和ecx中的值一样，通过gdb调试发现执行到这步的时候，ecx值为115，也就是第二个数是115. phase_612345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868708048e57 &lt;phase_6&gt;: 8048e57: 55 push %ebp 8048e58: 89 e5 mov %esp,%ebp 8048e5a: 56 push %esi 8048e5b: 53 push %ebx 8048e5c: 83 ec 48 sub $0x48,%esp 8048e5f: 65 a1 14 00 00 00 mov %gs:0x14,%eax 8048e65: 89 45 f4 mov %eax,-0xc(%ebp) 8048e68: 31 c0 xor %eax,%eax 8048e6a: 8d 45 c4 lea -0x3c(%ebp),%eax 8048e6d: 50 push %eax 8048e6e: ff 75 08 pushl 0x8(%ebp) 8048e71: e8 5b 03 00 00 call 80491d1 &lt;read_six_numbers&gt; #读六个数 8048e76: 83 c4 10 add $0x10,%esp 8048e79: be 00 00 00 00 mov $0x0,%esi 8048e7e: 8b 44 b5 c4 mov -0x3c(%ebp,%esi,4),%eax 8048e82: 83 e8 01 sub $0x1,%eax 8048e85: 83 f8 05 cmp $0x5,%eax 8048e88: 76 05 jbe 8048e8f &lt;phase_6+0x38&gt; 8048e8a: e8 1a 03 00 00 call 80491a9 &lt;explode_bomb&gt; 8048e8f: 83 c6 01 add $0x1,%esi 8048e92: 83 fe 06 cmp $0x6,%esi 8048e95: 74 1b je 8048eb2 &lt;phase_6+0x5b&gt; 8048e97: 89 f3 mov %esi,%ebx 8048e99: 8b 44 9d c4 mov -0x3c(%ebp,%ebx,4),%eax 8048e9d: 39 44 b5 c0 cmp %eax,-0x40(%ebp,%esi,4) 8048ea1: 75 05 jne 8048ea8 &lt;phase_6+0x51&gt; 8048ea3: e8 01 03 00 00 call 80491a9 &lt;explode_bomb&gt; 8048ea8: 83 c3 01 add $0x1,%ebx 8048eab: 83 fb 05 cmp $0x5,%ebx 8048eae: 7e e9 jle 8048e99 &lt;phase_6+0x42&gt; 8048eb0: eb cc jmp 8048e7e &lt;phase_6+0x27#6个小于等于6的不同的数 8048eb2: 8d 45 c4 lea -0x3c(%ebp),%eax 8048eb5: 8d 5d dc lea -0x24(%ebp),%ebx 8048eb8: b9 07 00 00 00 mov $0x7,%ecx 8048ebd: 89 ca mov %ecx,%edx 8048ebf: 2b 10 sub (%eax),%edx 8048ec1: 89 10 mov %edx,(%eax) 8048ec3: 83 c0 04 add $0x4,%eax 8048ec6: 39 c3 cmp %eax,%ebx 8048ec8: 75 f3 jne 8048ebd &lt;phase_6+0x66&gt; 8048eca: bb 00 00 00 00 mov $0x0,%ebx 8048ecf: eb 16 jmp 8048ee7 &lt;phase_6+0x90&gt; 8048ed1: 8b 52 08 mov 0x8(%edx),%edx 8048ed4: 83 c0 01 add $0x1,%eax 8048ed7: 39 c8 cmp %ecx,%eax 8048ed9: 75 f6 jne 8048ed1 &lt;phase_6+0x7a&gt; 8048edb: 89 54 b5 dc mov %edx,-0x24(%ebp,%esi,4) 8048edf: 83 c3 01 add $0x1,%ebx 8048ee2: 83 fb 060 cmp $0x6,%ebx 8048ee5: 74 17 je 8048efe &lt;phase_6+0xa7&gt; 8048ee7: 89 de mov %ebx,%esi 8048ee9: 8b 4c 9d c4 mov -0x3c(%ebp,%ebx,4),%ecx 8048eed: b8 01 00 00 00 mov $0x1,%eax 8048ef2: ba 3c c1 04 08 mov $0x804c13c,%edx 8048ef7: 83 f9 01 cmp $0x1,%ecx 8048efa: 7f d5 jg 8048ed1 &lt;phase_6+0x7a&gt; 8048efc: eb dd jmp 8048edb &lt;phase_6+0x84&gt; 8048efe: 8b 5d dc mov -0x24(%ebp),%ebx 8048f01: 8d 45 dc lea -0x24(%ebp),%eax 8048f04: 8d 75 f0 lea -0x10(%ebp),%esi 8048f07: 89 d9 mov %ebx,%ecx 8048f09: 8b 50 04 mov 0x4(%eax),%edx 8048f0c: 89 51 08 mov %edx,0x8(%ecx)# 8048f0f: 83 c0 04 add $0x4,%eax 8048f12: 89 d1 mov %edx,%ecx 8048f14: 39 c6 cmp %eax,%esi 8048f16: 75 f1 jne 8048f09 &lt;phase_6+0xb2&gt; 8048f18: c7 42 08 00 00 00 00 movl $0x0,0x8(%edx) 8048f1f: be 05 00 00 00 mov $0x5,%esi 8048f24: 8b 43 08 mov 0x8(%ebx),%eax 8048f27: 8b 00 mov (%eax),%eax 8048f29: 39 03 cmp %eax,(%ebx) 8048f2b: 7d 05 jge 8048f32 &lt;phase_6+0xdb&gt; 8048f2d: e8 77 02 00 00 call 80491a9 &lt;explode_bomb&gt; 8048f32: 8b 5b 08 mov 0x8(%ebx),%ebx 8048f35: 83 ee 01 sub $0x1,%esi 8048f38: 75 ea jne 8048f24 &lt;phase_6+0xcd&gt; 8048f3a: 8b 45 f4 mov -0xc(%ebp),%eax 8048f3d: 65 33 05 14 00 00 00 xor %gs:0x14,%eax 8048f44: 74 05 je 8048f4b &lt;phase_6+0xf4&gt; 8048f46: e8 45 f8 ff ff call 8048790 &lt;__stack_chk_fail@plt&gt; 8048f4b: 8d 65 f8 lea -0x8(%ebp),%esp 8048f4e: 5b pop %ebx 8048f4f: 5e pop %esi 8048f50: 5d pop %ebp 8048f51: c3 ret 首先是调用了读取六个数的函数，也就是要输入六个数，再往后有两个循环，一个是保证每个数都不一样，另一个是保证每个数都小于等于6，也就是说，只能输入1 2 3 4 5 6，但是顺序不确定，之后是待保输入数组的值的范围在1 ~ 6且不存在重复值；再往后用7减去输入数组的每个元素，相当于求补。之后出现了一个常数地址0x804c13c，打印发现里面的内容是281，不知道是啥，但是有个node节点，再往后看看有啥，打印一下地址，发现，是一个链表，最后的next都指向了下一个节点,最后指向NULL。而地址里有六个数，分别如下表。 1 2 3 4 5 6 281 438 714 78 962 875 之后是根据前面构建的地址数组，修改结构体数组的next的值，实现单链表的排序，要求单链表递减排序，若满足要求，那么拆弹成功。也就是说排序顺序为5 6 3 2 1 4。而且前面有一个7-x的操作也就是答案为2 1 4 5 6 3。 secret_phase因为之前说过有个隐藏炸弹，正好在做phase_6的时候发现了一个叫secret_phase的函数，发现只有通过phase_defused这个函数才能调用这个隐藏函数，而phase_defused函数在main函数里每一次调用完相应的六个函数之后都会调用，但是在前面的拆弹过程中没有体现出来，比如说phase_1: 128048a81: e8 aa 00 00 00 call 8048b30 &lt;phase_1&gt; 8048a86: e8 83 08 00 00 call 804930e &lt;phase_defused&gt; defused函数如下 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647480804930e &lt;phase_defused&gt;: 804930e: 55 push %ebp 804930f: 89 e5 mov %esp,%ebp 8049311: 83 ec 68 sub $0x68,%esp 8049314: 65 a1 14 00 00 00 mov %gs:0x14,%eax 804931a: 89 45 f4 mov %eax,-0xc(%ebp) 804931d: 31 c0 xor %eax,%eax 804931f: 83 3d cc c3 04 08 06 cmpl $0x6,0x804c3cc #这个地址里存放着输入的字符串个数，也就是说，只有执行完上面六个phase之后才能解锁这个隐藏函数 8049326: 75 6f jne 8049397 &lt;phase_defused+0x89&gt; 8049328: 83 ec 0c sub $0xc,%esp 804932b: 8d 45 a4 lea -0x5c(%ebp),%eax 804932e: 50 push %eax 804932f: 8d 45 a0 lea -0x60(%ebp),%eax 8049332: 50 push %eax 8049333: 8d 45 9c lea -0x64(%ebp),%eax 8049336: 50 push %eax 8049337: 68 69 a3 04 08 push $0x804a369 #%d %d %s 804933c: 68 d0 c4 04 08 push $0x804c4d0 #&lt;input_strings+240&gt;: &quot;&quot; 8049341: e8 ca f4 ff ff call 8048810 &lt;__isoc99_sscanf@plt&gt; 8049346: 83 c4 20 add $0x20,%esp 8049349: 83 f8 03 cmp $0x3,%eax #输入三个 804934c: 75 39 jne 8049387 &lt;phase_defused+0x79&gt; 804934e: 83 ec 08 sub $0x8,%esp 8049351: 68 72 a3 04 08 push $0x804a372 # 0x804a372 -&gt; DrEvil 8049356: 8d 45 a4 lea -0x5c(%ebp),%eax 8049359: 50 push %eax 804935a: e8 47 fd ff ff call 80490a6 &lt;strings_not_equal&gt; #要找个地方输入 DrEvil 804935f: 83 c4 10 add $0x10,%esp 8049362: 85 c0 test %eax,%eax 8049364: 75 21 jne 8049387 &lt;phase_defused+0x79&gt; 8049366: 83 ec 0c sub $0xc,%esp 8049369: 68 38 a2 04 08 push $0x804a238 #Curses, you&apos;ve found the secret phase! 804936e: e8 4d f4 ff ff call 80487c0 &lt;puts@plt&gt; 8049373: c7 04 24 60 a2 04 08 movl $0x804a260,(%esp) #But finding it and solving it are quite different... 804937a: e8 41 f4 ff ff call 80487c0 &lt;puts@plt&gt; 804937f: e8 20 fc ff ff call 8048fa4 &lt;secret_phase&gt; 8049384: 83 c4 10 add $0x10,%esp 8049387: 83 ec 0c sub $0xc,%esp 804938a: 68 98 a2 04 08 push $0x804a298 #&quot;Congratulations! You&apos;ve defused the bomb!&quot; 804938f: e8 2c f4 ff ff call 80487c0 &lt;puts@plt&gt; 8049394: 83 c4 10 add $0x10,%esp 8049397: 8b 45 f4 mov -0xc(%ebp),%eax 804939a: 65 33 05 14 00 00 00 xor %gs:0x14,%eax 80493a1: 74 05 je 80493a8 &lt;phase_defused+0x9a&gt; 80493a3: e8 e8 f3 ff ff call 8048790 &lt;__stack_chk_fail@plt&gt; 80493a8: c9 leave 80493a9: c3 ret 分析第27行，因为 调用了string_not_equal函数，之前push了0x804a372 （DrEvil）也就是说要找一个地方输入这个字符串，又因为%d %d %s，猜测是在第四个或者第五个之后输入，在第四个尝试之后成功了。接下来就是secret-phase了。 secret_phase 12345678910111213141516171819202122232425262728293031323308048fa4 &lt;secret_phase&gt;: 8048fa4: 55 push %ebp 8048fa5: 89 e5 mov %esp,%ebp 8048fa7: 53 push %ebx 8048fa8: 83 ec 04 sub $0x4,%esp 8048fab: e8 5b 02 00 00 call 804920b &lt;read_line&gt; 8048fb0: 83 ec 04 sub $0x4,%esp 8048fb3: 6a 0a push $0xa 8048fb5: 6a 00 push $0x0 8048fb7: 50 push %eax 8048fb8: e8 c3 f8 ff ff call 8048880 &lt;strtol@plt&gt; 8048fbd: 89 c3 mov %eax,%ebx 8048fbf: 8d 40 ff lea -0x1(%eax),%eax 8048fc2: 83 c4 10 add $0x10,%esp 8048fc5: 3d e8 03 00 00 cmp $0x3e8,%eax 8048fca: 76 05 jbe 8048fd1 &lt;secret_phase+0x2d&gt; 8048fcc: e8 d8 01 00 00 call 80491a9 &lt;explode_bomb&gt; 8048fd1: 83 ec 08 sub $0x8,%esp 8048fd4: 53 push %ebxr 8048fd5: 68 88 c0 04 08 push $0x804c088 #&quot;$&quot; 8048fda: e8 73 ff ff ff call 8048f52 &lt;fun7&gt; 8048fdf: 83 c4 10 add $0x10,%esp 8048fe2: 83 f8 03 cmp $0x3,%eax #fun7返回值必须为3 8048fe5: 74 05 je 8048fec &lt;secret_phase+0x48&gt; 8048fe7: e8 bd 01 00 00 call 80491a9 &lt;explode_bomb&gt; 8048fec: 83 ec 0c sub $0xc,%esp 8048fef: 68 5c a1 04 08 push $0x804a15c #Wow! You&apos;ve defused the secret stage! 8048ff4: e8 c7 f7 ff ff call 80487c0 &lt;puts@plt&gt; 8048ff9: e8 10 03 00 00 call 804930e &lt;phase_defused&gt; 8048ffe: 83 c4 10 add $0x10,%esp 8049001: 8b 5d fc mov -0x4(%ebp),%ebx 8049004: c9 leave 8049005: c3 ret 根据第23行，也就是说调用fun7之后，返回值必须是3，这样就结束了。 fun7 1234567891011121314151617181920212223242526272829303132333408048f52 &lt;fun7&gt;: 8048f52: 55 push %ebp 8048f53: 89 e5 mov %esp,%ebp 8048f55: 53 push %ebx 8048f56: 83 ec 04 sub $0x4,%esp 8048f59: 8b 55 08 mov 0x8(%ebp),%edx 8048f5c: 8b 4d 0c mov 0xc(%ebp),%ecx 8048f5f: 85 d2 test %edx,%edx 8048f61: 74 37 je 8048f9a &lt;fun7+0x48&gt; 8048f63: 8b 1a mov (%edx),%ebx 8048f65: 39 cb cmp %ecx,%ebx 8048f67: 7e 13 jle 8048f7c &lt;fun7+0x2a&gt; 8048f69: 83 ec 08 sub $0x8,%esp 8048f6c: 51 push %ecx 8048f6d: ff 72 04 pushl 0x4(%edx) 8048f70: e8 dd ff ff ff call 8048f52 &lt;fun7&gt; 8048f75: 83 c4 10 add $0x10 ,%esp 8048f78: 01 c0 add %eax,%eax 8048f7a: eb 23 jmp 8048f9f &lt;fun7+0x4d&gt; 8048f7c: b8 00 00 00 00 mov $0x0,%eax 8048f81: 39 cb cmp %ecx,%ebx 8048f83: 74 1a je 8048f9f &lt;fun7+0x4d&gt; 8048f85: 83 ec 08 sub $0x8,%esp 8048f88: 51 push %ecx 8048f89: ff 72 08 pushl 0x8(%edx) 8048f8c: e8 c1 ff ff ff call 8048f52 &lt;fun7&gt; 8048f91: 83 c4 10 add $0x10,%esp 8048f94: 8d 44 00 01 lea 0x1(%eax,%eax,1),%eax 8048f98: eb 05 jmp 8048f9f &lt;fun7+0x4d&gt; 8048f9a: b8 ff ff ff ff mov $0xffffffff,%eax 8048f9f: 8b 5d fc mov -0x4(%ebp),%ebx 8048fa2: c9 leave 8048fa3: c3 ret 123456int func7(int *a, int b)&#123; if (b== *a) return 0; else if(*a&gt;b) return 2*fun7(x+4,y); //root-&gt;left else return 2*fun7(x+8,y)+1;//root—&gt;right&#125; 这是fun7的c代码，是一个和fun4很像的递归代码。最后一个数是3，那么上一个就是1，再上一个就是0，二叉树方向：root-&gt;right-&gt;right。从节点最初在secret_phase中传入的地址作为根节点开始往回找， 也就是0x6b=107 至此所有的炸弹都拆完了。]]></content>
  </entry>
  <entry>
    <title><![CDATA[csapp_bombLab]]></title>
    <url>%2F2019%2F12%2F18%2Fpostcsapp-bombLab%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[123]]></title>
    <url>%2F2019%2F09%2F09%2F123%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[事务]]></title>
    <url>%2F2019%2F09%2F06%2F%E4%BA%8B%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[数据库对同样的数据有不同的存储方式和管理方式，在mysql中称为存储引擎 myisam:速度快，不安全,不支持事务，不支持外键 InnoDB：速度慢，安全，如果支持事务，必须用InnoDB 事务： 原子性：一组操作，要么全部执行成功要么全部执行失败 隔离性：一组操作未完成之前其他会话不能看到中间过程 一致性：事务发生前后，总金额依然匹配 持久性：事务产生的影响是不能撤销的 开启事务 START TRANSACTIOON set autocommit=0 提交事务 commit; 回滚事务，回到未修改前 rollback; 事务处理放在service]]></content>
  </entry>
  <entry>
    <title><![CDATA[分页查询]]></title>
    <url>%2F2019%2F09%2F04%2F%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%2F</url>
    <content type="text"><![CDATA[select * from 表名 limit 0，2;; （页数-1）*要显示的条数，要显示的条数 分页内容：上一页，下一页，首页，尾页，跳转页，总页数，当前页，每页的数量 每页的数量：程序员设置 总条数：select count(*) from表名 总页数：总条数%每页的数量==0？（总条数%每页条数）：（总条数%每页条数+1） 首页： 判断当前页是否为第一页，如果是，超连接无效 尾页：判断当前页是否等于总页数，如果是，超链接无效 上一页：是否等于首页？无效：页码-1 下一页：是否等于尾页？无效：页码+1 当前页码：就是用户传递 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;tr&gt; &lt;td class="line_table" align="center" colspan="11" height="20"&gt; &lt;span class="left_bt2"&gt;第$&#123;page.curPage &#125;页 &amp;nbsp;&amp;nbsp;共$&#123;page.totalPage &#125;页 &lt;/span&gt;&amp;nbsp;&amp;nbsp; &lt;c:choose&gt; &lt;c:when test="$&#123;page.curPage eq 1 &#125;"&gt; &lt;span style="font-size: 12px; color:gray"&gt;[首页]&lt;/span&gt; &lt;/c:when&gt; &lt;c:otherwise&gt; &lt;a href="$&#123;#&amp;&amp;curPage=1&#125;"&gt;[首页]&lt;/a&gt; &lt;/c:otherwise&gt; &lt;/c:choose&gt; &lt;c:choose&gt; &lt;c:when test="$&#123;page.curPage eq page.totalPage &#125;"&gt; &lt;span style="font-size: 12px; color:gray"&gt;[尾页]&lt;/span&gt; &lt;/c:when&gt; &lt;c:otherwise&gt; &lt;a href="$&#123;#&amp;&amp;curPage=$&#123;page.totalPage&#125;"&gt;[尾页]&lt;/a&gt; &lt;/c:otherwise&gt; &lt;/c:choose&gt; &lt;c:choose&gt; &lt;c:when test="$&#123;page.curPage eq 1 &#125;"&gt; &lt;span style="font-size: 12px; color:gray"&gt;[上一页]&lt;/span&gt; &lt;/c:when&gt; &lt;c:otherwise&gt; &lt;a href="$&#123;#&amp;&amp;curPage=$&#123;page.curPage-1&#125;"&gt;[上一页]&lt;/a&gt; &lt;/c:otherwise&gt; &lt;/c:choose&gt; &lt;c:choose&gt; &lt;c:when test="$&#123;page.curPage eq page.totalPage &#125;"&gt; &lt;span style="font-size: 12px; color:gray"&gt;[下一页]&lt;/span&gt; &lt;/c:when&gt; &lt;c:otherwise&gt; &lt;a href="$&#123;#&amp;&amp;curPage=$&#123;page.curPage+1&#125;&amp;&amp;userid=$&#123;requestScope.ordersInfo.userid&#125;"&gt;[下一页]&lt;/a&gt; &lt;/c:otherwise&gt; &lt;/c:choose&gt; &lt;/td&lt;/tr&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[JSP]]></title>
    <url>%2F2019%2F08%2F30%2FJSP%2F</url>
    <content type="text"><![CDATA[html不能写java代码 JSP看起来是HTML，本质是servlet java代码写在&lt;%%&gt;中称为脚本片段，最终在service方法里运行，❗但不要在JSP里写java代码 jsp声明：&lt;%! %&gt;里面可以写方法 jsp注释：&lt;%– –%&gt; 输出到浏览器&lt;%= &gt; JSP九大内置对象不需要声明可以直接用的对象 requesthttpservletRequest对象，代表客户端请求 域范围：同一个请求 12String name = request.getParameter("name");System.out.println("name:"+name); response（不常用）httpservletResponse对象，代表服务器响应 session域范围：同一会话 代表一次会话 1System.out.println("sessionid="+session.getId()); applicationServletContext对象，代表当前web应用 域范围：同一web应用 1System.out.print(application.getInitParameter("name")); out（不常用）JSPWrite对象，把结果输出到浏览器 config（不常用）ServletConfig对象，代表当前servlet 1System.out.print("servlet注册名："+config.getServletName()); page（不常用）指的是jsp对应的servlet对象，也就是代表页面 1System.out.println("page:"+page); pageContext页面上下文，可以获取其他八个内置对象，域范围：当前页面 1System.out.println(pageContext.getRequest()==request);//true exception（不常用）异常对象 剩下四个常用的是jsp的四大域对象 路径写绝对路径 EL表达式从域对象里取值 el表达式没有遍历功能 表单回显：点击提交后用户名输入框依旧显示输入内容 123456789&lt;!-- 麻烦--&gt;username:&lt;input type="text" name="username" value=&lt;%=request.getParameter("username")==null?"":request.getParameter("username") %&gt; &gt;&lt;!-- 打印输入用户名 --&gt;&lt;%=request.getParameter("username") %&gt;&lt;!-- 简单el--&gt;username:&lt;input type="text" name="username" value="$&#123;param.username &#125;" &gt;&lt;!-- 打印输入用户名 --&gt;$&#123;param.username &#125; 12345&lt;% out.print(request.getAttribute("name")); %&gt;&lt;!-- 被以下方式替换了 --&gt;&lt;%=request.getAttribute("name")%&gt;&lt;!--又被以下El表达式替换了 --&gt;$&#123;name&#125; 从某一个范围中根据域对象名name去取值，如果没有指定从那个域对象里取，默认从小到大取，也就是先从pageContext里取，如果想从指定的域中取，name前面加上、pageScope、requestScope、sessionScope、applicationScope ${sessionScope.name } 如果域名叫user.name ： 不加括号：会在request域中找user对象，在user对象中找name对象，在name对象中找name属性 使用括号：[“user.name”].name ${pageContext.request.contextPath }获取当前web应用根目录 el表达式可以自动类型转换 JSTL标签导入jstl标签库 1&lt;%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %&gt; c:outvalue=${}：值 default=” “默认值 把结果输出到浏览器，可以解析特殊字符 c:set scope=“ ”:指定域对象，var=“ ”：名字value=“ ”：值 c:remove: var=” “ value=” “ c:if :不能实现else 123&lt;c:if test="$&#123;param.age&lt;20 &#125;"&gt; 太小了，未到达法定结婚年龄！&lt;/c:if&gt; c:choose判断，相当于if elseif else 1234567891011&lt;c:choose&gt; &lt;c:when test="$&#123;param.age&lt;20&#125;"&gt; 小于20... &lt;/c:when&gt; &lt;c:when test="$&#123;param.age&gt;=20 &amp;&amp; param.age&lt;=100&#125;"&gt; 20~100... &lt;/c:when&gt; &lt;c:otherwise&gt; 大于100... &lt;/c:otherwise&gt;&lt;/c:choose&gt; c:foreach遍历 属性 描述 items 要被循环的信息 begin 开始的元素（0=第一个元素，1=第二个元素） end 最后一个元素（0=第一个元素，1=第二个元素） step 每一次迭代的步长 var 代表当前条目的变量名称 varStatus 代表循环状态的变量名称 .count 表示迭代计数 MVC设计模式model：应用程序核心，数据库记录列表，bean，封装书库 service和dao view：显示数据，jsp/html controller：servlet view和controller加起来是三层架构的view]]></content>
  </entry>
  <entry>
    <title><![CDATA[JavaWeb]]></title>
    <url>%2F2019%2F08%2F27%2FJavaWeb%2F</url>
    <content type="text"><![CDATA[软件两大架构 B/S C/SC/SC:客户端 S:服务器 eg：QQ，LOL，WPS，就是桌面应用程序 特点 软件使用前必须安装 软件更新时，客户端和服务端也要更新 不能跨平台，就类似于手机版qq不能在电脑上安装 cs软件通信采用自有协议，比较安全 B/SB：浏览器， s 服务器 eg：淘宝网,京东网等网站 特点： 软件使用前不需要安装 软件更新时，只是服务端进行更新 能跨平台，必须有浏览器 bs软件通信采用的是通用的HTTP协议，相对不安全 TomcatD:\apache-tomcat-8.0.21\conf\server.xml 可以修改端口号（默认8080），还要改eclipse→servers文件夹→server.xml startup.bat 运行（前提是环境变量里有jAVA_HOME） javaWebtomcat 放到javaweb中 首先javaEE→server →new→server→tomcat 8.0→tomcat根目录→finish 打开:start 错误404：找不到资源 错误500：服务器程序出错（空指针） servelet功能 接收用户请求的http协议，解析 返回一个http的响应协议，让浏览器去解析 workset结构src放类 WebContent放页面，html，图片，js WEB_INF受保护文件，配置文件，不能放页面文件 实现一个servlet实现servlet接口1234567891011121314151617181920212223242526272829303132333435363738package com.hpe.servelet;import java.io.IOException;import java.util.Enumeration;import javax.servlet.Servlet;import javax.servlet.ServletConfig;import javax.servlet.ServletContext;import javax.servlet.ServletException;import javax.servlet.ServletRequest;import javax.servlet.ServletResponse;public class HelloServlet implements Servlet&#123; //构造；第一次请求执行，只执行一次 public HelloServlet() &#123; System.out.println("HelloServlet..."); &#125; //注销：执行一次，当servlet所在项目被卸载或者服务器被关闭时执行，用于释放资源 public void destroy() &#123; System.out.println("destory..."); &#125; public ServletConfig getServletConfig() &#123; return null; &#125; public String getServletInfo() &#123; return null; &#125; //初始化；第一次请求执行，只执行一次 public void init(ServletConfig arg0) throws ServletException &#123; System.out.println("init.........."); &#125; //多次被调用。每次请求都会执行service方法，实际用于获取请求响应结果 public void service(ServletRequest arg0, ServletResponse arg1) throws ServletException, IOException &#123; System.out.println("service..."); &#125;&#125; 映射：让一个类在浏览器中运行，配置和映射servlet，给servlet一个浏览器的地址，方法如下（以后🙅‍自己配）： 123456789101112131415161718&lt;!-- 配置和映射servelet --&gt; &lt;!-- 注册一个servelet --&gt; &lt;servlet&gt; &lt;!-- 注册名 --&gt; &lt;servlet-name&gt;hello&lt;/servlet-name&gt; &lt;!-- 全类名，不要手敲，ctrl+c,v --&gt; &lt;servlet-class&gt;com.hpe.servelet.HelloServlet&lt;/servlet-class&gt; &lt;!-- 指定servlet的一个创建时机 --&gt; &lt;/servlet&gt;&lt;!-- 映射servelet --&gt;&lt;servlet-mapping&gt;&lt;!-- 下方name必须和注册名相同 --&gt;&lt;servlet-name&gt;hello&lt;/servlet-name&gt;&lt;!-- 浏览器访问地址 --&gt;&lt;url-pattern&gt;/hello&lt;/url-pattern&gt;&lt;/servlet-mapping&gt; 运行过程：访问路径→映射的访问地址→映射的name→注册名→全类名 生命周期 加载阶段：若是第一次请求加载并实例化（创建servlet实例） 初始化阶段：若是第一次请求，调用init（）方法 响应客户请求阶段：无论第几次请求都调用service（），实际用于获取请求响应结果 终止阶段：destory（），当servlet所在项目被卸载或者服务器被关闭时执行，用于释放资源 &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;0和正数，加载的时候就创建实例，执行初始化，多个servlet时，数字越小，越先创建；负数，第一次访问时再创建实例初始化 config接口servletConfig接口，代表当前servlet，可以获取当前servlet所有配置信息 getServletName():获取注册名 getServletContext()：一般做全局数据共享，必须由servletConfig来获取，一个项目就一个context实例，每个servlet都可以访问到它 12345678910111213141516171819public void init(ServletConfig config) throws ServletException &#123; System.out.println("init.........."); //ServletConfig:代表当前servlet，可以获取当前servlet所有配置信息 //1.getServletName() 获取当前Servlet在web.xml中配置的名字 System.out.println(config.getServletName()); //✪2.getServletContext() 获取代表当前web应用的ServletContext对象 ServletContext cxt=config.getServletContext(); System.out.println(cxt.getContextPath());//获取当前web应用的根目录 //3.getInitParameter(String) 获取当前Servlet指定名称的初始化参数的值 System.out.println(config.getInitParameter("username")); //4.getInitParameterNames() 获取当前Servlet所有初始化参数的名字组成的枚举 Enumeration&lt;String&gt; names=config.getInitParameterNames(); while(names.hasMoreElements())&#123; //获取初始化参数名 String name=names.nextElement(); String value=config.getInitParameter(name); System.out.println(name+":"+value); &#125; &#125; 零散知识点 url格式：/aaa和*.aaa或者 /aaa/星，其中星代表所有字符 ./ ：代表文件所在的目录（可以省略不写） ../ ：代表文件所在的父级目录 ../../ ：代表文件所在的父级目录的父级目录 / ：代表文件所在的根目录 相对路径变绝对路径：request.getContextPath()+&quot;admin/main.jsp&#39;;&quot; 项目中路径写绝对路径 初始化参数在loadup标签前面 创建的项目是项目，没有添加到workset里 workset中添加项目：右键workset→proper…→选择→add→OK 浏览器访问地址以/开头 servlet是单例的，只创建一次实例 配置文件改了，就必须重启服务器 加入jar包：项目右键→build path→library→add library→sever runtime→tomcat…→finish html是根标签，所有的都在html中 title：浏览器上面的小框框的内容 head：帮浏览器解析整个页面 body：页面显示内容 h2:标题 1&lt;base href="&lt;%=request.getContextPath()%&gt;/"&gt; 用来表明当前页面的相对路径所使用的根路径的。 httpservlet-不需要配置文件实现servletaction：发送数据的服务器地址,method 默认get id作用：正则表达式，判断用户输入的用户名是否符合规则，通过属性写正则表达式 三大域对象✪把值存在域对象里，在别的页面通过域对象的方法获取域对象的值 获取web应用的初始化参数 获取项目的真实路径 ✪作为域对象，保护多个用户共享的数据 1.(少）servletcontext：同一项目类似一个全局变量，服务器开始就存在，服务器关闭才释放，一个项目就一个servletContext实例 ServletContext cxt = getServletContext(); 12345678protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; //ServletCOntext:代表当前web应用，相当于这个项目的全局变量 ServletContext con=getServletContext(); //获取真实路径 System.out.println(con.getRealPath("/")); //获取项目的上下文，一般用来获取项目名 System.out.println(con.getContextPath()); ​ getContextPath()一般用于获取当前项目名 2.httpsession：在同一次会话中3.httpservletrequest：在同一次请求中httpservletrequest是servletrequest（🙅‍获取http）的子接口 域对象三方法setAttriubute（）：放一个数据到servlContext中，便于后面取出 getAttriubute()：根据域对象名获取值 removeAttriubute()：根据域对象名删除值 123456789101112131415161718protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; //创建servletContext ServletContext cxt=getServletContext(); //获取域对象值 Object obj=cxt.getAttribute("count"); //如果是第一次访问，设置访问量为1 int count=0;//保存访问量 if(obj==null)&#123; count=1; &#125;else&#123; //不是第一次。加1 count=((int)obj)+1; &#125; //设置域对象值 cxt.setAttribute("count", count); response.setContentType("text/html;charset=utf-8"); response.getWriter().write("访问量："+count);&#125; request和response两种请求方式： get方式（默认）1.以地址栏的方式传输2.会把用户输入的值显示在地址栏，不安全3.速度快 查询用get() post 1.文件形式传输2.安全，传输数据大，增删改用post() doget和dopost被service方法调用 两个方法改变了参数，针对http请求 request获取用户参数，转发，作为域对象也可以存放数据 getParameter（String）：根据参数获取值，返回类型为String[] getparameterValues(String):根据名获取一组值,返回类型为String[] getParameterNames ()方法 :获取所有参数的名字，返回类型为Enumeration setCharacterEncoding(“utf-8”); getContextPath() responsegetWriter()：输出对象 response.setContentType(&quot;text/html;charset=utf-8&quot;); 输出对象12PrintWriter out = response.getWriter();out.write(); 把内容输出到浏览器上 servlet对象Request和response在每一次访问时都被创建。由容器创建的 Serlvet只会被创建一次，由用户来开发，由容器来创建，单一的实例。 ServletConfig会为每一个Servlet创建一个Config对象，且由Servlet维护。就是声明成了成员变量。 ServletContext对象，代表web应用，这一个项目就只有一个此对象。 解决乱码问题：页面，类，浏览器，tomcat编码格式必须相同 第一种针对于get和post 12345response.setContentType("text/html;charset=utf-8");String name=request.getParameter("name");//name是iso-8859-1格式 byte[] byte1=name.getBytes("iso-8859-1");//把name转成字节码 String name1=new String(byte1,"utf-8"); out.write("姓名："+name1); 第二种（推荐)只对post有效 12345response.setContentType("text/html;charset=utf-8");request.setCharacterEncoding("utf-8");//必须放在接受参数之前PrintWriter out = response.getWriter();String name=request.getParameter("name");out.write("姓名："+name); 对于get方式，tomcat8.0默认配置转成UTF-8，8.0之前，默认ISO-8859-1，在改端口号的两个server.xml中的Connector节点加入URIEncoding=utf-8 ✪请求转发，请求重定向 请求转发：地址栏还是初次请求的地址栏， 请求重定向：地址栏是最后一次响应的地址栏 本质区别：请求转发只发送一次一次请求，而重定向发送多次 请求转发：在最终的servlet中，request和中转的request是同一个request 重定向：不是同一个request 请求转发：/代表的是当前web应用的根目录，代表绝对路径http://localhost:8080/servlet02 请求重定向：/代表的是当前web站点的根目录http://localhost:8080 请求转发只能转发内部资源，请求重定向可以转发外部资源 外包是转发，还给服务器并告诉服务器谁可以完成任务为重定向 session 一次会话：浏览器打开到浏览器关闭 在服务器端保持http状态信息的方案 客户请求里是否包含session标识表明是否是第一次访问 如果当前已经创建了session，则直接返回，如果没有创建，就创建一个session 数据共享：在同一个会话中]]></content>
  </entry>
  <entry>
    <title><![CDATA[数据库]]></title>
    <url>%2F2019%2F08%2F26%2F%E6%95%B0%E6%8D%AE%E5%BA%93%2F</url>
    <content type="text"><![CDATA[登陆 进入MySQL的bin目录下 1mysql -hlocalhost -uroot -p 数据库数据库是一个二维表，每行是一个实体，列叫字段 decimal小数更精确 Varchar：变长字符串 date：YYYY-MM-DD time：HH：MM：SS datetime：YYYY-MM-DD HH：MM：SS 整型 int 不是很精确的 double 时间 datetime 字符串 varchar 表的约束：主键，非空，自增 主键唯一（内容不能重复），不能为空，一个表只能有一个主键 数据库不区分大小写 增删改查语句–（空格） ：注释 增123456INSERT INTO 表名 VALUS（不指定列名按照表的顺序写）;-- 推荐下面的（指定列名）INSERT INTO stu(stuid,stuname,age,tel,address) VALUES(1001,&apos;lisi&apos;,12,&apos;1233&apos;,&apos;buxiang&apos;) ,(1010.......);-- 自增INSERT INTO stu (stuname,age,tel,address) VALUES(&apos;lisi&apos;,13,&apos;779&apos;,&apos;buxiang&apos;); 指定列名，可以省略自增的列名，可以实行添加多条，逗号隔开 改12SELECT * FROM stu;UPDATE stu SET stuname=&apos;liwu&apos;，address=&apos;shandong&apos;WHERE stuid=1001; 可以更新主键（一般不要更新），要保证更新后不会出现重复 *代表所有列 删1DELETE FROM stu WHERE stuid=1001; where后面一般是主键 查单表查询1SELECT 列名 FROM 表名; 列名之间用 , *代表所有列 DISTINCT：对查询结果去重 1SELECT DISTINCT cid FROM student; 可以进行+ - * / 给列起别名，（as和 ）之后只能用换后的名字： 1SELECT socre as 加分前的成绩, socre+5 加分后的成绩 FROM score; select五种子句 | 子句 | 描述 || ——– | ——– || WHERE | 条件查询 || group by | 分组 || having | 筛选 || order by | 排序 || limit | 截取 | where =，&gt;，&lt;，&lt;=，&gt;=， between…and… 包含边界，日期加‘ ’ in（集合），满足集合中一个值即可 not 取反 ， like 模糊查询 ‘%字符%’，_代表一个字符，%代表多个字符 is NULL 聚合函数 AVG（）平均值 1SELECT AVG(socre) 平均成绩 FROM score WHERE subid=1; COUNT() 数据的数量 1SELECT COUNT(*) FROM score WHERE subid=1; SUM（）求和 1SELECT SUM(socre) FROM score; MAX（）MIN（） 1SELECT MAX(socre) from score; 分组group by 每 各 要分组 带聚合函数 一般都要分组 SELECT...FROM....WHERE...GRUP BY 列名 1234SELECT AVG(socre) FROM score GROUP BY subid;-- sqlserverSELECT AVG(socre),subid FROM score GROUP BY subid; having where 针对表中真正存在的列 having 针对查询结果，但是在group by之后执行 12345678-- where （✕）SELECT stuid,socre+5 加分后的成绩 FROM score WHERE 加分后的成绩&lt;60; -- having（√）SELECT stuid,socre+5 加分后的成绩 FROM score HAVING 加分后的成绩&lt;60;-- sqlserver-- having必须和group by一起用 order by asc升序，默认 desc降序 在select语句结尾 1SELECT * FROM student ORDER BY 字段1,字段2, ... ASC; 根据字段一进行排，排完基础上根据字段2进行排…… limit limit 数据的坐标，显示的条数; 数据的坐标从0开始 常用在分页 多表查询等值连接 两个表有相同字段 eg：查询李四所在班级，显示班级编号，姓名，班级名 把两个表连成一个大表 1SELECT * FROM student,classinfo; 确定连接条件(用表名加以区分) 1student.cid=classinfo.cid 确定其他筛选条件 1AND name=&quot;李四&quot;; 内连接 查询李四所考科目的平均成绩，显示姓名，平均成绩 把两个表连成一个大表 1SELECT * FROM student INNER JOIN score 连接条件 1ON student.stuid=score.stuid 可以多次重复上述两步以实现多张表相连 筛选条件 1WHERE `name`=&apos;李四&apos;; 左外连接 以左表为主，去右表找匹配数据，如果找不到就用null填充，也就是说，左表的数据必须被查询 12SELECT student.stuid,`name`,sex,subid,socre FROM student LEFT JOIN scoreON student.stuid=score.stuid; 右外连接 与左外连接相反 12SELECT student.stuid,`name`,sex,subid,socre FROM score LEFT JOIN studentON student.stuid=score.stuid; 左外和右外例子效果相同 尽量使用左外连接替代右外连接（大型数据库DB2只支持左外连接，不支持右外连接）]]></content>
  </entry>
  <entry>
    <title><![CDATA[JDBC]]></title>
    <url>%2F2019%2F08%2F26%2FJDBC%2F</url>
    <content type="text"><![CDATA[Java DataBase Connectivity Java数据库连接，访问数据库的一种技术 JDBC编程步骤 加载注册驱动类Driver 建立连接 操作数据 释放资源 Connection:连接对象，负责应用程序和数据库建立连接，连接成功之后才能向数据库发送命令，但是在创建连接之前，需要知道指定数据的地址，用户名和密码 Statement：执行对象，负责发送sql语句，用它执行需要拼接sql,比较繁琐，容易出错，容易引起sql注入 DriverManager： 创建连接对象 PreparedStatement预编译执行对象，是statement的一个子接口，把sql语句预编译并存储到PreparedStatement对象中，允许sql语句使用占位符，占位符坐标从一开始 ReultSet结果集对象，执行查询后，数据库返回的结果就是结果集，通常会把结果集中的数据保存到list中 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748package com.hpe.jdbc;import java.sql.Connection;import java.sql.DriverManager;import java.sql.SQLException;import java.sql.Statement;public class TestDel &#123; public static void main(String[] args) &#123; //创建连接对象 Connection conn=null; //执行对象 Statement st =null; //创建一个变量，接收数据库返回的结果、 int result=0; try&#123; //1.加载驱动 Class.forName("com.mysql.jdbc.Driver"); //2.建立连接 //数据库连接地址，用户名，密码 String url="jdbc:mysql://localhost:3306/test"; String user="root"; String pwd="root"; conn=DriverManager.getConnection(url, user, pwd); //System.out.println(conn); //创建执行对象 //根据id删除 String id = "121"; String sql="delete from stu where stuid ="+id; st=conn.createStatement(); //4.执行 result=st.executeUpdate(sql); &#125;catch(Exception e)&#123;//增删改 e.printStackTrace(); &#125;finally&#123; //5.关闭资源 try&#123; st.close(); &#125;catch(SQLException e)&#123; e.printStackTrace(); &#125; if(result&gt;0)&#123; System.out.println("删除成功"); &#125; &#125; &#125;&#125; 实体类：对应数据库中的表，表中有什么属性，实体类就定义什么属性，属性名和类型必须和表的字段和类型保持一致，一个无参构造方法，一个没有主键 的有参构造方法，主键没有自增，有一个有参构造方法，三个构造方法 执行语句 增删改：executeUpdate（） 查：executeQuery() 三层架构表示层view：为用户提供交互操作页面 业务逻辑层services：关键业务处理和数据处理 （持久层）数据访问层 dao：从数据库获取数据 分包entity：实体类 dao： services： impl：接口，implements view： util：公用类，很多要用 数据库连接池连接对象都放在这里，要用就从这里拿，用完放回 c3p0-config.xml必须放在src下，而且名字不能变 一个事务要么全成功要么全失败]]></content>
  </entry>
  <entry>
    <title><![CDATA[Java 二丢丢]]></title>
    <url>%2F2019%2F08%2F20%2FJava-%E4%BA%8C%E4%B8%A2%E4%B8%A2%2F</url>
    <content type="text"><![CDATA[数组数组也可以用引用类型 数组类型[]数组名 数组遍历 1234int[] num=new int[]&#123;1,2,3,4&#125;;for(int num1:num)&#123; System.out.println(num1);&#125; 数组必须初始化 ✪动态初始化 （指定数组长度） 数组类型[]数组名=new 数组类型[数组长度]; 1int[] arr = new int[5]; 数组类型[]数组名； 数组名=new数组类型[数组长度]; 静态初始化 （不指定数组长度，直接赋值） 数组类型 []数组名=new 数组类型[] {数据值…} 数据类型[] 数组名 = {数据值…}、 局部变量在栈里，new出来的东西在堆里 方法 定义：把一堆要重复执行的代码封装起来，如果别的程序要用到这段代码，直接调用这个方法名即可 如何？ 1234567访问修饰符 返回值类型 方法名（参数类型 参数名）&#123;代码块;return 返回值;&#125; 访问修饰符：格式是固定的 返回值类型：方法最终返回数据类型 方法名：首字母小写 参数类型：进入方法的数据类型 return：返回值返回给调用值 返回值：方法最终产生的结果 重载重载和返回类型无关 方法名必须相同，参数列表必须不同 参数个数不同，参数类型不同，参数类型顺序不同 类和对象一个类不能直接使用，类似一个汽车图纸不能直接跑 需要根据这个类创建一个真正的对象 1类名 对象名 = new 类名(); 如果成员变量没有赋值，会有默认值 成员变量，局部变量区别 成员变量在堆里，局部变量在栈里 成员变量声明在类内部，方法外部，局部变量在方法内部 成员变量有默认值，局部变量没有默认值 局部变量和成员变量重名时，方法会根据就近原则使用局部变量，为了区分，用this关键字（this关键字可以理解为当前使用或正在创建的对象） 面向对象的三大特性封装当我创建好对象以后，如果直接用对象名.属性的方式给属性赋值的话，可能会出现一些不符合实际的情况，所以不考虑“对象名.属性”的方法进行赋值 属性私有化 提供公用的get set 方法实现调用 修饰符 类内部 同一个包 子类 任何地方 private √ 缺省 √ √ protected √ √ √ public √ √ √ √ 构造方法： 用来创建对象 有参构造方法可以直接给属性赋值 定义构造函数 123public 构造方法名（参数）&#123;&#125; //注意（1.）没有返回值（2.）构造方法名必须和类名完全一致 构造方法是一个方法，可以重载； 注意：构造方法如果没有自己定义，系统会自动提供一个无参构造方法；如果自己定义了构造方法，系统不再提供构造方法 super（）指向离自己最近的父类 继承 定义父类 定义子类 extends 12public class 子类名 extends 父类名&#123;&#125; 子类继承父类之后，可以继承父类所有的属性和方法； 子类除了通过继承获取父类属性和方法外，还可以定义自己独有的属性和方法 一个子类只能有一个父类，一个父类可以有多个子类 重写：子类继承父类之后，如果父类方法满足不了子类要求，子类可以对父类进行重写。 子类的方法名，返回值类型，参数列表必须和父类一样 子类的访问修饰符权限不能小于父类的访问修饰符权限 子类和父类必须同时为“static”或者非“static” 多态多态就是一个对象的多种形态 使用多态的前提是有继承或接口的实现 方法的重载和重写是多态 子类对象的多态性：父类引用指向子类对象（子类必须重写父类方法，而且子类继承了父类） 1234567Person p2 = new Man();p2.eat(); //√p2.sleep();//✕//通过p2调用man的eat,但不能调用子类独有的方法（编译期间，程序会把p2看成是person类型，而person类种没有子类独有方法，编译不通过，也不能运行）//对多态来说，第一行编译看左边，运行看右边//如果要调用。需要类型转换Man m1=(Man)p2; static关键字成员变量：**如果成员变量加了static，那么这个变量不属于对象，属于类本身，实现多个对象之间的数据共享 方法：普通方法需要创建对象才能用，静态方法不用创建对象就可使用；静态方法不能访问非静态成员变量和非静态成员方法，成员方法可以访问静态成员变量 抽象类和接口如果父类的方法必须被子类重写的话，可以把父类方法定义成抽象方法 抽象方法，抽象类动物吃饭 特点： 只有方法定义，没有方法体、 抽象方法必须在抽象类里 抽象类不能实例化 如果想实现抽象类，必须创建一个子类去继承他 子类继承一个抽象类，必须重写抽象类里所有的抽象方法 抽象类里可以定义普通方法， 抽象类里可以定义构造方法 接口（一个特殊的抽象类）接口就是多个类的共用规范 接口里面的方法都是抽象方法 接口中没有变量，都是常量，默认被public static 修饰 12345public abstract void start();public void add();abstract void run();void stop();//以上都是一样的，接口中抽象方法默认被public abstract修饰 接口不能实例化，如果用接口，实现接口 要实现一个接口，必须重写接口里的所有抽象方法 父类和接口区别：一个类可以实现多个接口，但是只能继承一个类 接口里不能定义普通方法，也不能定义构造方法 接口可以继承接口，并且可以继承多个接口 1Traffic tr = new ElectricVehicle();//推荐这种多态，更安全 Java常用类Object所有类的父类 equals和====：判断基本数据类型值是否相等那个，相等返回true，不相等返回false，在Object类中比较的是地址值 equals：只用在引用数据类型，在Object类中比较的也是地址值，String类重写了Object的equal方法，比较的是值 tostring()String类也重写了tostring（）方法 Stringlength():返回字符串长度 substring（int startpoint）：根据startpoint的值截取字符串，截取后面的所有从0开始 substring(int start,int end):根据start位置开始，直到end结束 ，截取的字符串包含start不包含end replace（char oldchar，char newchar）：把oldchar替换成newchar split(String regex):把一个字符串根据regex拆分成多个字符串，返回值为数组（可以用for-each读出） 封装类八种基本数据类型对应的类 主要进行数据类型转成包装类 基本数据类型和包装类互换装箱：基本数据类型→ 包装类 拆箱：包装类→ 基本数据类型 基本数据类型、包装类→ String 第一种（最简单） 12int a=10;String str = a + " "; 第二种 1String str1 = String.valueOf(a); String→基本数据类型、包装类12String str2 = "1123";int b=Integer.parseInt(str2); Date获取当前系统时间，有数据库，用java.sql SimpleDateFormat（&quot;yyyy-MM-dd HH:mm:ss&quot;）对日期进行格式化 format(date):把日期转成字符串 集合框架（升级版数组） 存多个对象：数组，集合框架 集合只能存对象 数组特点：Student[] stu = new Student[10];一旦创建，数组长度不可改变 集合有collection接口和map接口 List接口void add(int index, Object ele)：添加元素 Object get(int index):根据index查找元素 Object remove(int index)：根据index删除指定元素，返回值为删除的内容 Object set(int index,Object ele):根据坐标修改内容值，返回值为被修改原内容 size():获取集合长度 map接口 key-value的形式存储，二者什么类型都可 key不可重复，value可以重复，如果key重复，会覆盖之前的数据 一个key-value称为一个Entry，Entry是不可重复的，无序的，如果键出现重复，会把上一个覆盖掉 key重写了equals方法，保存的内容，不是地址所以 123map.put(new String("aaa"), "bbb");map.put(new String("aaa"), "bbb");//也会覆盖 主要实现类： HashMapObject put (key,value):键值对的方式向map集合中添加元素 Object remove(key)：根据key删除map元素； Set keyset():查询所有的key Collection values():查询所有value get(key):根据key查询value entryset():获取所有entry返回到set里 泛型]]></content>
  </entry>
  <entry>
    <title><![CDATA[fatal-unable-to-auto-detect-email-address]]></title>
    <url>%2F2019%2F08%2F19%2Ffatal-unable-to-auto-detect-email-address%2F</url>
    <content type="text"><![CDATA[五个月没开博客，我的git他有了自己的想法。。。 git: fatal unable to auto-detect email address (got &quot;some wrong email&quot;) 解决方法： 1$ git config --global user.email &quot;you@example.com&quot; 1$ git config --local -l 我的git……他还是有自己的想法]]></content>
  </entry>
  <entry>
    <title><![CDATA[Java一丢丢]]></title>
    <url>%2F2019%2F08%2F19%2FJava%E4%B8%80%E4%B8%A2%E4%B8%A2%2F</url>
    <content type="text"><![CDATA[这就开始学习了？？ 暑假看了一点点java，之后一个月就是java实习了，来一个分界线☟☟☟ 零散知识点 ‘syso‘ ’alt‘+’/‘&#10233;System.out.println(); Float.MAX_VALUE获取float max println：输出后自动换行，print：输出后不换行 数组定义： 12int[] a; a = new int[5]; public static final 则为常量 1970年1月1日 8点0分0秒开始 extends继承 /**+ENTER 多行注释 类名。接口名首字母大写 函数名，变量名首字母小写 常量首字母大写 单引号字符，双引号字符串 基本数据类型在栈，引用数据类型在堆里 main是程序入口，如果写的内容想在控制台输出，必须把内容放在main方法里 整数类型：byte（-128~127） short int long (long num=12L 必须带L) 数据类型转换：隐式类型转换，short转int；强制转换 12int i=10;short s2=(short)i; String 转成int(前提：string内容是数字) 12String str="123";int i2= Integer.parseInt(str); int转String 12int i3=12;string str=i3+""; 子类转父类：向上类型转换；父类转子类：向下类型转换（子类之间不能互相强转） boolean类型默认false 自动生成set get 方法：source → gets and sets→ select all→ OK 在静态static方法内部只能调用static方法或static变量 new 后面的是构造方法 1234567try&#123;可能出错的代码&#125;catch(Exception e)&#123; 出错的操作&#125;finally&#123;必须要执行的语句&#125; 短路与（&amp;&amp;）：第一个false ，不执行第二个（常用，效率高） 不短路与（&amp;）：第一个false，第二个也要执行 面向对象1234Person zhangsan; //定义一个对象zhangsan=person();//实例化对象zhangsan.name="zhangsan";//给对象的属性赋值zangsan.age=23; 快捷方式 ‘syso‘ ’ALT‘+’/‘&#10233;System.out.println(); 选中 CTRL + SHIFYT + / &#10233;多行注释 ‘main’ ‘ALT’ + ‘/‘&#10233;public static void main(String []args) ‘CTRL’ + ‘SHIFT’ +’o’&#10233;自动导包 ‘’CTRL’ + ‘1’ &#10233;接口实现 多线程继承线程类首先准备一个独立的线程类，（继承thread） 重写run方法，启动线程用start；机制视频9：00 实现Runnable接口一个类，实现runnable接口，因为没继承thread，所以没有start方法 所以要创建一个thread对象，把battle1作为thread对象的参数扔进去 匿名类]]></content>
  </entry>
  <entry>
    <title><![CDATA[CSAPP-12]]></title>
    <url>%2F2019%2F02%2F27%2FCSAPP-12%2F</url>
    <content type="text"><![CDATA[逻辑设计和硬件控制语言HCL逻辑设计逻辑门：数字电路的基本计算元素，物理结构与逻辑结构的映射，实质是晶体管。输出是输入的布尔函数。 一个逻辑门计算一位 组合电路需要遵循的原则 两个逻辑门的输出不能连到一起。 组合的电路必须是无环的。输出不能再当输入 HCL表达式与C表达式区分 逻辑门是持续输出的，但C语言表达式是执行到的时候才会求值。这个区别可以把逻辑门当成一个电路来看，电路是不能断电的，电流会一直存在。 C语言中输出可以是任意整数，而HCL只能是1和0。这点比较好理解。 对于a &amp;&amp; b这个符号来说，C语言中的规定是如果前者为假，则后者不会再计算。而HCL当中没有这种说法。 按位计算位相等： 位多路复用器： 多位运算就是多个一位一起运算 32位看是否相等： s的not被多次用到，否则需要32个not门。 HCL条件选择表达式的条件不需要互斥，按照优先顺序依次选取 集合形式的HCL表达式，需要一个输入信号与某些值匹配 储存器和时钟储存器一般两种： 时钟寄存器。储存单个位或单个字，时钟信号控制是否加载输入的值 随机访问储存器。储存多个字，地址来选择 寄存器文件和随即访问储存器有读写操作，时钟寄存器没有读写。 寄存器文件两个读端口，一个写端口，端口都带地址标识操作寄存器。 随即访问储存器只有一个地址输入和一个数据输出]]></content>
  </entry>
  <entry>
    <title><![CDATA[CSAPP-11]]></title>
    <url>%2F2019%2F02%2F25%2FCSAPP-11%2F</url>
    <content type="text"><![CDATA[Y86指令体系结构Y86的程序猿可见状态：寄存器，储存器，条件码，PC，程序状态 Y86指令集 halt：终止指令的执行 nop：占位指令，不做任何事 **movl：一系列数据传送指令。r代表寄存器，m代表储存器，i代表立即数。 opl：操作指令 jxx：条件跳转指令，根据后面的条件进行跳转 cmovxx：条件传送指令。xx是条件，只发生在两个寄存器之间 call与ret：方法的调用和返回指令。一个将返回地址入栈，并跳到目标地址。一个将返回地址入PC，并跳到返回地址。 push与pop：入栈和出栈操作 指令编码一般两个寄存器占用一个字节，储存器占四个字节，指令的编码和功能占一个字节。 寄存器的表示：4个二进制位 Y86异常Y86的四种不同状态码：AOK（正常）、HLT（执行halt指令）、ADR（非法地址）、INS（非法指令） Y86程序和x86相似，但有时候Y86需要两条指令来达到X86只要一条即可 eg：addl $4,%ecx]]></content>
  </entry>
  <entry>
    <title><![CDATA[CSAPP-10]]></title>
    <url>%2F2019%2F02%2F23%2FCSAPP-10%2F</url>
    <content type="text"><![CDATA[数组的分配与访问动态数组…咋就那么复杂 1234567891011int sum(int n)&#123; int a[n]; int i,sum; for(i = 0 ; i &lt; n; i++)&#123; a[i] = i * 3; &#125; for(i = 0 ; i &lt; n; i++)&#123; sum += a[i]; &#125; return sum;&#125; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162 .file &quot;t.c&quot; .text .globl sum .type sum, @functionsum:.LFB0: /*栈帧建立，被调用者保存寄存器的备份，栈内存分配*/ .cfi_startproc pushq %rbp .cfi_def_cfa_offset 16 .cfi_offset 6, -16 movq %rsp, %rbp .cfi_def_cfa_register 6 subq $16, %rsp /*栈帧建立，被调用者保存寄存器的备份，栈内存分配*/ /*动态数组分配内存*/ movq %fs:40, %rcx movq %rcx, -8(%rbp) xorl %ecx, %ecx movslq %edi, %rdx leaq 18(,%rdx,4), %rdx andq $-16, %rdx //分配长度为（18+4n）&amp;（-16）的值 /*动态数组分配内存*/ subq %rdx, %rsp movq %rsp, %rcx movl $0, %edx jmp .L2.L3: leal (%rdx,%rdx,2), %r8d movslq %edx, %rsi movl %r8d, (%rcx,%rsi,4) addl $1, %edx.L2: cmpl %edi, %edx jl .L3 movl $0, %edx jmp .L4.L5: movslq %edx, %rsi addl (%rcx,%rsi,4), %eax addl $1, %edx.L4: cmpl %edi, %edx jl .L5 movq -8(%rbp), %rcx xorq %fs:40, %rcx jne .L8 leave .cfi_remember_state .cfi_def_cfa 7, 8 ret.L8: .cfi_restore_state call __stack_chk_fail@PLT .cfi_endproc.LFE0: .size sum, .-sum .ident &quot;GCC: (Ubuntu 7.3.0-27ubuntu1~18.04) 7.3.0&quot; .section .note.GNU-stack,&quot;&quot;,@progbits 头大…… 异质结构与数据对齐异质结构：不同数据类型的数组组合 数据对齐：为了提高数据读取速度，会将数据以2的指数倍对齐，具体数字根据硬件设施和操作系统确定。但浪费了储存空间。]]></content>
  </entry>
  <entry>
    <title><![CDATA[CSAPP-9]]></title>
    <url>%2F2019%2F02%2F21%2FCSAPP-9%2F</url>
    <content type="text"><![CDATA[过程栈帧的结构栈帧是程序栈的一段，程序栈是储存器的一段。 起始地址：储存在%ebp寄存器（桢指针） 结束地址：储存在%esp寄存器（栈顶指针） 栈指针会在运行时移动，所以大部分时候，在访问存储器的时候会基于帧指针访问，因为在一直移动的栈指针无法根据偏移量准确的定位一个存储器位置。 过程的实现 备份原来指针 12pushl %ebpmovl %esp, %ebp 给临时变量分配预留内存 1subl $16,%esp 值压入栈顶（备份） 1pushl %ebx 使用建立好的栈帧，mov,push,pop 从栈帧中将备份的值恢复到寄存器 释放被调用的栈帧，栈指针增大 1movl %ebp,%esp 调整栈帧两端,第六步调整了栈指针， 只需要将备份的原桢指针弹到%ebp 1popl %ebp 弹出返回地址，跳出当前过程，继续执行调用者的代码。（ret） 过程相关指令:call、leave、retcall:将返回地址压入栈顶，将程序跳转到当前调用的方法的起始地址。 leave：栈指针指向桢指针，弹出备份的原桢指针到%ebp ret：栈顶的返回值弹出到PC，按照PC指示的指令地址继续执行程序。 寄存器的使用规则%eax、%edx、%ecx：调用者保存寄存器。这三个寄存器由调用者P来保存，而对于Q来说，Q可以随便使用，用完了就不用再管了。 %ebx、%esi、%edi：被调用者保存寄存器。这三个寄存器由被调用者Q来保存，Q可以使用这三个寄存器，但是如果里面有P的变量值，Q必须保证使用完以后将这三个寄存器恢复到原来的值，这里的备份，其实就是上面那8个步骤中第3个步骤做的事情。]]></content>
  </entry>
  <entry>
    <title><![CDATA[CSAPP-8]]></title>
    <url>%2F2019%2F02%2F17%2FCSAPP-8%2F</url>
    <content type="text"><![CDATA[接上一篇说最复杂的条件码寄存器组合 所有组合都是基于a-b的前提。 后缀 逻辑运算（值为1） 描述 e ZF 相等。此时ZF为1，a-b=0，相等 ne ~ZF 反之 s SF 负数。SF为1，设b=0，即a&lt;0 ns ~SF 反之 l SF^OF 有符号的小于。当OF为0时，则代表没有溢出，此时SF必须为1，SF为1则代表结果为负。即a-b&lt;0，也就是a&lt;b，也就是小于的意思。 当OF为1时，则代表产生了溢出，而此时SF必须为0，也就是说结果最后为正数，那么此时则是负溢出，也可以得到a-b&lt;0，即a&lt;b. le (SF^OF)\ ZF 有符号的小于等于。括号里代表小于，和等于作或运算 g (SF^OF)&amp;~ZF 有符号的大于。小于且不等于 ge ~(SF^OF) 有符号的大于等于。不小于 b CF 无符号的小于。无符号减法只有在减出负数的时候才可能溢出，也就是说只要结果溢出了，那么一定有a-b&lt;0 be CF\ ZF 无符号的小于等于。 a ~CF&amp; ~ZF 无符号的大于。无符号大于等于且不等于 ae ~CF s无符号大于等于]]></content>
  </entry>
  <entry>
    <title><![CDATA[CSAPP-7]]></title>
    <url>%2F2019%2F02%2F17%2FCSAPP-7%2F</url>
    <content type="text"><![CDATA[控制真的是看的很懵，很多地方理解不了…… 条件码寄存器 条件码寄存器 描述 CF 进位标志寄存器。最近的操作使最高位产生了进位，无符号操作溢出时为1 ZF 零标志寄存器。最近的操作得出的结果是0时为1 SF 符号标志寄存器。最近的操作得到的结果为负数时为1 OF 溢出标志寄存器。最近的操作导致一个补码溢出时为1 条件码寄存器大多数时候是被动改变 特殊的测试指令cmp和test是唯二可以主动设置条件码寄存器的指令 cmp S1，S2：基于S1-S2的值来设置条件码 test S2，S1：基于S2&amp;S1去设置条件码 二者都需加数据格式后缀 访问条件码寄存器 根据条件码组合，将一个字节设置为0，1 条件跳转到程序的某个其他部分 有条件的传送数据 第一种是直接读取条件码寄存器的值，二三种是直接使用，不会显示的读取条件码寄存器的值 条件码寄存器的组合这块好难啊……下一篇再细说 SET指令将条件码组合的值设置到指定的目的操作数，目的操作数只能是单字节的寄存器或储存器中单字节的位置 跳转指令直接将程序跳转到指定位置，或者根据条件码寄存器的组合进行条件跳转。除了第一个jmp直接跳转指令以及第二个jmp间接跳转指令之外，剩下的12个都是条件跳转指令。 总的来说，跳转指令包含给出一个偏移量和给出绝对地址两种 流程控制c代码（随便写的） 12345678910111213141516171819202122232425262728int jmp(int a,int b)&#123; int i; if(a==b) return a; for (i=0;i&lt;5;i++) &#123; a++; &#125; while (b&lt;10) &#123; b++; &#125; do &#123; i++; &#125; while (a&gt;=i); switch (a) &#123; case 1:a+=10; break; case 2:a+=20; break; case 5:a+=30; break; &#125; return a; &#125; 汇编代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162 .file &quot;t.c&quot; .text .globl jmp .type jmp, @functionjmp:.LFB0: .cfi_startproc /*if实现判断*/ cmpl %esi, %edi //比较a,b je .L11 //如果相等，跳到.L11，返回a movl $0, %edx //如果不相等，进行for循环，把0赋给i jmp .L3 //跳到.L3 /*if实现判断*/ /*for循环实现*/.L4: addl $1, %edi //a自加 addl $1, %edx //i自加.L3: cmpl $4, %edx // i和4比较 jle .L4 // i小于或等于4则跳到.L4 jmp .L5 //i大于4则跳到.L5,进行do while循环 /*for循环实现*/ /*do while循环实现*/.L6: addl $1, %esi //b自加.L5: cmpl $9, %esi //b和9比较 jle .L6 //b小于或等于9，则跳至.L6自加.L7: addl $1, %edx //i自加 cmpl %edx, %edi //a和i比较 jge .L7 //a大于或等于i则跳到.L7开头 /*do while循环实现*/ /*switch语句实现*/ cmpl $2, %edi //a和2比较 je .L8 //如果a=2，跳至.L8 cmpl $5, %edi //a和5比较 je .L9 //a=5则跳至.L9 cmpl $1, %edi //a和1比较 je .L14 //a=1则跳至.L14 movl %edi, %eax //取a作为返回值 ret.L14: leal 10(%rdi), %eax //计算10+a并作为返回值 ret.L8: leal 20(%rdi), %eax //计算20+a作为返回值 ret.L9: leal 30(%rdi), %eax //计算30+a作为返回值 ret.L11: movl %edi, %eax 取a作为返回值 ret .cfi_endproc.LFE0: .size jmp, .-jmp .ident &quot;GCC: (Ubuntu 7.3.0-27ubuntu1~18.04) 7.3.0&quot; .section .note.GNU-stack,&quot;&quot;,@progbits cmov指令满足条件的时候进行传送，与set比较像 条件传送指令相当于if-else的赋值判断，一般情况下，比if-else性能好]]></content>
  </entry>
  <entry>
    <title><![CDATA[CSAPP-6]]></title>
    <url>%2F2019%2F02%2F15%2FCSAPP-6%2F</url>
    <content type="text"><![CDATA[算术和逻辑操作 加载有效地址leaq：将有效地址写入目的操作数，目的操作数必须是一个寄存器 一元和二元操作一元：一个操作数 二元：俩个操作数 移位操作移位量，要移位的数。 移位量可以是立即数，或者放在单字节寄存器%cl中；目的操作数：寄存器或者内存位置 高位被忽略，eg：salb移7位…… 左移：SAL、SHL右边都是填0 右移：SAR左边填符号位。SHR左边填0 大多数指令既可以用于无符号运算，也可以用于补码运算，只有右移操作要求区分有符号和无符号数 特殊的算术操作]]></content>
  </entry>
  <entry>
    <title><![CDATA[CSAPP-5]]></title>
    <url>%2F2019%2F02%2F13%2FCSAPP-5%2F</url>
    <content type="text"><![CDATA[代码机器代码 程序计数器（PC）%rip给出将要执行的下一条指令在内存中的地址 整数寄存器文件包含16个命名的位置，储存地址或者整数数据。 条件码寄存器保存最近执行的算术或逻辑指令的状态信息。实现控制或数据流中的条件变化。 一组向量寄存器可以存放一个或多个整数或浮点数值 虚拟地址（64位）的高十六位必须设置为0 查看汇编代码（—&gt;test.s) 1linux&gt; gcc -Og -S test.c 编译并汇编该代码(—&gt;test.o) 1linux&gt; gcc -Og -c test.c GCC产生的汇编代码指令上有后缀，而反汇编代码没有，x86-64的内存引用都是四字长寄存器给出。 反汇编器：根据机器代码生成一种类似于汇编代码的格式。 查看机器代码文件的内容： 1linux&gt; objdump -d matore.o 访问信息整数寄存器： 操作数指示符立即数：常数 ($(C常数表示法)) 寄存器：某个寄存器的内容 内存引用：根据计算出的地址，访问地址 数据传送指令MOV类：把数据从源位置复制到目的位置 源操作数是一个储存在寄存器或者内存中的立即数 目的操作数是个寄存器或者内存地址（位置），不能是立即数寻址 x86-64:两操作数不能都指向内存位置。 指令 描述 movb（8） 传送字节 movw（16） 传送字 movl（32） 传送双字，以寄存器为目的时，把寄存器高位4字节设置为0 movq（64） 传送四字 movabsq 传送绝对的四字 一脸懵逼orz…… 字节传送指令比较（16进制） 指令 描述 movb 不改变其他字节 movsbq 把其他字节设为FF movzbq 把其他字节设为00 压入和弹出栈数据pushq：把数据压入到栈上 popq：弹出数据 %rsp：栈指针，保存栈顶元素地址 压入四字节：先减去8(栈倒过来放），然后将值写入新的栈顶地址。 12subq $8,%rspmovq %rbp,(%rsp) 弹出四字节：读出数据，加上8 12movq（%rsp），%raxaddq $8,%rsp]]></content>
  </entry>
  <entry>
    <title><![CDATA[CSAPP-4（浮点数）]]></title>
    <url>%2F2019%2F02%2F11%2FCSAPP-4%2F</url>
    <content type="text"><![CDATA[bomb lab题目都找不到……所以，又回来啃书了…… 舍入 向偶数舍入（默认）：找到最接近的匹配值，如果是5，则使结果的最低有效数字是偶数。 向零舍入：正数向下舍入，负数向上舍入 向上舍入：大于该数的最小整数 向下舍入：不大于该数的最大整数 IEEE浮点表示$$V=(-1)^s\times M\times 2^E$$ 符号位（s），阶码字段(E)，小数字段(M) 规格化的值 E的位模式不全为0也不全为1，此时，阶码的值E=e-Bias(偏置值：单精度：127；双精度：1023)，小数字段:[0,1]. 非规格化的值 阶码域全为0，E=1-Bias 特殊值 阶码全为1。小数域全为0时，得到的值表示无穷（s=0：正无穷，s=1:负无穷），小数域非0，结果值被称为NaN。 整数转换为浮点数创造规格化表示，用IEEE形式编码，构造小数字段，构造阶码字段]]></content>
  </entry>
  <entry>
    <title><![CDATA[CSAPP-datalab]]></title>
    <url>%2F2019%2F02%2F11%2FCSAPP-datalab%2F</url>
    <content type="text"><![CDATA[看CSAPP看的实在是绝望，觉得假期肯定啃不完，所以决定先做实验，遇见不会的再翻书，过年这一个多周的时间，做了下datalab bitAnd题目：只能用～和|来实现位的与操作。 bitAnd - x&amp;y using only ~ and | Example: bitAnd(6, 5) = 4 Legal ops: ~ | Max ops: 8 Rating: 1 思路：~x：非x，~y：非y，那么~x|~y就是既不是x也不是y，那~（~x|~y）就是既是x也是y，也就是x与y 1234int bitAnd(int x,int y)&#123; return (~(~x|~y));&#125; getByte题目：给定n （0&lt;=n&lt;=3），求出x第n个字节是哪数字。 getByte - Extract byte n from word x Bytes numbered from 0 (LSB) to 3 (MSB) Examples: getByte(0x12345678,1) = 0x56 Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt; Max ops: 6 Rating: 2 思路：（不做题觉得自己了解的还可以，一做题，就觉得，自己啥也没学到……） 第一感觉和CSAPP书上的一道习题挺像，移位运算，用0xFF移动n个字节，然后&amp;一下 123456int getByte(int x,int n)&#123; int temp=x&gt;&gt;((n)&lt;&lt;3); temp=temp&amp;0xFF; return temp;&#125; logicalShift题目：将x按逻辑位移移动n（0&lt;=n&lt;=31）位。 logicalShift - shift x to the right by n, using a logical shift Can assume that 0 &lt;= n &lt;= 31 Examples: logicalShift(0x87654321,4) = 0x08765432 Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt; Max ops: 20 Rating: 3 思路： 一开始想定义的时候直接unsigned不就好了吗？觉得那这道题就没有意义了。先进行算术右移，然后将右移产生的1mask掉,关键是mask怎么构造，范围是0~31，那1左移31位，然后取反，就是0111……1，然后右移n位，左移1位这样就出来了0…0011…1110，然后加个1，就出来了 123456int logicalShift(int x,int n)&#123; int x1=x&gt;&gt;n; int mask=(~（1&lt;&lt;31)&gt;&gt;n&lt;&lt;1)+1 return X1&amp;mask；&#125; bitCount题目：用位运算计算出x中有多少个1 bitCount - returns count of number of 1’s in word Examples: bitCount(5) = 2, bitCount(7) = 3 Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt; Max ops: 40 Rating: 4 思路：一位一位的右移，然后看奇偶数，然后进行统计，但是不能用==，/，所以没有了思路。整道题看writeup，还是不懂，看完书再说。分治 bang题目：不用！运算符求出！x结果 bang - Compute !x without using ! Examples: bang(3) = 0, bang(0) = 1 Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt; Max ops: 12 Rating: 4 思路：一开始还是想用if，感觉自己还是没找到感觉。这个题就是找0和其他数之间的区别，0|0肯定还是0，但0|1=1，除了0以外，其他数都有1，所以想从这个方面入手。但是没有思路啊，看了别人的才知道，除了0，任何数自己|上自己的相反数最高位一定是1，那就好说了，直接|一下相反数，移位一下就OK 1234567int bang(int x)&#123; int x1=~x+1; x=x|x1; x=x&gt;&gt;31; x=x+1；&#125; tmin题目：返回补码整数的最小整数数值。 tmin - return minimum two’s complement integer Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt; Max ops: 4 Rating: 1 思路：这不就是返回一个确定的值吗？ 1234int tmin(void)&#123; return 0x80 &lt;&lt; 24;&#125; fitsBits题目：只给出n个二进制位，能否表示x,能返回1. fitsBits - return 1 if x can be represented as an n-bit, two’s complement integer. 1 &lt;= n &lt;= 32 Examples: fitsBits(5,3) = 0, fitsBits(-4,3) = 1 Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt; Max ops: 15 Rating: 2 思路：因为在前面的bitCount，我在歪路上想了怎么能知道移位移到了最后一位，也就是怎么知道x转为二进制需要多少位，所以这个题就很简单了。将x右移n-1位，判断是不是全1或全0. 1234567int fitsBits(int x, int n)&#123; int x1 =~((~n)+1); x=x&gt;&gt;x1; int ans=(!tmpx|!(tmpx+1)); return ans;&#125; divpwr2题目：给出整数x，整数n，求[x/(2^n)]，答案要接近趋向0方向。 divpwr2 - Compute x/(2^n), for 0 &lt;= n &lt;= 30 Round toward zero Examples: divpwr2(15,1) = 7, divpwr2(-33,4) = -2 Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt; Max ops: 15 Rating: 2 思路：二进制的除就是右移，那就是x&gt;&gt;n.试了一下，只要x是负数，向下取整。首先判断是不是负数，(~( (x &gt;&gt; 31) &amp; 0x1) )+1，是负数构造出0xFF……FF出来，然后构造q=2^n-1 既~((~0)&lt;&lt;n)，如果既然是负数的话就可以加上(tmp &amp; q) 既 0x0…FFF，再右移动n位。 1234567int divpwr2(int x, int n)&#123; int tmp = (~( (x &gt;&gt; 31) &amp; 0x1) )+1 ; int q= ~((~0)&lt;&lt;n); int ans = (x + (tmp &amp; q) ) &gt;&gt; n ; return ans;&#125; negate题目：求相反数 negate - return -x Example: negate(1) = -1. Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt; Max ops: 5 Rating: 2 1234int negate(int x)&#123; return ((~x)+1)&#125; isPositive题目:判断x是不是正数 isPositive - return 1 if x &gt; 0, return 0 otherwise Example: isPositive(-1) = 0. Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt; Max ops: 8 Rating: 3 思路：因为有0，所以不能看符号位，那就转换一下思路，取反，如果0，那么结果是1，如果为负数，那结果为正数，符号位为1，如果x为0或负数，那么!x | (x &gt;&gt; 31) != 0，再！一下就OK了 1234int isPositive(int x)&#123; return !(!x|(x&gt;&gt;31)); &#125; isLessOrEqual题目：用位运算判定x&lt;=y，如果是就返回1，如果不是就返回0。 isLessOrEqual - if x &lt;= y then return 1, else return 0 Example: isLessOrEqual(4,5) = 1. Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt; Max ops: 24 Rating: 3 思路：分两种情况，同号和异号，异号比较一下符号位就好，同号x-y的符号位是不是0. 123456789int isLessOrEqual(int x, int y)&#123; int signx = (x &gt;&gt; 31); int signy = (y &gt;&gt; 31); int isSameSign=!(signx^signy) ; int p=!(((~x)+1+y)&gt;&gt;31); int ans=(isSameSign&amp;p)|((!isSameSign)&amp;signx); return ans;&#125; ilog2题目：求整数的log(x)。 ilog2 - return floor(log base 2 of x), where x &gt; 0 Example: ilog2(16) = 4 Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt; Max ops: 90 Rating: 4 思路：感觉和之前C程里解方程的实验应该差不多。二分法找最高位为1的位置。 12345678910int ilog2(int x)&#123; int num=0; num=(!!(x&gt;&gt;16))&lt;&lt;4; num=num+((!!(x&gt;&gt;(8+num)))&lt;&lt;3); num=num+((!!(x&gt;&gt;(4+num)))&lt;&lt;2); num=num+((!!(x&gt;&gt;(2+num)))&lt;&lt;1); num=num+((!!(x&gt;&gt;(1+num)))&lt;&lt;0); return num;&#125; float_neg题目：返回输入uf的负数形式-uf。如果uf是NAN形式就直接返回参数。 float_neg - Return bit-level equivalent of expression -f for floating point argument f. Both the argument and result are passed as unsigned int’s, but they are to be interpreted as the bit-level representations of single-precision floating point values. When argument is NaN, return argument. Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while Max ops: 10 Rating: 2 思路：题目读不懂，翻书+google，uf：unsigned float ； NaN（非数）:未定义或不可表示的值，先判断是不是NaN(&gt;0x2f800000)，是就直接返回，不是则取反 123456789unsigned float_neg(unsigned uf)&#123; unsigned result; unsigned tmp; result=uf^0x80000000; tmp=uf&amp;0x7fffffff; if(tmp&gt;0x7f800000) result=uf; return result;&#125; float_i2f题目：将int型的x转为float型的x。 float_i2f - Return bit-level equivalent of expression (float) x Result is returned as unsigned int, but it is to be interpreted as the bit-level representation of a single-precision floating point values. Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while Max ops: 30 Rating: 4 思路：没思路，翻书，感觉一到浮点数就一脸懵逼，完全没有概念，又是一道把别人的答案从头到尾看了好几遍的题，等看完书再说叭（头秃……）。 如果是0，直接返回即可 如果是0x80000000,返回0xcf000000 如果负数：变为整正数之后按照正数计算 正数：计算尾数部分左移还是右移，然后计算阶码，加上偏置值127，尾数向偶数舍入。 float_twice题目：就是将浮点数乘以2倍。 float_twice - Return bit-level equivalent of expression 2*f for floating point argument f. Both the argument and result are passed as unsigned int’s, but they are to be interpreted as the bit-level representation of single-precision floating point values. When argument is NaN, return argument Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while Max ops: 30 Rating: 4 嘤嘤嘤~浮点数真令人头大]]></content>
  </entry>
  <entry>
    <title><![CDATA[CSAPP_3]]></title>
    <url>%2F2019%2F02%2F01%2FCSAPP-3%2F</url>
    <content type="text"><![CDATA[无符号数编码$$B2U_\omega(\vec x)=\sum^{\omega-1}_{i=0}x_i2^i$$ $$eg:B2U_4([0001])=0•2^3+0•2^2+0•2^1+1•2^0=0+0+0+1=1$$ 无符号数编码唯一性 双射 补码编码$$B2T_\omega(\vec x)=-x_{\omega-1}2^{\omega-1}+\sum^{\omega-2}_{i=0}x_i2^i$$ 二进制数编码表示 原码 最左边一位为符号位（小数：小数点左边一位为符号位） +：0 —：1 反码 符号位不变，其他取反 补码 负数：反码末尾加一 正数：本身 有符号数和无符号数的转换 补码转换为无符号数$$T2U_\omega(x)=\begin{cases}x+2^\omega, x&lt;0\x,x\geq0\\end{cases}$$ 无符号数转换为补码$$U2T_\omega(u)=-u_{\omega-1}2^\omega+u$$]]></content>
  </entry>
  <entry>
    <title><![CDATA[CSAPP_2]]></title>
    <url>%2F2019%2F01%2F30%2FCSAPP-2%2F</url>
    <content type="text"><![CDATA[寻址和字节顺序 小端法：最低有效字节在最前面 大端法：最高有效字节在最前面 浮点型和整型数据有不同的字节模式 二进制代码不兼容 布尔代数 布尔运算 逻辑运算 ~ NOT &amp; AND 单竖线 OR ^ 异或（不同为1，相同为0） 位向量：固定长度，由0，1组成的串,1表示存在，0表示不存在，从右往左 布尔环 移位运算左移：右端补k个0，移位之后符号为不变，将一个整数左移1位相当于乘以2 逻辑右移：左端补k个0 算术右移：左端补k个最高有效位的值 表示 意义 x&gt;&gt;k x右移k位 x&lt;&lt;k x左移k位 位级运算转换为二进制进行运算，之后转回相应进制 掩码运算 最常见：ch&amp;0xff，生成由ch最低有效字节组成的值 0xff的二进制形式为11111111，这样最终的值为最后8位不变，其他数均为0]]></content>
  </entry>
  <entry>
    <title><![CDATA[CSAPP_1]]></title>
    <url>%2F2019%2F01%2F27%2FCSAPP-1%2F</url>
    <content type="text"><![CDATA[计算机系统只由ASCii字符构成的文件称为文本文件，其他为二进制文件。 硬件 总线：贯穿整个系统的电子管道 I/O设备：系统和外部联系的通道 主存：执行程序时，存放相关数据 处理器：解释或执行储存在主存中指令中的引擎 软件 应用程序 操作系统 虚拟内存 C全局变量相对应的数据位紧跟在代码后面，一开始被制订大小 堆：紧跟在代码和数据区后面，可动态扩展和收缩 共享库 栈：虚拟地址空间顶部，实现函数调用，可动态扩展收缩 内核虚拟内存：地址空间顶部 并发和并行 并发：同时有多个活动的系统 并行：用并发使一个系统运行更快 抽象 文件是对I/O设备的抽象 虚拟内存是对主存和磁盘的抽象 进程是对正在运行的程序的抽象 虚拟机是对整个计算机的抽象]]></content>
  </entry>
  <entry>
    <title><![CDATA[ss科学上网]]></title>
    <url>%2F2019%2F01%2F26%2Fss%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%2F</url>
    <content type="text"><![CDATA[嗯……第一次更博，有点晚了，一直在弄，期间走了不少弯路，今天可算是弄好了。 一、vultr注册—&gt;绑定银行卡—&gt;建服务器 前两个就不细说了 Server Location: sydney Server Type：centos7 x64 Server Size: 按实际需要选 Deploy Now 接下来是漫长的等待…… 二、连接及搭建ss连接：1$ ssh root@IP 之后有一个要输入yes 之后是密码 一键搭建ss123wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.shchmod +x shadowsocks.sh./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log 之后按照提示输入IP、端口、密码、加密方式 出现红框框的时候，恭喜，快要成功了…… 三、shadowsocks下载shadowsocks，然后打开，填好IP端口密码加密方式，其他默认就好。确定 bingo~ 以下为我走的弯路学到的知识一、新建centos7虚拟机 准备 VMware workstation 14 、镜像（https://www.centos.org/download/） 具体步骤 安装程序光盘映像文件，找到下载的路径 命名，选择位置 确定磁盘大小和是否拆分为多个文件 自定义硬件 选择使用ISO映像文件，并找到映像文件的路径 完成之后就可以打开虚拟机了 点黑色的地方，用上下键选第一条，漫长的等待…… 选择语言（ENGLISH） 确定日期和时间，语言，软件选择—&gt;GNOME桌面，开始安装 之后设置root和新建用户 这次是非常漫长的等待…… reboot! 设置网络，登陆，bingo~ 二、端口放行（操作防火墙）主要是三个命令 123firewall-cmd --zone=public --add-port=80/tcp --permanent //--zone :作用域 80/tcp:端口/传输协议 --permanent：没有这个重启以后还得再来一遍firewall-cmd --reloadiptables-save 第一条命令是添加端口，第二条命令是重载防火墙，第三条命令是查看开放的端口 ##同时用到的对防火墙的操作 1234firewall-cmd --state //查看防火墙状态systemctl stop firewalld.service //关闭防火墙systemctl start firewalld.service //开启防火墙systemctl disable firewalld.service //禁止firewall开机启动]]></content>
  </entry>
</search>
