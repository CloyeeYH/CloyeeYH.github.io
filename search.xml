<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSAPP-10</title>
    <url>/2019/02/23/CSAPP-10/</url>
    <content><![CDATA[<h2 id="数组的分配与访问"><a href="#数组的分配与访问" class="headerlink" title="数组的分配与访问"></a>数组的分配与访问</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[n];</span><br><span class="line">    <span class="keyword">int</span> i,sum;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt; n; i++)&#123;</span><br><span class="line">        a[i] = i * <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt; n; i++)&#123;</span><br><span class="line">        sum += a[i];</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	.file	&quot;t.c&quot;</span><br><span class="line">	.text</span><br><span class="line">	.globl	sum</span><br><span class="line">	.type	sum, @function</span><br><span class="line">sum:</span><br><span class="line">.LFB0:</span><br><span class="line">	/*栈帧建立，被调用者保存寄存器的备份，栈内存分配*/</span><br><span class="line">	.cfi_startproc</span><br><span class="line">	pushq	%rbp</span><br><span class="line">	.cfi_def_cfa_offset 16</span><br><span class="line">	.cfi_offset 6, -16</span><br><span class="line">	movq	%rsp, %rbp</span><br><span class="line">	.cfi_def_cfa_register 6</span><br><span class="line">	subq	$16, %rsp</span><br><span class="line">	/*栈帧建立，被调用者保存寄存器的备份，栈内存分配*/</span><br><span class="line">	</span><br><span class="line">	/*动态数组分配内存*/</span><br><span class="line">	movq	%fs:40, %rcx</span><br><span class="line">	movq	%rcx, -8(%rbp)</span><br><span class="line">	xorl	%ecx, %ecx</span><br><span class="line">	movslq	%edi, %rdx</span><br><span class="line">	leaq	18(,%rdx,4), %rdx</span><br><span class="line">	andq	$-16, %rdx   //分配长度为（18+4n）&amp;（-16）的值</span><br><span class="line">	/*动态数组分配内存*/</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	subq	%rdx, %rsp</span><br><span class="line">	movq	%rsp, %rcx</span><br><span class="line">	movl	$0, %edx</span><br><span class="line">	jmp	.L2</span><br><span class="line">.L3:</span><br><span class="line">	leal	(%rdx,%rdx,2), %r8d</span><br><span class="line">	movslq	%edx, %rsi</span><br><span class="line">	movl	%r8d, (%rcx,%rsi,4)</span><br><span class="line">	addl	$1, %edx</span><br><span class="line">.L2:</span><br><span class="line">	cmpl	%edi, %edx</span><br><span class="line">	jl	.L3</span><br><span class="line">	movl	$0, %edx</span><br><span class="line">	jmp	.L4</span><br><span class="line">.L5:</span><br><span class="line">	movslq	%edx, %rsi</span><br><span class="line">	addl	(%rcx,%rsi,4), %eax</span><br><span class="line">	addl	$1, %edx</span><br><span class="line">.L4:</span><br><span class="line">	cmpl	%edi, %edx</span><br><span class="line">	jl	.L5</span><br><span class="line">	movq	-8(%rbp), %rcx</span><br><span class="line">	xorq	%fs:40, %rcx</span><br><span class="line">	jne	.L8</span><br><span class="line">	leave</span><br><span class="line">	.cfi_remember_state</span><br><span class="line">	.cfi_def_cfa 7, 8</span><br><span class="line">	ret</span><br><span class="line">.L8:</span><br><span class="line">	.cfi_restore_state</span><br><span class="line">	call	__stack_chk_fail@PLT</span><br><span class="line">	.cfi_endproc</span><br><span class="line">.LFE0:</span><br><span class="line">	.size	sum, .-sum</span><br><span class="line">	.ident	&quot;GCC: (Ubuntu 7.3.0-27ubuntu1~18.04) 7.3.0&quot;</span><br><span class="line">	.section	.note.GNU-stack,&quot;&quot;,@progbits</span><br></pre></td></tr></table></figure>
<h3 id="异质结构与数据对齐"><a href="#异质结构与数据对齐" class="headerlink" title="异质结构与数据对齐"></a>异质结构与数据对齐</h3><p>异质结构：不同数据类型的数组组合</p>
<p>数据对齐：为了提高数据读取速度，会将数据以2的指数倍对齐，具体数字根据硬件设施和操作系统确定。但浪费了储存空间。</p>
]]></content>
      <categories>
        <category>计算机系统基础</category>
      </categories>
  </entry>
  <entry>
    <title>CSAPP_1</title>
    <url>/2019/01/27/CSAPP-1/</url>
    <content><![CDATA[<h1 id="计算机系统"><a href="#计算机系统" class="headerlink" title="计算机系统"></a>计算机系统</h1><p>只由ASCii字符构成的文件称为文本文件，其他为二进制文件。</p>
<ol>
<li><strong>硬件</strong><ul>
<li>总线：贯穿整个系统的电子管道</li>
<li>I/O设备：系统和外部联系的通道</li>
<li>主存：执行程序时，存放相关数据</li>
<li>处理器：解释或执行储存在主存中指令中的引擎</li>
</ul>
</li>
<li><strong>软件</strong><ul>
<li>应用程序</li>
<li>操作系统</li>
</ul>
</li>
</ol>
<h4 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h4><ol>
<li>C全局变量相对应的数据位紧跟在代码后面，一开始被制订大小</li>
<li><strong>堆</strong>：紧跟在代码和数据区后面，可动态扩展和收缩</li>
<li><strong>共享库</strong></li>
<li><strong>栈</strong>：虚拟地址空间顶部，实现函数调用，可动态扩展收缩</li>
<li><strong>内核虚拟内存</strong>：地址空间顶部</li>
</ol>
<h4 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h4><ol>
<li>并发：同时有多个活动的系统</li>
<li>并行：用并发使一个系统运行更快</li>
</ol>
<h4 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h4><ol>
<li>文件是对I/O设备的抽象</li>
<li>虚拟内存是对主存和磁盘的抽象</li>
<li>进程是对正在运行的程序的抽象</li>
<li>虚拟机是对整个计算机的抽象</li>
</ol>
]]></content>
      <categories>
        <category>计算机系统基础</category>
      </categories>
  </entry>
  <entry>
    <title>CSAPP_2</title>
    <url>/2019/01/30/CSAPP-2/</url>
    <content><![CDATA[<h4 id="寻址和字节顺序"><a href="#寻址和字节顺序" class="headerlink" title="寻址和字节顺序"></a>寻址和字节顺序</h4><ol>
<li>小端法：最低有效字节在最前面</li>
<li>大端法：最高有效字节在最前面</li>
<li>浮点型和整型数据有不同的字节模式</li>
<li>二进制代码不兼容</li>
</ol>
<h4 id="布尔代数"><a href="#布尔代数" class="headerlink" title="布尔代数"></a>布尔代数</h4><table>
<thead>
<tr>
<th style="text-align:center">布尔运算</th>
<th style="text-align:center">逻辑运算</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">~</td>
<td style="text-align:center">NOT</td>
</tr>
<tr>
<td style="text-align:center">&amp;</td>
<td style="text-align:center">AND</td>
</tr>
<tr>
<td style="text-align:center">单竖线</td>
<td style="text-align:center">OR</td>
</tr>
<tr>
<td style="text-align:center">^</td>
<td style="text-align:center">异或（不同为1，相同为0）</td>
</tr>
</tbody>
</table>
<ul>
<li>位向量：固定长度，由0，1组成的串,1表示存在，0表示不存在，从右往左</li>
<li>布尔环</li>
</ul>
<h4 id="移位运算"><a href="#移位运算" class="headerlink" title="移位运算"></a>移位运算</h4><p>左移：右端补k个0，移位之后符号为不变，将一个整数左移1位相当于乘以2</p>
<p>逻辑右移：左端补k个0</p>
<p>算术右移：左端补k个最高有效位的值</p>
<table>
<thead>
<tr>
<th style="text-align:center">表示</th>
<th style="text-align:center">意义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">x&gt;&gt;k</td>
<td style="text-align:center">x右移k位</td>
</tr>
<tr>
<td style="text-align:center">x&lt;&lt;k</td>
<td style="text-align:center">x左移k位</td>
</tr>
</tbody>
</table>
<h4 id="位级运算"><a href="#位级运算" class="headerlink" title="位级运算"></a>位级运算</h4><p>转换为二进制进行运算，之后转回相应进制</p>
<p><strong>掩码运算</strong></p>
<p>最常见：ch&amp;0xff，生成由ch最低有效字节组成的值</p>
<p>0xff的二进制形式为11111111，这样最终的值为最后8位不变，其他数均为0</p>
]]></content>
      <categories>
        <category>计算机系统基础</category>
      </categories>
  </entry>
  <entry>
    <title>CSAPP-12</title>
    <url>/2019/02/27/CSAPP-12/</url>
    <content><![CDATA[<h2 id="逻辑设计和硬件控制语言HCL"><a href="#逻辑设计和硬件控制语言HCL" class="headerlink" title="逻辑设计和硬件控制语言HCL"></a>逻辑设计和硬件控制语言HCL</h2><h3 id="逻辑设计"><a href="#逻辑设计" class="headerlink" title="逻辑设计"></a>逻辑设计</h3><p>逻辑门：数字电路的基本计算元素，物理结构与逻辑结构的映射，实质是晶体管。输出是输入的布尔函数。</p>
<p><img src="http://ww1.sinaimg.cn/large/0069QpNUly1g0lc2ailk2j30ez0430u8.jpg" alt=""></p>
<p>一个逻辑门计算一位</p>
<p>组合电路需要遵循的原则</p>
<ul>
<li>两个逻辑门的输出不能连到一起。</li>
<li>组合的电路必须是无环的。输出不能再当输入</li>
</ul>
<p>HCL表达式与C表达式区分</p>
<ul>
<li>逻辑门是持续输出的，但C语言表达式是执行到的时候才会求值。这个区别可以把逻辑门当成一个电路来看，电路是不能断电的，电流会一直存在。</li>
<li>C语言中输出可以是任意整数，而HCL只能是1和0。这点比较好理解。</li>
<li>对于a &amp;&amp; b这个符号来说，C语言中的规定是如果前者为假，则后者不会再计算。而HCL当中没有这种说法。</li>
</ul>
<h3 id="按位计算"><a href="#按位计算" class="headerlink" title="按位计算"></a>按位计算</h3><p>位相等：</p>
<p><img src="http://ww1.sinaimg.cn/large/0069QpNUly1g0lcm9qhfkj30al05ot8s.jpg" alt=""></p>
<p>位多路复用器：</p>
<p><img src="http://ww1.sinaimg.cn/large/0069QpNUly1g0lcmx9gyqj30a705qdfw.jpg" alt=""></p>
<p>多位运算就是多个一位一起运算</p>
<p>32位看是否相等：</p>
<p><img src="http://ww1.sinaimg.cn/large/0069QpNUly1g0lcrkg0qjj30ij0feq47.jpg" alt=""></p>
<p>s的not被多次用到，否则需要32个not门。</p>
<p>HCL条件选择表达式的条件不需要互斥，按照优先顺序依次选取</p>
<p>集合形式的HCL表达式，需要一个输入信号与某些值匹配</p>
<p><img src="http://ww1.sinaimg.cn/large/0069QpNUly1g0lcsezf60j30au06nmxc.jpg" alt=""></p>
<h3 id="储存器和时钟"><a href="#储存器和时钟" class="headerlink" title="储存器和时钟"></a>储存器和时钟</h3><p>储存器一般两种：</p>
<ol>
<li>时钟寄存器。储存单个位或单个字，时钟信号控制是否加载输入的值</li>
<li>随机访问储存器。储存多个字，地址来选择</li>
</ol>
<p>寄存器文件和随即访问储存器有读写操作，时钟寄存器没有读写。</p>
<p>寄存器文件两个读端口，一个写端口，端口都带地址标识操作寄存器。</p>
<p>随即访问储存器只有一个地址输入和一个数据输出</p>
]]></content>
      <categories>
        <category>计算机系统基础</category>
      </categories>
  </entry>
  <entry>
    <title>CSAPP-11</title>
    <url>/2019/02/25/CSAPP-11/</url>
    <content><![CDATA[<h2 id="Y86指令体系结构"><a href="#Y86指令体系结构" class="headerlink" title="Y86指令体系结构"></a>Y86指令体系结构</h2><p>Y86的程序猿可见状态：寄存器，储存器，条件码，PC，程序状态</p>
<h3 id="Y86指令集"><a href="#Y86指令集" class="headerlink" title="Y86指令集"></a>Y86指令集</h3><p><img src="http://ww1.sinaimg.cn/large/0069QpNUly1g0lbj37uuxj30ms0fegw4.jpg" alt=""></p>
<p>halt：终止指令的执行</p>
<p>nop：占位指令，不做任何事</p>
<p>**movl：一系列数据传送指令。r代表寄存器，m代表储存器，i代表立即数。</p>
<p>opl：操作指令</p>
<p>jxx：条件跳转指令，根据后面的条件进行跳转</p>
<p>cmovxx：条件传送指令。xx是条件，只发生在两个寄存器之间</p>
<p>call与ret：方法的调用和返回指令。一个将返回地址入栈，并跳到目标地址。一个将返回地址入PC，并跳到返回地址。</p>
<p>push与pop：入栈和出栈操作</p>
<h3 id="指令编码"><a href="#指令编码" class="headerlink" title="指令编码"></a>指令编码</h3><p>一般两个寄存器占用一个字节，储存器占四个字节，指令的编码和功能占一个字节。</p>
<p>寄存器的表示：4个二进制位</p>
<h3 id="Y86异常"><a href="#Y86异常" class="headerlink" title="Y86异常"></a>Y86异常</h3><p>Y86的四种不同状态码：AOK（正常）、HLT（执行halt指令）、ADR（非法地址）、INS（非法指令）</p>
<h3 id="Y86程序"><a href="#Y86程序" class="headerlink" title="Y86程序"></a>Y86程序</h3><p>和x86相似，但有时候Y86需要两条指令来达到X86只要一条即可</p>
<p>eg：addl $4,%ecx</p>
]]></content>
      <categories>
        <category>计算机系统基础</category>
      </categories>
  </entry>
  <entry>
    <title>CSAPP-4（浮点数）</title>
    <url>/2019/02/11/CSAPP-4/</url>
    <content><![CDATA[<p>bomb lab题目都找不到……所以，又回来啃书了……</p>
<h3 id="舍入"><a href="#舍入" class="headerlink" title="舍入"></a>舍入</h3><ul>
<li>向偶数舍入（默认）：找到最接近的匹配值，如果是5，则使结果的最低有效数字是偶数。</li>
<li>向零舍入：正数向下舍入，负数向上舍入</li>
<li>向上舍入：大于该数的最小整数</li>
<li>向下舍入：不大于该数的最大整数</li>
</ul>
<h3 id="IEEE浮点表示"><a href="#IEEE浮点表示" class="headerlink" title="IEEE浮点表示"></a>IEEE浮点表示</h3><p>$$<br>V=(-1)^s\times M\times 2^E<br>$$</p>
<ul>
<li><p>符号位（s），阶码字段(E)，小数字段(M)</p>
</li>
<li><p>规格化的值</p>
<p>E的位模式不全为0也不全为1，此时，阶码的值E=e-Bias(偏置值：单精度：127；双精度：1023)，小数字段:[0,1].</p>
</li>
<li><p>非规格化的值</p>
<p>阶码域全为0，E=1-Bias</p>
</li>
<li><p>特殊值</p>
<p>阶码全为1。小数域全为0时，得到的值表示无穷（s=0：正无穷，s=1:负无穷），小数域非0，结果值被称为NaN。</p>
</li>
</ul>
<h3 id="整数转换为浮点数"><a href="#整数转换为浮点数" class="headerlink" title="整数转换为浮点数"></a>整数转换为浮点数</h3><p>创造规格化表示，用IEEE形式编码，构造小数字段，构造阶码字段</p>
]]></content>
      <categories>
        <category>计算机系统基础</category>
      </categories>
  </entry>
  <entry>
    <title>CSAPP_3</title>
    <url>/2019/02/01/CSAPP-3/</url>
    <content><![CDATA[<h4 id="无符号数编码"><a href="#无符号数编码" class="headerlink" title="无符号数编码"></a>无符号数编码</h4><p>$$<br>B2U_\omega(\vec x)=\sum^{\omega-1}_{i=0}x_i2^i<br>$$</p>
<p>$$<br>eg:B2U_4([0001])=0•2^3+0•2^2+0•2^1+1•2^0=0+0+0+1=1<br>$$</p>
<ul>
<li>无符号数编码唯一性</li>
<li>双射</li>
</ul>
<h4 id="补码编码"><a href="#补码编码" class="headerlink" title="补码编码"></a>补码编码</h4><p>$$<br>B2T_\omega(\vec x)=-x_{\omega-1}2^{\omega-1}+\sum^{\omega-2}_{i=0}x_i2^i<br>$$</p>
<h4 id="二进制数编码表示"><a href="#二进制数编码表示" class="headerlink" title="二进制数编码表示"></a>二进制数编码表示</h4><ul>
<li><p>原码</p>
<p>最左边一位为符号位（小数：小数点左边一位为符号位）</p>
<p>+：0</p>
<p>—：1</p>
</li>
<li><p>反码</p>
<p>符号位不变，其他取反</p>
</li>
<li><p>补码</p>
<p>负数：反码末尾加一</p>
<p>正数：本身</p>
</li>
</ul>
<h4 id="有符号数和无符号数的转换"><a href="#有符号数和无符号数的转换" class="headerlink" title="有符号数和无符号数的转换"></a>有符号数和无符号数的转换</h4><ul>
<li><p>补码转换为无符号数<br>$$<br>T2U_\omega(x)=\begin{cases}<br>x+2^\omega, x&lt;0\<br>x,x\geq0\<br>\end{cases}<br>$$</p>
</li>
<li><p>无符号数转换为补码<br>$$<br>U2T_\omega(u)=-u_{\omega-1}2^\omega+u<br>$$</p>
</li>
</ul>
]]></content>
      <categories>
        <category>计算机系统基础</category>
      </categories>
  </entry>
  <entry>
    <title>CSAPP-5</title>
    <url>/2019/02/13/CSAPP-5/</url>
    <content><![CDATA[<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h2 id="机器代码"><a href="#机器代码" class="headerlink" title="机器代码"></a>机器代码</h2><ul>
<li><p>程序计数器（PC）%rip给出将要执行的下一条指令在内存中的地址</p>
</li>
<li><p>整数寄存器文件包含16个命名的位置，储存地址或者整数数据。</p>
</li>
<li><p>条件码寄存器保存最近执行的算术或逻辑指令的状态信息。实现控制或数据流中的条件变化。</p>
</li>
<li><p>一组向量寄存器可以存放一个或多个整数或浮点数值</p>
</li>
<li><p>虚拟地址（64位）的高十六位必须设置为0</p>
</li>
<li><p>查看汇编代码（—&gt;test.s)</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">linux&gt; gcc -Og -S <span class="keyword">test</span>.c</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译并汇编该代码(—&gt;test.o)</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">linux&gt; gcc -Og -<span class="keyword">c</span> test.<span class="keyword">c</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>GCC产生的汇编代码指令上有后缀，而反汇编代码没有，x86-64的内存引用都是四字长寄存器给出。</p>
</li>
<li><p>反汇编器：根据机器代码生成一种类似于汇编代码的格式。</p>
<p>查看机器代码文件的内容：</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">linux</span>&gt; <span class="selector-tag">objdump</span> <span class="selector-tag">-d</span> <span class="selector-tag">matore</span><span class="selector-class">.o</span></span><br></pre></td></tr></table></figure>
<ul>
<li><img src="http://ww1.sinaimg.cn/large/0069QpNUly1g0jz3cqxd9j30nt07pdkr.jpg" alt=""></li>
</ul>
<h2 id="访问信息"><a href="#访问信息" class="headerlink" title="访问信息"></a>访问信息</h2><p>整数寄存器：</p>
<p><img src="http://ww1.sinaimg.cn/large/0069QpNUly1g0ctdymy4kj30lq0oetyj.jpg" alt=""></p>
<h4 id="操作数指示符"><a href="#操作数指示符" class="headerlink" title="操作数指示符"></a>操作数指示符</h4><p>立即数：常数 ($(C常数表示法))</p>
<p>寄存器：某个寄存器的内容</p>
<p>内存引用：根据计算出的地址，访问地址</p>
<p><img src="http://ww1.sinaimg.cn/large/0069QpNUly1g0csjo1b7wj30oz0angww.jpg" alt=""></p>
<h4 id="数据传送指令"><a href="#数据传送指令" class="headerlink" title="数据传送指令"></a>数据传送指令</h4><p>MOV类：把数据从源位置复制到目的位置</p>
<p>源操作数是一个储存在寄存器或者内存中的立即数</p>
<p>目的操作数是个寄存器或者内存地址（位置），不能是立即数寻址</p>
<p>x86-64:两操作数不能都指向内存位置。</p>
<table>
<thead>
<tr>
<th>指令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>movb（8）</td>
<td>传送字节</td>
</tr>
<tr>
<td>movw（16）</td>
<td>传送字</td>
</tr>
<tr>
<td>movl（32）</td>
<td>传送双字，以寄存器为目的时，把寄存器高位4字节设置为0</td>
</tr>
<tr>
<td>movq（64）</td>
<td>传送四字</td>
</tr>
<tr>
<td>movabsq</td>
<td>传送绝对的四字</td>
</tr>
</tbody>
</table>
<p><strong>字节传送指令比较（16进制）</strong></p>
<table>
<thead>
<tr>
<th>指令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>movb</td>
<td>不改变其他字节</td>
</tr>
<tr>
<td>movsbq</td>
<td>把其他字节设为FF</td>
</tr>
<tr>
<td>movzbq</td>
<td>把其他字节设为00</td>
</tr>
</tbody>
</table>
<h4 id="压入和弹出栈数据"><a href="#压入和弹出栈数据" class="headerlink" title="压入和弹出栈数据"></a>压入和弹出栈数据</h4><p>pushq：把数据压入到栈上</p>
<p>popq：弹出数据</p>
<p>%rsp：栈指针，保存栈顶元素地址</p>
<p>压入四字节：先减去8(栈倒过来放），然后将值写入新的栈顶地址。</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">subq $8,%rsp</span><br><span class="line">movq %rbp,(%rsp)</span><br></pre></td></tr></table></figure>
<p>弹出四字节：读出数据，加上8</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">movq（%rsp），%rax</span><br><span class="line">addq $8,%rsp</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>计算机系统基础</category>
      </categories>
  </entry>
  <entry>
    <title>CSAPP-6</title>
    <url>/2019/02/15/CSAPP-6/</url>
    <content><![CDATA[<h2 id="算术和逻辑操作"><a href="#算术和逻辑操作" class="headerlink" title="算术和逻辑操作"></a>算术和逻辑操作</h2><p><img src="http://ww1.sinaimg.cn/large/0069QpNUly1g0cv3rkbknj30rk0iagyk.jpg" alt=""></p>
<h3 id="加载有效地址"><a href="#加载有效地址" class="headerlink" title="加载有效地址"></a>加载有效地址</h3><p>leaq：将有效地址写入目的操作数，目的操作数必须是一个寄存器、</p>
<p>区别于mov！！！！</p>
<h3 id="一元和二元操作"><a href="#一元和二元操作" class="headerlink" title="一元和二元操作"></a>一元和二元操作</h3><p>一元：一个操作数</p>
<p>二元：俩个操作数</p>
<h3 id="移位操作"><a href="#移位操作" class="headerlink" title="移位操作"></a>移位操作</h3><p>移位量，要移位的数。</p>
<p>移位量可以是立即数，或者放在单字节寄存器%cl中；目的操作数：寄存器或者内存位置</p>
<p>高位被忽略，eg：salb移7位……</p>
<p>左移：SAL、SHL右边都是填0</p>
<p>右移：SAR左边填符号位。SHR左边填0</p>
<p>大多数指令既可以用于无符号运算，也可以用于补码运算，只有右移操作要求区分有符号和无符号数</p>
<h3 id="特殊的算术操作"><a href="#特殊的算术操作" class="headerlink" title="特殊的算术操作"></a>特殊的算术操作</h3><p><img src="http://ww1.sinaimg.cn/large/0069QpNUly1g0cvvgttn5j30ow0aj7d3.jpg" alt=""></p>
]]></content>
      <categories>
        <category>计算机系统基础</category>
      </categories>
  </entry>
  <entry>
    <title>CSAPP-7</title>
    <url>/2019/02/17/CSAPP-7/</url>
    <content><![CDATA[<h2 id="控制"><a href="#控制" class="headerlink" title="控制"></a>控制</h2><h4 id="条件码寄存器"><a href="#条件码寄存器" class="headerlink" title="条件码寄存器"></a>条件码寄存器</h4><table>
<thead>
<tr>
<th>条件码寄存器</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>CF</td>
<td>进位标志寄存器。最近的操作使最高位产生了进位，无符号操作溢出时为1</td>
</tr>
<tr>
<td>ZF</td>
<td>零标志寄存器。最近的操作得出的结果是0时为1</td>
</tr>
<tr>
<td>SF</td>
<td>符号标志寄存器。最近的操作得到的结果为负数时为1</td>
</tr>
<tr>
<td>OF</td>
<td>溢出标志寄存器。最近的操作导致一个补码溢出时为1</td>
</tr>
</tbody>
</table>
<ul>
<li>条件码寄存器大多数时候是被动改变</li>
</ul>
<h4 id="特殊的测试指令"><a href="#特殊的测试指令" class="headerlink" title="特殊的测试指令"></a>特殊的测试指令</h4><p>cmp和test是唯二可以主动设置条件码寄存器的指令</p>
<p>cmp S1，S2：基于S1-S2的值来设置条件码</p>
<p>test S2，S1：基于S2&amp;S1去设置条件码</p>
<p>二者都需加数据格式后缀</p>
<h4 id="访问条件码寄存器"><a href="#访问条件码寄存器" class="headerlink" title="访问条件码寄存器"></a>访问条件码寄存器</h4><ul>
<li>根据条件码组合，将一个字节设置为0，1</li>
<li>条件跳转到程序的某个其他部分</li>
<li>有条件的传送数据</li>
</ul>
<p>第一种是直接读取条件码寄存器的值，二三种是直接使用，不会显示的读取条件码寄存器的值</p>
<h4 id="SET指令"><a href="#SET指令" class="headerlink" title="SET指令"></a>SET指令</h4><p>将条件码组合的值设置到指定的目的操作数，目的操作数只能是单字节的寄存器或储存器中单字节的位置</p>
<p><img src="http://ww1.sinaimg.cn/large/0069QpNUly1g0k541jsvtj30l60cuqb8.jpg" alt=""></p>
<h4 id="跳转指令"><a href="#跳转指令" class="headerlink" title="跳转指令"></a>跳转指令</h4><p>直接将程序跳转到指定位置，或者根据条件码寄存器的组合进行条件跳转。除了第一个jmp直接跳转指令以及第二个jmp间接跳转指令之外，剩下的12个都是条件跳转指令。</p>
<p><img src="http://ww1.sinaimg.cn/large/0069QpNUly1g0k549n5x0j30nk0dqdqn.jpg" alt=""></p>
<p>总的来说，跳转指令包含给出一个偏移量和给出绝对地址两种</p>
<h4 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h4><p>c代码（随便写的）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">jmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">if</span>(a==b) <span class="keyword">return</span> a;</span><br><span class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		a++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (b&lt;<span class="number">10</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		b++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">do</span> </span><br><span class="line">	&#123;</span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (a&gt;=i);</span><br><span class="line">	<span class="keyword">switch</span> (a)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:a+=<span class="number">10</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:a+=<span class="number">20</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">5</span>:a+=<span class="number">30</span>;</span><br><span class="line">				<span class="keyword">break</span>;	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> a;	</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>汇编代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	.file	&quot;t.c&quot;</span><br><span class="line">	.text</span><br><span class="line">	.globl	jmp</span><br><span class="line">	.type	jmp, @function</span><br><span class="line">jmp:</span><br><span class="line">.LFB0:</span><br><span class="line">	.cfi_startproc</span><br><span class="line">	/*if实现判断*/</span><br><span class="line">	cmpl	%esi, %edi  //比较a,b</span><br><span class="line">	je	.L11  //如果相等，跳到.L11，返回a</span><br><span class="line">	movl	$0, %edx  //如果不相等，进行for循环，把0赋给i</span><br><span class="line">	jmp	.L3 //跳到.L3</span><br><span class="line">	/*if实现判断*/</span><br><span class="line">	</span><br><span class="line">	/*for循环实现*/</span><br><span class="line">.L4:</span><br><span class="line">	addl	$1, %edi //a自加</span><br><span class="line">	addl	$1, %edx //i自加</span><br><span class="line">.L3:</span><br><span class="line">	cmpl	$4, %edx // i和4比较</span><br><span class="line">	jle	.L4 // i小于或等于4则跳到.L4</span><br><span class="line">	jmp	.L5 //i大于4则跳到.L5,进行do while循环</span><br><span class="line">	/*for循环实现*/</span><br><span class="line">	</span><br><span class="line">	/*do while循环实现*/</span><br><span class="line">.L6:</span><br><span class="line">	addl	$1, %esi //b自加</span><br><span class="line">.L5:</span><br><span class="line">	cmpl	$9, %esi //b和9比较</span><br><span class="line">	jle	.L6 //b小于或等于9，则跳至.L6自加</span><br><span class="line">.L7:</span><br><span class="line">	addl	$1, %edx //i自加</span><br><span class="line">	cmpl	%edx, %edi //a和i比较</span><br><span class="line">	jge	.L7 //a大于或等于i则跳到.L7开头</span><br><span class="line">	/*do while循环实现*/</span><br><span class="line">	</span><br><span class="line">	/*switch语句实现*/</span><br><span class="line">	cmpl	$2, %edi //a和2比较</span><br><span class="line">	je	.L8 //如果a=2，跳至.L8</span><br><span class="line">	cmpl	$5, %edi  //a和5比较</span><br><span class="line">	je	.L9 //a=5则跳至.L9</span><br><span class="line">	cmpl	$1, %edi //a和1比较</span><br><span class="line">	je	.L14 //a=1则跳至.L14</span><br><span class="line">	movl	%edi, %eax //取a作为返回值</span><br><span class="line">	ret</span><br><span class="line">.L14:</span><br><span class="line">	leal	10(%rdi), %eax //计算10+a并作为返回值</span><br><span class="line">	ret</span><br><span class="line">.L8:</span><br><span class="line">	leal	20(%rdi), %eax //计算20+a作为返回值</span><br><span class="line">	ret</span><br><span class="line">.L9:</span><br><span class="line">	leal	30(%rdi), %eax //计算30+a作为返回值</span><br><span class="line">	ret</span><br><span class="line">.L11:</span><br><span class="line">	movl	%edi, %eax 取a作为返回值</span><br><span class="line">	ret</span><br><span class="line">	.cfi_endproc</span><br><span class="line">.LFE0:</span><br><span class="line">	.size	jmp, .-jmp</span><br><span class="line">	.ident	&quot;GCC: (Ubuntu 7.3.0-27ubuntu1~18.04) 7.3.0&quot;</span><br><span class="line">	.section	.note.GNU-stack,&quot;&quot;,@progbits</span><br></pre></td></tr></table></figure>
<h4 id="cmov指令"><a href="#cmov指令" class="headerlink" title="cmov指令"></a>cmov指令</h4><p>满足条件的时候进行传送，与set比较像</p>
<p><img src="http://ww1.sinaimg.cn/large/0069QpNUly1g0k73cx9zoj30jn0diaip.jpg" alt=""></p>
<p>条件传送指令相当于if-else的赋值判断，一般情况下，比if-else性能好</p>
]]></content>
      <categories>
        <category>计算机系统基础</category>
      </categories>
  </entry>
  <entry>
    <title>CSAPP-9</title>
    <url>/2019/02/21/CSAPP-9/</url>
    <content><![CDATA[<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h3 id="栈帧的结构"><a href="#栈帧的结构" class="headerlink" title="栈帧的结构"></a>栈帧的结构</h3><p>栈帧是程序栈的一段，程序栈是储存器的一段。</p>
<p>起始地址：储存在%ebp寄存器（桢指针）</p>
<p>结束地址：储存在%esp寄存器（栈顶指针）</p>
<p>栈指针会在运行时移动，所以大部分时候，在访问存储器的时候会基于帧指针访问，因为在一直移动的栈指针无法根据偏移量准确的定位一个存储器位置。</p>
<p><img src="http://ww1.sinaimg.cn/large/0069QpNUly1g0k85iekgbj30mx0euq42.jpg" alt=""></p>
<h3 id="过程的实现"><a href="#过程的实现" class="headerlink" title="过程的实现"></a>过程的实现</h3><ol>
<li><p>备份原来指针</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pushl %ebp</span><br><span class="line">movl %esp, %ebp</span><br></pre></td></tr></table></figure>
</li>
<li><p>给临时变量分配预留内存</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">subl $16,%esp</span><br></pre></td></tr></table></figure>
</li>
<li><p>值压入栈顶（备份）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pushl %ebx</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用建立好的栈帧，mov,push,pop</p>
</li>
<li><p>从栈帧中将备份的值恢复到寄存器</p>
</li>
<li><p>释放被调用的栈帧，栈指针增大</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">movl %ebp,%esp</span><br></pre></td></tr></table></figure>
</li>
<li><p>调整栈帧两端,第六步调整了栈指针， 只需要将备份的原桢指针弹到%ebp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">popl %ebp</span><br></pre></td></tr></table></figure>
</li>
<li><p>弹出返回地址，跳出当前过程，继续执行调用者的代码。（ret）</p>
</li>
</ol>
<h3 id="过程相关指令-call、leave、ret"><a href="#过程相关指令-call、leave、ret" class="headerlink" title="过程相关指令:call、leave、ret"></a>过程相关指令:call、leave、ret</h3><p>call:将返回地址压入栈顶，将程序跳转到当前调用的方法的起始地址。</p>
<p>leave：栈指针指向桢指针，弹出备份的原桢指针到%ebp</p>
<p>ret：栈顶的返回值弹出到PC，按照PC指示的指令地址继续执行程序。</p>
<h3 id="寄存器的使用规则"><a href="#寄存器的使用规则" class="headerlink" title="寄存器的使用规则"></a>寄存器的使用规则</h3><p>%eax、%edx、%ecx：调用者保存寄存器。这三个寄存器由调用者P来保存，而对于Q来说，Q可以随便使用，用完了就不用再管了。</p>
<p>%ebx、%esi、%edi：被调用者保存寄存器。这三个寄存器由被调用者Q来保存，Q可以使用这三个寄存器，但是如果里面有P的变量值，Q必须保证使用完以后将这三个寄存器恢复到原来的值，这里的备份，其实就是上面那8个步骤中第3个步骤做的事情。</p>
]]></content>
      <categories>
        <category>计算机系统基础</category>
      </categories>
  </entry>
  <entry>
    <title>CSAPP-8</title>
    <url>/2019/02/17/CSAPP-8/</url>
    <content><![CDATA[<p>接上一篇说最复杂的条件码寄存器组合</p>
<p>所有组合都是基于a-b的前提。</p>
<table>
<thead>
<tr>
<th>后缀</th>
<th>逻辑运算（值为1）</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>e</td>
<td>ZF</td>
<td>相等。此时ZF为1，a-b=0，相等</td>
</tr>
<tr>
<td>ne</td>
<td>~ZF</td>
<td>反之</td>
</tr>
<tr>
<td>s</td>
<td>SF</td>
<td>负数。SF为1，设b=0，即a&lt;0</td>
</tr>
<tr>
<td>ns</td>
<td>~SF</td>
<td>反之</td>
</tr>
<tr>
<td>l</td>
<td>SF^OF</td>
<td>有符号的小于。当OF为0时，则代表没有溢出，此时SF必须为1，SF为1则代表结果为负。即a-b&lt;0，也就是a&lt;b，也就是小于的意思。  当OF为1时，则代表产生了溢出，而此时SF必须为0，也就是说结果最后为正数，那么此时则是负溢出，也可以得到a-b&lt;0，即a&lt;b.</td>
</tr>
<tr>
<td>le</td>
<td>(SF^OF)\</td>
<td>ZF</td>
<td>有符号的小于等于。括号里代表小于，和等于作或运算</td>
</tr>
<tr>
<td>g</td>
<td>(SF^OF)&amp;~ZF</td>
<td>有符号的大于。小于且不等于</td>
</tr>
<tr>
<td>ge</td>
<td>~(SF^OF)</td>
<td>有符号的大于等于。不小于</td>
</tr>
<tr>
<td>b</td>
<td>CF</td>
<td>无符号的小于。无符号减法只有在减出负数的时候才可能溢出，也就是说只要结果溢出了，那么一定有a-b&lt;0</td>
</tr>
<tr>
<td>be</td>
<td>CF\</td>
<td>ZF</td>
<td>无符号的小于等于。</td>
</tr>
<tr>
<td>a</td>
<td>~CF&amp; ~ZF</td>
<td>无符号的大于。无符号大于等于且不等于</td>
</tr>
<tr>
<td>ae</td>
<td>~CF</td>
<td>s无符号大于等于</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>计算机系统基础</category>
      </categories>
  </entry>
  <entry>
    <title>Java 二丢丢</title>
    <url>/2019/08/20/Java-%E4%BA%8C%E4%B8%A2%E4%B8%A2/</url>
    <content><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>数组也可以用引用类型</p>
<p>数组类型[]数组名</p>
<p>数组遍历</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] num=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> num1:num)&#123;</span><br><span class="line">	System.out.println(num1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>数组必须初始化</p>
<ol>
<li><p>✪动态初始化 （指定数组长度）</p>
<ul>
<li><p>数组类型[]数组名=new 数组类型[数组长度];</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br></pre></td></tr></table></figure>
</li>
<li><p>数组类型[]数组名；</p>
<p>数组名=new数组类型[数组长度];</p>
</li>
</ul>
</li>
<li><p>静态初始化 （不指定数组长度，直接赋值）</p>
<ul>
<li>数组类型 []数组名=new 数组类型[] {数据值…}</li>
<li>数据类型[] 数组名 = {数据值…}、</li>
</ul>
</li>
</ol>
<p>局部变量在栈里，new出来的东西在堆里</p>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><ol>
<li><p><strong>定义</strong>：把一堆要重复执行的代码封装起来，如果别的程序要用到这段代码，直接调用这个方法名即可</p>
</li>
<li><p><strong>如何？</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">访问修饰符 返回值类型 方法名（参数类型 参数名）&#123;</span><br><span class="line"></span><br><span class="line">代码块;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> 返回值;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>访问修饰符：格式是固定的</p>
<p>返回值类型：方法最终返回数据类型</p>
<p>方法名：首字母小写</p>
<p>参数类型：进入方法的数据类型</p>
<p>return：返回值返回给调用值</p>
<p>返回值：方法最终产生的结果</p>
</li>
</ol>
<h1 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h1><p>重载和返回类型无关</p>
<p>方法名必须相同，参数列表必须不同</p>
<p>参数个数不同，参数类型不同，参数类型顺序不同</p>
<h1 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h1><p>一个类不能直接使用，类似一个汽车图纸不能直接跑</p>
<p>需要根据这个类创建一个真正的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">类名 对象名 = <span class="keyword">new</span> 类名();</span><br></pre></td></tr></table></figure>
<p>如果成员变量没有赋值，会有默认值</p>
<p><strong>成员变量，局部变量区别</strong></p>
<ol>
<li>成员变量在堆里，局部变量在栈里</li>
<li>成员变量声明在类内部，方法外部，局部变量在方法内部</li>
<li>成员变量有默认值，局部变量没有默认值</li>
<li>局部变量和成员变量重名时，方法会根据就近原则使用局部变量，为了区分，用this关键字（this关键字可以理解为当前使用或正在创建的对象）</li>
<li></li>
</ol>
<h1 id="面向对象的三大特性"><a href="#面向对象的三大特性" class="headerlink" title="面向对象的三大特性"></a>面向对象的三大特性</h1><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>当我创建好对象以后，如果直接用对象名.属性的方式给属性赋值的话，可能会出现一些不符合实际的情况，所以不考虑“对象名.属性”的方法进行赋值</p>
<ol>
<li>属性私有化</li>
<li>提供公用的get set 方法实现调用</li>
</ol>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>类内部</th>
<th>同一个包</th>
<th>子类</th>
<th>任何地方</th>
</tr>
</thead>
<tbody>
<tr>
<td>private</td>
<td>√</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>缺省</td>
<td>√</td>
<td>√</td>
<td></td>
<td></td>
</tr>
<tr>
<td>protected</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td></td>
</tr>
<tr>
<td>public</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
</tbody>
</table>
<p><strong>构造方法：</strong></p>
<ol>
<li><p>用来创建对象</p>
</li>
<li><p>有参构造方法可以直接给属性赋值</p>
<p>定义构造函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> 构造方法名（参数）&#123;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//注意（1.）没有返回值（2.）构造方法名必须和类名完全一致</span></span><br></pre></td></tr></table></figure>
<p> 构造方法是一个方法，可以重载；</p>
<p>注意：构造方法如果没有自己定义，系统会自动提供一个无参构造方法；如果自己定义了构造方法，系统不再提供构造方法</p>
</li>
</ol>
<p>super（）指向离自己最近的父类</p>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ol>
<li><p>定义父类</p>
</li>
<li><p>定义子类   extends</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 子类名 <span class="keyword">extends</span> 父类名</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>子类继承父类之后，可以继承父类所有的属性和方法；</p>
</li>
<li><p>子类除了通过继承获取父类属性和方法外，还可以定义自己独有的属性和方法</p>
</li>
<li><p>一个子类只能有一个父类，一个父类可以有多个子类</p>
</li>
<li><p>重写：子类继承父类之后，如果父类方法满足不了子类要求，子类可以对父类进行重写。</p>
<ul>
<li>子类的方法名，返回值类型，参数列表必须和父类一样</li>
<li>子类的访问修饰符权限不能小于父类的访问修饰符权限</li>
<li>子类和父类必须同时为“static”或者非“static”</li>
</ul>
</li>
</ol>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>多态就是一个对象的多种形态</p>
<p>使用多态的前提是有继承或接口的实现</p>
<ol>
<li><p>方法的重载和重写是多态</p>
</li>
<li><p>子类对象的多态性：父类引用指向子类对象（子类必须重写父类方法，而且子类继承了父类）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person p2 = <span class="keyword">new</span> Man();</span><br><span class="line">p2.eat(); <span class="comment">//√</span></span><br><span class="line">p2.sleep();<span class="comment">//✕</span></span><br><span class="line"><span class="comment">//通过p2调用man的eat,但不能调用子类独有的方法（编译期间，程序会把p2看成是person类型，而person类种没有子类独有方法，编译不通过，也不能运行）</span></span><br><span class="line"><span class="comment">//对多态来说，第一行编译看左边，运行看右边</span></span><br><span class="line"><span class="comment">//如果要调用。需要类型转换</span></span><br><span class="line">Man m1=(Man)p2;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h3><p>成员变量：**如果成员变量加了static，那么这个变量不属于对象，属于类本身，实现多个对象之间的数据共享</p>
<p><strong>方法：</strong>普通方法需要创建对象才能用，静态方法不用创建对象就可使用；静态方法不能访问非静态成员变量和非静态成员方法，成员方法可以访问静态成员变量</p>
<h1 id="抽象类和接口"><a href="#抽象类和接口" class="headerlink" title="抽象类和接口"></a>抽象类和接口</h1><p>如果父类的方法必须被子类重写的话，可以把父类方法定义成抽象方法</p>
<h2 id="抽象方法，抽象类"><a href="#抽象方法，抽象类" class="headerlink" title="抽象方法，抽象类"></a>抽象方法，抽象类</h2><p>动物吃饭</p>
<p><strong>特点：</strong></p>
<ol>
<li>只有方法定义，没有方法体、</li>
<li>抽象方法必须在抽象类里</li>
<li>抽象类不能实例化</li>
<li>如果想实现抽象类，必须创建一个子类去继承他</li>
<li>子类继承一个抽象类，必须重写抽象类里所有的抽象方法</li>
<li>抽象类里可以定义普通方法，</li>
<li>抽象类里可以定义构造方法</li>
</ol>
<h2 id="接口（一个特殊的抽象类）"><a href="#接口（一个特殊的抽象类）" class="headerlink" title="接口（一个特殊的抽象类）"></a>接口（一个特殊的抽象类）</h2><p>接口就是多个类的共用规范</p>
<ol>
<li><p>接口里面的方法<strong>都是</strong>抽象方法</p>
</li>
<li><p>接口中没有变量，<strong>都是</strong>常量，默认被public static 修饰</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//以上都是一样的，接口中抽象方法默认被public abstract修饰</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>接口不能实例化，如果用接口，实现接口</p>
</li>
<li><p>要实现一个接口，必须重写接口里的所有抽象方法</p>
</li>
<li><p><strong>父类和接口区别</strong>：一个类可以实现多个接口，但是只能继承一个类</p>
</li>
<li><p>接口里不能定义普通方法，也不能定义构造方法</p>
</li>
<li><p>接口可以继承接口，并且可以继承多个接口</p>
</li>
<li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Traffic tr = <span class="keyword">new</span> ElectricVehicle();<span class="comment">//推荐这种多态，更安全</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="Java常用类"><a href="#Java常用类" class="headerlink" title="Java常用类"></a>Java常用类</h1><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><p>所有类的父类</p>
<h4 id="equals和"><a href="#equals和" class="headerlink" title="equals和=="></a>equals和==</h4><p><strong>==：</strong>判断<strong>基本数据类型</strong>值是否相等那个，相等返回true，不相等返回false，在Object类中比较的是地址值</p>
<p><strong>equals：</strong>只用在<strong>引用数据类型</strong>，在Object类中比较的也是地址值，String类重写了Object的equal方法，比较的是值</p>
<h4 id="tostring"><a href="#tostring" class="headerlink" title="tostring()"></a>tostring()</h4><p>String类也重写了tostring（）方法</p>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p><strong><code>length()</code></strong>:返回字符串长度</p>
<p><strong><code>substring（int startpoint）</code></strong>：根据startpoint的值截取字符串，截取后面的所有从0开始</p>
<p><strong><code>substring(int start,int end)</code></strong>:根据start位置开始，直到end结束 ，截取的字符串包含start不包含end</p>
<p><strong><code>replace（char oldchar，char newchar）</code></strong>：把oldchar替换成newchar</p>
<p><strong><code>split(String regex)</code>:</strong>把一个字符串根据regex拆分成多个字符串，返回值为数组（可以用for-each读出）</p>
<h2 id="封装类"><a href="#封装类" class="headerlink" title="封装类"></a>封装类</h2><p>八种基本数据类型对应的类</p>
<p>主要进行数据类型转成包装类</p>
<p><img src="http://ww1.sinaimg.cn/large/0069QpNUly1g68hll7bwcj30ap082wfy.jpg" alt=""></p>
<h4 id="基本数据类型和包装类互换"><a href="#基本数据类型和包装类互换" class="headerlink" title="基本数据类型和包装类互换"></a>基本数据类型和包装类互换</h4><p><strong>装箱：</strong>基本数据类型→ 包装类</p>
<p><strong>拆箱：</strong>包装类→ 基本数据类型</p>
<h4 id="基本数据类型、包装类→-String"><a href="#基本数据类型、包装类→-String" class="headerlink" title="基本数据类型、包装类→ String"></a>基本数据类型、包装类→ String</h4><ul>
<li>第一种（最简单）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">10</span>;</span><br><span class="line">String str = a + <span class="string">" "</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>第二种</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str1 = String.valueOf(a);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="String→基本数据类型、包装类"><a href="#String→基本数据类型、包装类" class="headerlink" title="String→基本数据类型、包装类"></a>String→基本数据类型、包装类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str2 = <span class="string">"1123"</span>;</span><br><span class="line"><span class="keyword">int</span> b=Integer.parseInt(str2);</span><br></pre></td></tr></table></figure>
<h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><p>获取当前系统时间，有数据库，用<code>java.sql</code></p>
<p><code>SimpleDateFormat（&quot;yyyy-MM-dd HH:mm:ss&quot;）</code>对日期进行格式化</p>
<p>format(date):把日期转成字符串</p>
<h1 id="集合框架（升级版数组）"><a href="#集合框架（升级版数组）" class="headerlink" title="集合框架（升级版数组）"></a>集合框架（升级版数组）</h1><ol>
<li>存多个对象：数组，集合框架</li>
<li>集合只能存对象</li>
<li>数组特点：<code>Student[] stu = new Student[10];</code>一旦创建，数组长度不可改变</li>
<li>集合有collection接口和map接口<img src="http://ww1.sinaimg.cn/large/0069QpNUly1g68jpsgezej30jo06ggnw.jpg" alt=""></li>
</ol>
<p><img src="http://ww1.sinaimg.cn/large/0069QpNUly1g68jrh5t2hj30ki06f0w0.jpg" alt=""></p>
<h2 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h2><p><code>void add(int index, Object ele)</code>：<strong>添</strong>加元素</p>
<p><code>Object get(int index)</code>:根据index<strong>查</strong>找元素</p>
<p><code>Object remove(int index)</code>：根据index<strong>删</strong>除指定元素，返回值为删除的内容</p>
<p><code>Object set(int index,Object ele)</code>:根据坐标修<strong>改</strong>内容值，返回值为被修改原内容</p>
<p><code>size()</code>:获取集合长度</p>
<h2 id="map接口"><a href="#map接口" class="headerlink" title="map接口"></a>map接口</h2><ol>
<li><p>key-value的形式存储，二者什么类型都可</p>
</li>
<li><p>key不可重复，value可以重复，如果key重复，会<strong>覆盖</strong>之前的数据</p>
</li>
<li><p>一个key-value称为一个Entry，Entry是<strong>不可重复的，无序的</strong>，如果键出现重复，会把上一个覆盖掉</p>
</li>
<li><p>key重写了equals方法，保存的内容，不是地址所以</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map.put(<span class="keyword">new</span> String(<span class="string">"aaa"</span>), <span class="string">"bbb"</span>);</span><br><span class="line">map.put(<span class="keyword">new</span> String(<span class="string">"aaa"</span>), <span class="string">"bbb"</span>);</span><br><span class="line"><span class="comment">//也会覆盖</span></span><br></pre></td></tr></table></figure>
</li>
<li></li>
</ol>
<p>主要实现类：</p>
<h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><p><code>Object put (key,value)</code>:键值对的方式向map集合中<strong>添</strong>加元素</p>
<p><code>Object remove(key)</code>：根据key<strong>删</strong>除map元素；</p>
<p><code>Set keyset()</code>:<strong>查</strong>询所有的key</p>
<p><code>Collection values()</code>:<strong>查</strong>询所有value</p>
<p><code>get(key)</code>:根据key<strong>查</strong>询value</p>
<p><code>entryset()</code>:获取所有entry返回到set里</p>
<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2>]]></content>
      <categories>
        <category>Java-Web&amp;Java</category>
      </categories>
  </entry>
  <entry>
    <title>JDBC</title>
    <url>/2019/08/26/JDBC/</url>
    <content><![CDATA[<p><strong>J</strong>ava <strong>D</strong>ata<strong>B</strong>ase <strong>C</strong>onnectivity    Java数据库连接，访问数据库的一种技术</p>
<p><strong>JDBC编程步骤</strong></p>
<ol>
<li>加载注册驱动类Driver</li>
<li>建立连接</li>
<li>操作数据</li>
<li>释放资源</li>
</ol>
<ol>
<li><code>Connection</code>:连接对象，负责应用程序和数据库建立连接，连接成功之后才能向数据库发送命令，但是在创建连接之前，需要知道指定数据的地址，用户名和密码</li>
<li><code>Statement</code>：执行对象，负责发送<code>sql</code>语句，用它执行需要拼接<code>sql</code>,比较繁琐，容易出错，容易引起<code>sql</code>注入</li>
<li><code>DriverManager</code>： 创建连接对象</li>
<li><code>PreparedStatement</code>预编译执行对象，是statement的一个子接口，把sql语句预编译并存储到PreparedStatement对象中，允许sql语句使用占位符，占位符坐标从一开始</li>
<li><code>ReultSet</code>结果集对象，执行查询后，数据库返回的结果就是结果集，通常会把结果集中的数据保存到list中</li>
<li></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hpe.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//创建连接对象</span></span><br><span class="line">		Connection conn=<span class="keyword">null</span>;</span><br><span class="line">		<span class="comment">//执行对象</span></span><br><span class="line">		Statement st =<span class="keyword">null</span>;</span><br><span class="line">		<span class="comment">//创建一个变量，接收数据库返回的结果、</span></span><br><span class="line">		<span class="keyword">int</span> result=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">		<span class="comment">//1.加载驱动</span></span><br><span class="line">		Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">		<span class="comment">//2.建立连接</span></span><br><span class="line">		<span class="comment">//数据库连接地址，用户名，密码</span></span><br><span class="line">		String url=<span class="string">"jdbc:mysql://localhost:3306/test"</span>;</span><br><span class="line">		String user=<span class="string">"root"</span>;</span><br><span class="line">		String pwd=<span class="string">"root"</span>;</span><br><span class="line">		conn=DriverManager.getConnection(url, user, pwd);</span><br><span class="line">		<span class="comment">//System.out.println(conn);</span></span><br><span class="line">		<span class="comment">//创建执行对象</span></span><br><span class="line">		<span class="comment">//根据id删除</span></span><br><span class="line">		String id = <span class="string">"121"</span>;</span><br><span class="line">		String sql=<span class="string">"delete from stu where stuid ="</span>+id;</span><br><span class="line">		st=conn.createStatement();</span><br><span class="line">		<span class="comment">//4.执行</span></span><br><span class="line">		result=st.executeUpdate(sql);</span><br><span class="line">		&#125;<span class="keyword">catch</span>(Exception e)&#123;<span class="comment">//增删改</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">			<span class="comment">//5.关闭资源</span></span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">				st.close();</span><br><span class="line">			&#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(result&gt;<span class="number">0</span>)&#123;</span><br><span class="line">				System.out.println(<span class="string">"删除成功"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>实体类</strong>：对应数据库中的表，表中有什么属性，实体类就定义什么属性，属性名和类型必须和表的字段和类型保持一致，一个无参构造方法，一个没有主键 的有参构造方法，主键没有自增，有一个有参构造方法，三个构造方法</p>
<p><strong>执行语句</strong></p>
<p>增删改：executeUpdate（）</p>
<p>查：executeQuery()</p>
<h1 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h1><p>表示层view：为用户提供交互操作页面</p>
<p>业务逻辑层services：关键业务处理和数据处理</p>
<p>（持久层）数据访问层 dao：从数据库获取数据</p>
<h2 id="分包"><a href="#分包" class="headerlink" title="分包"></a>分包</h2><p>entity：实体类</p>
<p>dao：</p>
<p>services：</p>
<p>impl：接口，implements</p>
<p>view：</p>
<p>util：公用类，很多要用</p>
<h1 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h1><p>连接对象都放在这里，要用就从这里拿，用完放回</p>
<p><img src="http://ww1.sinaimg.cn/large/0069QpNUly1g6e21mt5kyj30he06ngor.jpg" alt=""></p>
<p>c3p0-config.xml必须放在src下，而且名字不能变</p>
<p>一个事务要么全成功要么全失败</p>
]]></content>
      <categories>
        <category>Java-Web&amp;Java</category>
      </categories>
  </entry>
  <entry>
    <title>CSAPP-datalab</title>
    <url>/2019/02/11/CSAPP-datalab/</url>
    <content><![CDATA[<p>看CSAPP看的实在是绝望，觉得假期肯定啃不完，所以决定先做实验，遇见不会的再翻书，过年这一个多周的时间，做了下datalab</p>
<h3 id="bitAnd"><a href="#bitAnd" class="headerlink" title="bitAnd"></a>bitAnd</h3><p>题目：只能用～和|来实现位的与操作。</p>
<ul>
<li><p>bitAnd - x&amp;y using only ~ and |</p>
<ul>
<li>Example: bitAnd(6, 5) = 4</li>
<li>Legal ops: ~ |</li>
<li>Max ops: 8</li>
<li>Rating: 1</li>
</ul>
</li>
</ul>
<p>思路：~x：非x，~y：非y，那么~x|~y就是既不是x也不是y，那~（~x|~y）就是既是x也是y，也就是x与y</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> bit<span class="constructor">And(<span class="params">int</span> <span class="params">x</span>,<span class="params">int</span> <span class="params">y</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	return (~(~x<span class="pattern-match">|~y));</span></span><br><span class="line"><span class="pattern-match">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="getByte"><a href="#getByte" class="headerlink" title="getByte"></a>getByte</h3><p>题目：给定n （0&lt;=n&lt;=3），求出x第n个字节是哪数字。</p>
<ul>
<li>getByte - Extract byte n from word x</li>
<li>Bytes numbered from 0 (LSB) to 3 (MSB)</li>
<li>Examples: getByte(0x12345678,1) = 0x56</li>
<li>Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</li>
<li>Max ops: 6</li>
<li>Rating: 2</li>
</ul>
<p>思路：（不做题觉得自己了解的还可以，一做题，就觉得，自己啥也没学到……）</p>
<p>第一感觉和CSAPP书上的一道习题挺像，移位运算，用0xFF移动n个字节，然后&amp;一下</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> getByte(<span class="type">int</span> x,<span class="type">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> <span class="keyword">temp</span>=x&gt;&gt;((n)&lt;&lt;<span class="number">3</span>);</span><br><span class="line">	<span class="keyword">temp</span>=<span class="keyword">temp</span>&amp;<span class="number">0xFF</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">temp</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="logicalShift"><a href="#logicalShift" class="headerlink" title="logicalShift"></a>logicalShift</h3><p>题目：将x按逻辑位移移动n（0&lt;=n&lt;=31）位。</p>
<ul>
<li>logicalShift - shift x to the right by n, using a logical shift<ul>
<li>Can assume that 0 &lt;= n &lt;= 31</li>
<li>Examples: logicalShift(0x87654321,4) = 0x08765432</li>
<li>Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</li>
<li>Max ops: 20</li>
<li>Rating: 3</li>
</ul>
</li>
</ul>
<p>思路：</p>
<p>一开始想定义的时候直接unsigned不就好了吗？觉得那这道题就没有意义了。先进行算术右移，然后将右移产生的1mask掉,关键是mask怎么构造，范围是0~31，那1左移31位，然后取反，就是0111……1，然后右移n位，左移1位这样就出来了0…0011…1110，然后加个1，就出来了</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> logicalShift(<span class="built_in">int</span> x,<span class="built_in">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">int</span> x1=x&gt;&gt;n;</span><br><span class="line">	<span class="built_in">int</span> mask=(~（<span class="number">1</span>&lt;&lt;<span class="number">31</span>)&gt;&gt;n&lt;&lt;<span class="number">1</span>)+<span class="number">1</span></span><br><span class="line">	<span class="keyword">return</span> X1&amp;mask；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="bitCount"><a href="#bitCount" class="headerlink" title="bitCount"></a>bitCount</h3><p>题目：用位运算计算出x中有多少个1</p>
<ul>
<li><p>bitCount - returns count of number of 1’s in word</p>
<ul>
<li>Examples: bitCount(5) = 2, bitCount(7) = 3</li>
<li>Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</li>
<li>Max ops: 40</li>
<li>Rating: 4</li>
</ul>
</li>
</ul>
<p>思路：一位一位的右移，然后看奇偶数，然后进行统计，但是不能用==，/，所以没有了思路。整道题看writeup，还是不懂，看完书再说。分治</p>
<h3 id="bang"><a href="#bang" class="headerlink" title="bang"></a>bang</h3><p>题目：不用！运算符求出！x结果</p>
<ul>
<li>bang - Compute !x without using !</li>
<li>Examples: bang(3) = 0, bang(0) = 1</li>
<li>Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;</li>
<li>Max ops: 12</li>
<li>Rating: 4</li>
</ul>
<p>思路：一开始还是想用if，感觉自己还是没找到感觉。这个题就是找0和其他数之间的区别，0|0肯定还是0，但0|1=1，除了0以外，其他数都有1，所以想从这个方面入手。但是没有思路啊，看了别人的才知道，<strong>除了0，任何数自己|上自己的相反数最高位一定是1</strong>，那就好说了，直接|一下相反数，移位一下就OK</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">int bang(int <span class="keyword">x</span>)</span><br><span class="line">&#123;</span><br><span class="line">	int <span class="keyword">x</span><span class="number">1</span>=~<span class="keyword">x</span>+<span class="number">1</span><span class="comment">;</span></span><br><span class="line"><span class="comment">	x=x|x1;</span></span><br><span class="line"><span class="comment">	x=x&gt;&gt;31;</span></span><br><span class="line"><span class="comment">	x=x+1；</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="tmin"><a href="#tmin" class="headerlink" title="tmin"></a>tmin</h3><p>题目：返回补码整数的最小整数数值。</p>
<ul>
<li>tmin - return minimum two’s complement integer</li>
<li>Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</li>
<li>Max ops: 4</li>
<li>Rating: 1</li>
</ul>
<p>思路：这不就是返回一个确定的值吗？</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> tmin(<span class="built_in">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0x80</span> &lt;&lt; <span class="number">24</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="fitsBits"><a href="#fitsBits" class="headerlink" title="fitsBits"></a>fitsBits</h3><p>题目：只给出n个二进制位，能否表示x,能返回1.</p>
<ul>
<li>fitsBits - return 1 if x can be represented as an</li>
<li>n-bit, two’s complement integer.</li>
<li>1 &lt;= n &lt;= 32</li>
<li>Examples: fitsBits(5,3) = 0, fitsBits(-4,3) = 1</li>
<li>Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</li>
<li>Max ops: 15</li>
<li>Rating: 2</li>
</ul>
<p>思路：因为在前面的bitCount，我在歪路上想了怎么能知道移位移到了最后一位，也就是怎么知道x转为二进制需要多少位，所以这个题就很简单了。将x右移n-1位，判断是不是全1或全0.</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> fitsBits(<span class="built_in">int</span> x, <span class="built_in">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">int</span> x1 =~((~n)+<span class="number">1</span>);</span><br><span class="line">   x=x&gt;&gt;x1;</span><br><span class="line">   <span class="built_in">int</span> ans=(!tmpx|!(tmpx+<span class="number">1</span>));</span><br><span class="line">   <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="divpwr2"><a href="#divpwr2" class="headerlink" title="divpwr2"></a>divpwr2</h3><p>题目：给出整数x，整数n，求[x/(2^n)]，答案要接近趋向0方向。</p>
<ul>
<li>divpwr2 - Compute x/(2^n), for 0 &lt;= n &lt;= 30</li>
<li>Round toward zero</li>
<li>Examples: divpwr2(15,1) = 7, divpwr2(-33,4) = -2</li>
<li>Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</li>
<li>Max ops: 15</li>
<li>Rating: 2</li>
</ul>
<p>思路：二进制的除就是右移，那就是x&gt;&gt;n.试了一下，只要x是负数，向下取整。首先判断是不是负数，(~( (x &gt;&gt; 31) &amp; 0x1) )+1，是负数构造出0xFF……FF出来，然后构造q=2^n-1 既~((~0)&lt;&lt;n)，如果既然是负数的话就可以加上(tmp &amp; q) 既 0x0…FFF，再右移动n位。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> divpwr2(<span class="built_in">int</span> x, <span class="built_in">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> tmp = (~( (x &gt;&gt; <span class="number">31</span>) &amp; <span class="number">0x1</span>) )+<span class="number">1</span> ;</span><br><span class="line">    <span class="built_in">int</span> q= ~((~<span class="number">0</span>)&lt;&lt;n);</span><br><span class="line">    <span class="built_in">int</span> ans = (x + (tmp &amp; q) ) &gt;&gt; n ;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="negate"><a href="#negate" class="headerlink" title="negate"></a>negate</h3><p>题目：求相反数</p>
<ul>
<li>negate - return -x <ul>
<li>Example: negate(1) = -1.</li>
<li>Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</li>
<li>Max ops: 5</li>
<li>Rating: 2</li>
</ul>
</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> negate(<span class="built_in">int</span> x)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> ((~x)+<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="isPositive"><a href="#isPositive" class="headerlink" title="isPositive"></a>isPositive</h3><p>题目:判断x是不是正数</p>
<ul>
<li>isPositive - return 1 if x &gt; 0, return 0 otherwise <ul>
<li>Example: isPositive(-1) = 0.</li>
<li>Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</li>
<li>Max ops: 8</li>
<li>Rating: 3</li>
</ul>
</li>
</ul>
<p>思路：因为有0，所以不能看符号位，那就转换一下思路，取反，如果0，那么结果是1，如果为负数，那结果为正数，符号位为1，如果x为0或负数，那么!x | (x &gt;&gt; 31) != 0，再！一下就OK了</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> isPositive(<span class="built_in">int</span> x)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> !(!x|(x&gt;&gt;<span class="number">31</span>)); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="isLessOrEqual"><a href="#isLessOrEqual" class="headerlink" title="isLessOrEqual"></a>isLessOrEqual</h3><p>题目：用位运算判定x&lt;=y，如果是就返回1，如果不是就返回0。</p>
<ul>
<li>isLessOrEqual - if x &lt;= y  then return 1, else return 0</li>
<li>Example: isLessOrEqual(4,5) = 1.</li>
<li>Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</li>
<li>Max ops: 24</li>
<li>Rating: 3</li>
</ul>
<p>思路：分两种情况，同号和异号，异号比较一下符号位就好，同号x-y的符号位是不是0.</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> isLessOrEqual(<span class="built_in">int</span> x, <span class="built_in">int</span> y)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">int</span> signx = (x &gt;&gt; <span class="number">31</span>);</span><br><span class="line">   <span class="built_in">int</span> signy = (y &gt;&gt; <span class="number">31</span>);</span><br><span class="line">   <span class="built_in">int</span> isSameSign=!(signx^signy) ;</span><br><span class="line">   <span class="built_in">int</span> p=!(((~x)+<span class="number">1</span>+y)&gt;&gt;<span class="number">31</span>);</span><br><span class="line">   <span class="built_in">int</span> ans=(isSameSign&amp;p)|((!isSameSign)&amp;signx);</span><br><span class="line">   <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ilog2"><a href="#ilog2" class="headerlink" title="ilog2"></a>ilog2</h3><p>题目：求整数的log(x)。</p>
<ul>
<li>ilog2 - return floor(log base 2 of x), where x &gt; 0</li>
<li>Example: ilog2(16) = 4</li>
<li>Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</li>
<li>Max ops: 90</li>
<li>Rating: 4</li>
</ul>
<p>思路：感觉和之前C程里解方程的实验应该差不多。二分法找最高位为1的位置。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> ilog2(<span class="built_in">int</span> x)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">int</span> <span class="built_in">num</span>=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">num</span>=(!!(x&gt;&gt;<span class="number">16</span>))&lt;&lt;<span class="number">4</span>;</span><br><span class="line">	<span class="built_in">num</span>=<span class="built_in">num</span>+((!!(x&gt;&gt;(<span class="number">8</span>+<span class="built_in">num</span>)))&lt;&lt;<span class="number">3</span>);</span><br><span class="line">	<span class="built_in">num</span>=<span class="built_in">num</span>+((!!(x&gt;&gt;(<span class="number">4</span>+<span class="built_in">num</span>)))&lt;&lt;<span class="number">2</span>);</span><br><span class="line">	<span class="built_in">num</span>=<span class="built_in">num</span>+((!!(x&gt;&gt;(<span class="number">2</span>+<span class="built_in">num</span>)))&lt;&lt;<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">num</span>=<span class="built_in">num</span>+((!!(x&gt;&gt;(<span class="number">1</span>+<span class="built_in">num</span>)))&lt;&lt;<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">num</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="float-neg"><a href="#float-neg" class="headerlink" title="float_neg"></a>float_neg</h3><p>题目：返回输入uf的负数形式-uf。如果uf是NAN形式就直接返回参数。</p>
<ul>
<li>float_neg - Return bit-level equivalent of expression -f for</li>
<li>floating point argument f.</li>
<li>Both the argument and result are passed as unsigned int’s, but</li>
<li>they are to be interpreted as the bit-level representations of</li>
<li>single-precision floating point values.</li>
<li>When argument is NaN, return argument.</li>
<li>Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</li>
<li>Max ops: 10</li>
<li>Rating: 2</li>
</ul>
<p>思路：题目读不懂，翻书+google，uf：unsigned float   ；  NaN（非数）:未定义或不可表示的值，先判断是不是NaN(&gt;0x2f800000)，是就直接返回，不是则取反</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">float_neg</span><span class="params">(<span class="keyword">unsigned</span> uf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> result;</span><br><span class="line">    <span class="keyword">unsigned</span> tmp;</span><br><span class="line">    result=uf^<span class="number">0x80000000</span>;</span><br><span class="line">    tmp=uf&amp;<span class="number">0x7fffffff</span>;</span><br><span class="line">    <span class="keyword">if</span>(tmp&gt;<span class="number">0x7f800000</span>) result=uf;</span><br><span class="line">    <span class="keyword">return</span>  result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="float-i2f"><a href="#float-i2f" class="headerlink" title="float_i2f"></a>float_i2f</h3><p>题目：将int型的x转为float型的x。</p>
<ul>
<li>float_i2f - Return bit-level equivalent of expression (float) x</li>
<li>Result is returned as unsigned int, but</li>
<li>it is to be interpreted as the bit-level representation of a</li>
<li>single-precision floating point values.</li>
<li>Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</li>
<li>Max ops: 30</li>
<li>Rating: 4</li>
</ul>
<p>思路：没思路，翻书，感觉一到浮点数就一脸懵逼，完全没有概念，又是一道把别人的答案从头到尾看了好几遍的题，等看完书再说叭（头秃……）。</p>
<p>如果是0，直接返回即可</p>
<p>如果是0x80000000,返回0xcf000000</p>
<p>如果负数：变为整正数之后按照正数计算</p>
<p>正数：计算尾数部分左移还是右移，然后计算阶码，加上偏置值127，尾数向偶数舍入。</p>
<h3 id="float-twice"><a href="#float-twice" class="headerlink" title="float_twice"></a>float_twice</h3><p>题目：就是将浮点数乘以2倍。</p>
<ul>
<li>float_twice - Return bit-level equivalent of expression 2*f for<ul>
<li>floating point argument f.</li>
<li>Both the argument and result are passed as unsigned int’s, but</li>
<li>they are to be interpreted as the bit-level representation of</li>
<li>single-precision floating point values.</li>
<li>When argument is NaN, return argument</li>
<li>Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</li>
<li>Max ops: 30</li>
<li>Rating: 4</li>
</ul>
</li>
</ul>
<p>嘤嘤嘤~浮点数真令人头大</p>
]]></content>
      <categories>
        <category>计算机系统基础</category>
      </categories>
  </entry>
  <entry>
    <title>Java一丢丢</title>
    <url>/2019/08/19/Java%E4%B8%80%E4%B8%A2%E4%B8%A2/</url>
    <content><![CDATA[<p>这就开始学习了？？</p>
<p>暑假看了一点点java，之后一个月就是java实习了，来一个分界线☟☟☟</p>
<hr>
<h1 id="零散知识点"><a href="#零散知识点" class="headerlink" title="零散知识点"></a>零散知识点</h1><ul>
<li><p>‘syso‘ ’alt‘+’/‘&#10233;<code>System.out.println();</code></p>
</li>
<li><p><code>Float.MAX_VALUE</code>获取float max</p>
</li>
<li><p>println：输出后自动换行，print：输出后不换行</p>
</li>
<li><p>数组定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a; </span><br><span class="line"> a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br></pre></td></tr></table></figure>
</li>
<li><p>public static final 则为常量</p>
</li>
<li><p>1970年1月1日 8点0分0秒开始</p>
</li>
<li><p><code>extends</code>继承</p>
</li>
<li><p><code>/**</code>+ENTER 多行注释</p>
</li>
<li><p>类名。接口名首字母大写</p>
</li>
<li><p>函数名，变量名首字母小写</p>
</li>
<li><p>常量首字母大写</p>
</li>
<li><p>单引号字符，双引号字符串</p>
</li>
<li><p>基本数据类型在栈，引用数据类型在堆里</p>
</li>
<li><p>main是程序入口，如果写的内容想在控制台输出，必须把内容放在main方法里</p>
</li>
<li><p>整数类型：byte（-128~127） short int  long (long num=12L  必须带L)</p>
</li>
<li><p>数据类型转换：隐式类型转换，short转int；强制转换</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">short</span> s2=(<span class="keyword">short</span>)i;</span><br></pre></td></tr></table></figure>
</li>
<li><p>String 转成int(前提：string内容是数字)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str=<span class="string">"123"</span>;</span><br><span class="line"><span class="keyword">int</span> i2= Integer.parseInt(str);</span><br></pre></td></tr></table></figure>
</li>
<li><p>int转String </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>  i3=<span class="number">12</span>;</span><br><span class="line">string str=i3+<span class="string">""</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>子类转父类：向上类型转换；父类转子类：向下类型转换（子类之间不能互相强转）</p>
</li>
<li><p>boolean类型默认false</p>
</li>
<li><p>自动生成set get 方法：source → gets and sets→  select all→ OK</p>
</li>
<li><p>在静态static方法内部只能调用static方法或static变量</p>
</li>
<li><p>new 后面的是构造方法</p>
</li>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try&#123;</span><br><span class="line">可能出错的代码</span><br><span class="line">&#125;catch(Exception e)&#123;</span><br><span class="line">	出错的操作</span><br><span class="line">&#125;</span><br><span class="line">finally&#123;</span><br><span class="line">必须要执行的语句&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><ul>
<li><p>短路与（&amp;&amp;）：第一个false ，不执行第二个（常用，效率高）</p>
</li>
<li><p>不短路与（&amp;）：第一个false，第二个也要执行</p>
</li>
</ul>
</li>
</ul>
<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person zhangsan; <span class="comment">//定义一个对象</span></span><br><span class="line">zhangsan=person();<span class="comment">//实例化对象</span></span><br><span class="line">zhangsan.name=<span class="string">"zhangsan"</span>;<span class="comment">//给对象的属性赋值</span></span><br><span class="line">zangsan.age=<span class="number">23</span>;</span><br></pre></td></tr></table></figure>
<h1 id="快捷方式"><a href="#快捷方式" class="headerlink" title="快捷方式"></a>快捷方式</h1><ul>
<li>‘syso‘ ’ALT‘+’/‘&#10233;<code>System.out.println();</code></li>
<li>选中 CTRL + SHIFYT + /   &#10233;多行注释</li>
<li>‘main’ ‘ALT’ + ‘/‘&#10233;<code>public static void main(String []args)</code></li>
<li>‘CTRL’ + ‘SHIFT’ +’o’&#10233;自动导包</li>
<li>‘’CTRL’  + ‘1’ &#10233;接口实现</li>
</ul>
<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h3 id="继承线程类"><a href="#继承线程类" class="headerlink" title="继承线程类"></a>继承线程类</h3><p>首先准备一个独立的线程类，（继承thread）</p>
<p>重写run方法，启动线程用start；机制视频9：00</p>
<h3 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h3><p>一个类，实现runnable接口，因为没继承thread，所以没有start方法</p>
<p>所以要创建一个thread对象，把battle1作为thread对象的参数扔进去</p>
<h3 id="匿名类"><a href="#匿名类" class="headerlink" title="匿名类"></a>匿名类</h3>]]></content>
      <categories>
        <category>Java-Web&amp;Java</category>
      </categories>
  </entry>
  <entry>
    <title>“LaTex数学符号表示”</title>
    <url>/2020/07/22/LaTex%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7%E8%A1%A8%E7%A4%BA/</url>
    <content><![CDATA[<p>转自：<a href="https://www.mohu.org/info/symbols/symbols.htm" target="_blank" rel="noopener">https://www.mohu.org/info/symbols/symbols.htm</a></p>
<p>１、指数和下标可以用^和_后加相应字符来实现。比如：</p>
<p><img src="https://www.mohu.org/info/symbols/foot.gif" alt="img"></p>
<p>2、平方根（square root）的输入命令为：\sqrt，n 次方根相应地为: \sqrt[n]。方根符号的大小由LATEX自动加以调整。也可用\surd 仅给出<br>符号。比如：</p>
<p><img src="https://www.mohu.org/info/symbols/sqrt.GIF" alt="img"></p>
<p>3、命令\overline 和\underline 在表达式的上、下方画出水平线。比如：</p>
<p><img src="https://www.mohu.org/info/symbols/overline.GIF" alt="img"></p>
<p>4、命令\overbrace 和\underbrace 在表达式的上、下方给出一水平的大括号。</p>
<p><img src="https://www.mohu.org/info/symbols/brace.GIF" alt="img"></p>
<p>5、向量（Vectors）通常用上方有小箭头（arrow symbols）的变量表示。这可由\vec 得到。另两个命令\overrightarrow 和\overleftarrow在定义从A 到B 的向量时非常有用。</p>
<p><img src="https://www.mohu.org/info/symbols/vec.GIF" alt="img"></p>
<p>6、分数（fraction）使用\frac{…}{…} 排版。一般来说，1/2 这种形式更受欢迎，因为对于少量的分式，它看起来更好些。</p>
<p><img src="https://www.mohu.org/info/symbols/frac.GIF" alt="img"></p>
<p>7、积分运算符（integral operator）用\int 来生成。求和运算符（sum operator）由\sum 生成。乘积运算符（product operator）由\prod 生成。上限和下限用^ 和_来生成，类似于上标和下标。</p>
<p><img src="https://www.mohu.org/info/symbols/int.GIF" alt="img"></p>
<h2 id="以下提供一些常用符号的表示方法"><a href="#以下提供一些常用符号的表示方法" class="headerlink" title="以下提供一些常用符号的表示方法"></a>以下提供一些常用符号的表示方法</h2><p><img src="https://www.mohu.org/info/symbols/1.GIF" alt="img"></p>
<p><img src="https://www.mohu.org/info/symbols/2.GIF" alt="img"></p>
<p><img src="https://www.mohu.org/info/symbols/3.GIF" alt="img"></p>
<p><img src="https://www.mohu.org/info/symbols/4.GIF" alt="img"></p>
<p><img src="https://www.mohu.org/info/symbols/5.GIF" alt="img"></p>
<p><img src="https://www.mohu.org/info/symbols/6.GIF" alt="img"></p>
<p><img src="https://www.mohu.org/info/symbols/7.GIF" alt="img"></p>
]]></content>
      <categories>
        <category>LaTex</category>
      </categories>
  </entry>
  <entry>
    <title>fatal-unable-to-auto-detect-email-address</title>
    <url>/2019/08/19/fatal-unable-to-auto-detect-email-address/</url>
    <content><![CDATA[<p>五个月没开博客，我的git他有了自己的想法。。。</p>
<p><code>git: fatal unable to auto-detect email address (got &quot;some wrong email&quot;)</code></p>
<p>解决方法：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ git<span class="built_in"> config </span>--global user.email <span class="string">"you@example.com"</span></span><br></pre></td></tr></table></figure>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ git<span class="built_in"> config </span>--local -l</span><br></pre></td></tr></table></figure>
<hr>
<p>我的git……他还是有自己的想法</p>
]]></content>
  </entry>
  <entry>
    <title>JSP</title>
    <url>/2019/08/30/JSP/</url>
    <content><![CDATA[<p>html不能写java代码</p>
<p>JSP看起来是HTML，本质是servlet</p>
<p>java代码写在&lt;%%&gt;中称为脚本片段，最终在service方法里运行，❗但不要在JSP里写java代码</p>
<p>jsp声明：&lt;%!  %&gt;里面可以写方法</p>
<p>jsp注释：&lt;%– –%&gt;</p>
<p>输出到浏览器&lt;%=  &gt;</p>
<h1 id="JSP九大内置对象"><a href="#JSP九大内置对象" class="headerlink" title="JSP九大内置对象"></a>JSP九大内置对象</h1><p>不需要声明可以直接用的对象</p>
<h2 id="request"><a href="#request" class="headerlink" title="request"></a>request</h2><p>httpservletRequest对象，代表客户端请求</p>
<p>域范围：同一个请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String name = request.getParameter(<span class="string">"name"</span>);</span><br><span class="line">System.out.println(<span class="string">"name:"</span>+name);</span><br></pre></td></tr></table></figure>
<h2 id="response（不常用）"><a href="#response（不常用）" class="headerlink" title="response（不常用）"></a>response（不常用）</h2><p>httpservletResponse对象，代表服务器响应</p>
<h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><p>域范围：同一会话</p>
<p>代表一次会话</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"sessionid="</span>+session.getId());</span><br></pre></td></tr></table></figure>
<h2 id="application"><a href="#application" class="headerlink" title="application"></a>application</h2><p>ServletContext对象，代表当前web应用</p>
<p>域范围：同一web应用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.print(application.getInitParameter(<span class="string">"name"</span>));</span><br></pre></td></tr></table></figure>
<h2 id="out（不常用）"><a href="#out（不常用）" class="headerlink" title="out（不常用）"></a>out（不常用）</h2><p>JSPWrite对象，把结果输出到浏览器</p>
<h2 id="config（不常用）"><a href="#config（不常用）" class="headerlink" title="config（不常用）"></a>config（不常用）</h2><p>ServletConfig对象，代表当前servlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.print(<span class="string">"servlet注册名："</span>+config.getServletName());</span><br></pre></td></tr></table></figure>
<h2 id="page（不常用）"><a href="#page（不常用）" class="headerlink" title="page（不常用）"></a>page（不常用）</h2><p>指的是jsp对应的servlet对象，也就是代表页面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"page:"</span>+page);</span><br></pre></td></tr></table></figure>
<h2 id="pageContext"><a href="#pageContext" class="headerlink" title="pageContext"></a>pageContext</h2><p>页面上下文，可以获取其他八个内置对象，域范围：当前页面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(pageContext.getRequest()==request);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<h2 id="exception（不常用）"><a href="#exception（不常用）" class="headerlink" title="exception（不常用）"></a>exception（不常用）</h2><p>异常对象</p>
<p>剩下四个常用的是jsp的四大域对象</p>
<p>路径写绝对路径</p>
<h1 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h1><p>从域对象里取值</p>
<p>el表达式没有遍历功能</p>
<p>表单回显：点击提交后用户名输入框依旧显示输入内容</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;!-- 麻烦--&gt;</span><br><span class="line">username:&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> value=&lt;%=request.getParameter(<span class="string">"username"</span>)==<span class="keyword">null</span>?<span class="string">""</span>:request.getParameter(<span class="string">"username"</span>) %&gt; &gt;</span><br><span class="line">&lt;!--  打印输入用户名 --&gt;</span><br><span class="line">&lt;%=request.getParameter(<span class="string">"username"</span>) %&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 简单el--&gt;</span><br><span class="line">username:&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> value=<span class="string">"$&#123;param.username &#125;"</span> &gt;</span><br><span class="line">&lt;!--  打印输入用户名 --&gt;</span><br><span class="line">$&#123;param.username &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;% out.print(request.getAttribute(<span class="string">"name"</span>)); %&gt;</span><br><span class="line">&lt;!-- 被以下方式替换了 --&gt;</span><br><span class="line">&lt;%=request.getAttribute(<span class="string">"name"</span>)%&gt;</span><br><span class="line">&lt;!--又被以下El表达式替换了 --&gt;</span><br><span class="line">$&#123;name&#125;</span><br></pre></td></tr></table></figure>
<p>从某一个范围中根据域对象名name去取值，如果没有指定从那个域对象里取，默认从小到大取，也就是先从pageContext里取，如果想从指定的域中取，name前面加上、pageScope、requestScope、sessionScope、applicationScope</p>
<p><code>${sessionScope.name  }</code></p>
<p>如果域名叫user.name ：</p>
<p>不加括号：会在request域中找user对象，在user对象中找name对象，在name对象中找name属性</p>
<p>使用括号：[“user.name”].name</p>
<p><code>${pageContext.request.contextPath }</code>获取当前web应用根目录</p>
<p>el表达式可以自动类型转换</p>
<h1 id="JSTL标签"><a href="#JSTL标签" class="headerlink" title="JSTL标签"></a>JSTL标签</h1><p>导入jstl标签库</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br></pre></td></tr></table></figure>
<p><strong><code>c:out</code></strong>value=${}：值 default=” “默认值     把结果输出到浏览器，可以解析特殊字符</p>
<p><code>c:set</code> scope=“ ”:指定域对象，var=“ ”：名字value=“ ”：值</p>
<p><code>c:remove</code>:  var=” “ value=” “</p>
<p><code>c:if</code> :不能实现else</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;param.age&lt;20 &#125;"</span>&gt;</span><br><span class="line">  太小了，未到达法定结婚年龄！</span><br><span class="line">&lt;/c:if&gt;</span><br></pre></td></tr></table></figure>
<p><code>c:choose</code>判断，相当于if elseif else</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;c:choose&gt;</span><br><span class="line">  &lt;c:when test=<span class="string">"$&#123;param.age&lt;20&#125;"</span>&gt; </span><br><span class="line">    小于<span class="number">20</span>...</span><br><span class="line">  &lt;/c:when&gt;</span><br><span class="line">  &lt;c:when test=<span class="string">"$&#123;param.age&gt;=20 &amp;&amp; param.age&lt;=100&#125;"</span>&gt;</span><br><span class="line">    <span class="number">20</span>~<span class="number">100</span>...</span><br><span class="line">  &lt;/c:when&gt;</span><br><span class="line">  &lt;c:otherwise&gt;</span><br><span class="line">    大于<span class="number">100</span>...</span><br><span class="line">  &lt;/c:otherwise&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br></pre></td></tr></table></figure>
<p><code>c:foreach</code>遍历</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>items</td>
<td>要被循环的信息</td>
</tr>
<tr>
<td>begin</td>
<td>开始的元素（0=第一个元素，1=第二个元素）</td>
</tr>
<tr>
<td>end</td>
<td>最后一个元素（0=第一个元素，1=第二个元素）</td>
</tr>
<tr>
<td>step</td>
<td>每一次迭代的步长</td>
</tr>
<tr>
<td>var</td>
<td>代表当前条目的变量名称</td>
</tr>
<tr>
<td>varStatus</td>
<td>代表循环状态的变量名称   .count   表示迭代计数</td>
</tr>
</tbody>
</table>
<h1 id="MVC设计模式"><a href="#MVC设计模式" class="headerlink" title="MVC设计模式"></a>MVC设计模式</h1><p>model：应用程序核心，数据库记录列表，bean，封装书库  service和dao</p>
<p>view：显示数据，jsp/html</p>
<p>controller：servlet</p>
<p>view和controller加起来是三层架构的view</p>
]]></content>
      <categories>
        <category>Java-Web&amp;Java</category>
      </categories>
  </entry>
  <entry>
    <title>matlab基本语法</title>
    <url>/2020/02/07/matlab%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<ol>
<li><p>加；表示不输出，不加表示输出</p>
</li>
<li><p>ctrl+R 注释  ctrl+T 取消注释</p>
</li>
<li><p><code>disp（）</code>输出函数，不受；影响</p>
</li>
<li><p>向量 <code>a=[1 2 3]</code>   ；隔开表示列向量</p>
</li>
<li><p><code>strcat(字符串1,字符串2)</code> 合并字符串</p>
<p><code>[字符串1 字符串2</code></p>
</li>
<li><p><code>num2str()</code> 数字转换成字符串</p>
</li>
<li><p><code>input(提示符)</code>  </p>
</li>
<li><p><code>sum()</code>   <code>sum(E,1)</code>按列求和   <code>sum(E,2)</code>按行求和  <code>sum(E(:))</code>  求全部和</p>
</li>
<li><p><code>E(2,:)</code>   提取第二行的所有元素</p>
<p><code>E([2,5],:)</code> 提取第二行和第五行的元素</p>
<p><code>E(2:5,:)</code>    提取第2-5行</p>
<p><code>E(2:end,:)</code>  提取第二行到最后一行的所有元素</p>
<p><code>E(:)</code>  所有元素按列排</p>
</li>
<li><p>2:3:8   从2开始以3为差的等差数列</p>
</li>
<li><p><code>size(E)</code>    输出a  b有几行几列</p>
</li>
<li><p><code>repeat(A,m,n)</code>  把A 复制成m*n块</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">E =</span><br><span class="line">     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span></span><br><span class="line">     <span class="number">4</span>     <span class="number">5</span>     <span class="number">6</span></span><br><span class="line">repmat(E,<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">ans =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span>     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span></span><br><span class="line">     <span class="number">4</span>     <span class="number">5</span>     <span class="number">6</span>     <span class="number">4</span>     <span class="number">5</span>     <span class="number">6</span></span><br><span class="line">     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span>     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span></span><br><span class="line">     <span class="number">4</span>     <span class="number">5</span>     <span class="number">6</span>     <span class="number">4</span>     <span class="number">5</span>     <span class="number">6</span></span><br><span class="line">     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span>     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span></span><br><span class="line">     <span class="number">4</span>     <span class="number">5</span>     <span class="number">6</span>     <span class="number">4</span>     <span class="number">5</span>     <span class="number">6</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>矩阵乘法<em> 除法/，`A/B=A</em>inv（B）<code></code>inv(B)` 逆矩阵</p>
</li>
<li><p>元素乘除乘方：  .*   ./   .^</p>
</li>
<li><p>Inf 表示无穷</p>
</li>
<li><p><code>eig(A)</code> 特征值构成的列向量</p>
<p><code>[V,D]=eig(A)</code>   V是特征向量，D是特征值</p>
</li>
<li><p><code>find()</code> f返回矩阵中不为0 的位置的索引（竖着数）</p>
<p><code>[r,c]=find(A)</code>  按照行列表示索引</p>
</li>
<li><p>if 要有end 而且 注意缩进</p>
</li>
</ol>
]]></content>
      <categories>
        <category>MATLAB</category>
      </categories>
  </entry>
  <entry>
    <title>JavaWeb</title>
    <url>/2019/08/27/JavaWeb/</url>
    <content><![CDATA[<h1 id="软件两大架构-B-S-C-S"><a href="#软件两大架构-B-S-C-S" class="headerlink" title="软件两大架构 B/S    C/S"></a>软件两大架构 B/S    C/S</h1><h2 id="C-S"><a href="#C-S" class="headerlink" title="C/S"></a>C/S</h2><p>C:客户端   S:服务器   eg：QQ，LOL，WPS，就是桌面应用程序</p>
<p><strong>特点</strong></p>
<ol>
<li>软件使用前必须安装</li>
<li>软件更新时，客户端和服务端也要更新</li>
<li>不能跨平台，就类似于手机版qq不能在电脑上安装</li>
<li>cs软件通信采用自有协议，比较安全</li>
</ol>
<h2 id="B-S"><a href="#B-S" class="headerlink" title="B/S"></a>B/S</h2><p>B：浏览器， s 服务器  eg：淘宝网,京东网等网站</p>
<p>特点：</p>
<ol>
<li>软件使用前不需要安装</li>
<li>软件更新时，只是服务端进行更新</li>
<li>能跨平台，必须有浏览器</li>
<li>bs软件通信采用的是通用的HTTP协议，相对不安全</li>
</ol>
<h1 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h1><p>D:\apache-tomcat-8.0.21\conf\server.xml 可以修改端口号（默认8080），还要改eclipse→servers文件夹→server.xml </p>
<p>startup.bat 运行（前提是环境变量里有jAVA_HOME）</p>
<h1 id="javaWeb"><a href="#javaWeb" class="headerlink" title="javaWeb"></a>javaWeb</h1><p>tomcat 放到javaweb中</p>
<p>首先javaEE→server →new→server→tomcat 8.0→tomcat根目录→finish</p>
<p>打开:start</p>
<p>错误404：找不到资源</p>
<p>错误500：服务器程序出错（空指针）</p>
<h1 id="servelet"><a href="#servelet" class="headerlink" title="servelet"></a>servelet</h1><p><strong>功能</strong></p>
<ol>
<li>接收用户请求的http协议，解析</li>
<li>返回一个http的响应协议，让浏览器去解析</li>
<li><img src="http://ww1.sinaimg.cn/large/0069QpNUly1g6fn0u77csj30ea0473z6.jpg" alt=""></li>
</ol>
<h3 id="workset结构"><a href="#workset结构" class="headerlink" title="workset结构"></a>workset结构</h3><p>src放类</p>
<p>WebContent放页面，html，图片，js</p>
<p>WEB_INF受保护文件，配置文件，不能放页面文件</p>
<h3 id="实现一个servlet"><a href="#实现一个servlet" class="headerlink" title="实现一个servlet"></a>实现一个servlet</h3><h4 id="实现servlet接口"><a href="#实现servlet接口" class="headerlink" title="实现servlet接口"></a>实现servlet接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hpe.servelet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Servlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span></span>&#123;</span><br><span class="line">	<span class="comment">//构造；第一次请求执行，只执行一次</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">HelloServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"HelloServlet..."</span>);		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//注销：执行一次，当servlet所在项目被卸载或者服务器被关闭时执行，用于释放资源</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"destory..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//初始化；第一次请求执行，只执行一次</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig arg0)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"init.........."</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//多次被调用。每次请求都会执行service方法，实际用于获取请求响应结果</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest arg0, ServletResponse arg1)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"service..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>映射</strong>：让一个类在浏览器中运行，配置和映射servlet，给servlet一个浏览器的地址，方法如下（以后🙅‍自己配）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  配置和映射servelet --&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--  注册一个servelet --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 注册名 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 全类名，不要手敲，ctrl+c,v --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.hpe.servelet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 指定servlet的一个创建时机 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 映射servelet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 下方name必须和注册名相同 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 浏览器访问地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>运行过程：</strong>访问路径→映射的访问地址→映射的name→注册名→全类名</p>
<h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><ol>
<li>加载阶段：若是第一次请求加载并实例化（创建servlet实例）</li>
<li>初始化阶段：若是第一次请求，调用init（）方法</li>
<li>响应客户请求阶段：无论第几次请求都调用service（），实际用于获取请求响应结果</li>
<li>终止阶段：destory（），当servlet所在项目被卸载或者服务器被关闭时执行，用于释放资源</li>
</ol>
<p><code>&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</code>0和正数，加载的时候就创建实例，执行初始化，多个servlet时，数字越小，越先创建；负数，第一次访问时再创建实例初始化</p>
<h3 id="config接口"><a href="#config接口" class="headerlink" title="config接口"></a>config接口</h3><p>servletConfig接口，代表当前servlet，可以获取当前servlet所有配置信息</p>
<ul>
<li>getServletName():获取注册名</li>
<li>getServletContext()：一般做全局数据共享，必须由servletConfig来获取，一个项目就一个context实例，每个servlet都可以访问到它</li>
</ul>
<p><img src="http://ww1.sinaimg.cn/large/0069QpNUly1g6fntwf9zdj30i805qjuh.jpg" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"init.........."</span>);</span><br><span class="line">		<span class="comment">//ServletConfig:代表当前servlet，可以获取当前servlet所有配置信息</span></span><br><span class="line">		<span class="comment">//1.getServletName()    获取当前Servlet在web.xml中配置的名字</span></span><br><span class="line">		System.out.println(config.getServletName());</span><br><span class="line">		<span class="comment">//✪2.getServletContext()   获取代表当前web应用的ServletContext对象</span></span><br><span class="line">		ServletContext cxt=config.getServletContext();</span><br><span class="line">		System.out.println(cxt.getContextPath());<span class="comment">//获取当前web应用的根目录</span></span><br><span class="line">		<span class="comment">//3.getInitParameter(String)   获取当前Servlet指定名称的初始化参数的值</span></span><br><span class="line">		System.out.println(config.getInitParameter(<span class="string">"username"</span>));</span><br><span class="line">		<span class="comment">//4.getInitParameterNames()  获取当前Servlet所有初始化参数的名字组成的枚举</span></span><br><span class="line">		Enumeration&lt;String&gt; names=config.getInitParameterNames();</span><br><span class="line">		<span class="keyword">while</span>(names.hasMoreElements())&#123;</span><br><span class="line">			<span class="comment">//获取初始化参数名</span></span><br><span class="line">			String name=names.nextElement();</span><br><span class="line">			String value=config.getInitParameter(name);</span><br><span class="line">			System.out.println(name+<span class="string">":"</span>+value);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h3 id="零散知识点"><a href="#零散知识点" class="headerlink" title="零散知识点"></a>零散知识点</h3><ol>
<li><p>url格式：/aaa和*.aaa或者 /aaa/星，其中星代表所有字符</p>
</li>
<li><p><strong>./</strong> <strong>：代表文件所在的目录（可以省略不写）</strong></p>
<p><strong>../</strong> <strong>：代表文件所在的父级目录</strong></p>
<p><strong>../../</strong> <strong>：代表文件所在的父级目录的父级目录</strong></p>
<p><strong>/</strong> <strong>：代表文件所在的根目录</strong></p>
</li>
<li><p>相对路径变绝对路径：<code>request.getContextPath()+&quot;admin/main.jsp&#39;;&quot;</code></p>
</li>
<li><p>项目中路径写绝对路径</p>
</li>
<li><p>初始化参数在loadup标签前面</p>
</li>
<li><p>创建的项目是项目，没有添加到workset里</p>
<p><strong>workset中添加项目</strong>：右键workset→proper…→选择→add→OK</p>
</li>
<li><p>浏览器访问地址以/开头</p>
</li>
<li><p>servlet是单例的，只创建一次实例</p>
</li>
<li><p>配置文件改了，就必须重启服务器</p>
</li>
<li><p>加入jar包：项目右键→build path→library→add library→sever runtime→tomcat…→finish</p>
</li>
<li><p><strong>html</strong>是根标签，所有的都在html中</p>
<p><strong>title</strong>：浏览器上面的小框框的内容</p>
<p><strong>head</strong>：帮浏览器解析整个页面</p>
<p><strong>body</strong>：页面显示内容</p>
<p><strong>h2</strong>:标题</p>
</li>
<li><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">"&lt;%=request.getContextPath()%&gt;/"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>用来表明当前页面的相对路径所使用的根路径的。</p>
</li>
</ol>
<h3 id="httpservlet-不需要配置文件实现servlet"><a href="#httpservlet-不需要配置文件实现servlet" class="headerlink" title="httpservlet-不需要配置文件实现servlet"></a>httpservlet-不需要配置文件实现servlet</h3><p>action：发送数据的服务器地址,method 默认get</p>
<p>id作用：正则表达式，判断用户输入的用户名是否符合规则，通过属性写正则表达式</p>
<h4 id="三大域对象"><a href="#三大域对象" class="headerlink" title="三大域对象"></a>三大域对象</h4><p>✪把值存在域对象里，在别的页面通过域对象的方法获取域对象的值</p>
<p>获取web应用的初始化参数</p>
<p>获取项目的真实路径</p>
<p>✪作为域对象，保护多个用户共享的数据</p>
<h5 id="1-少）servletcontext：同一项目"><a href="#1-少）servletcontext：同一项目" class="headerlink" title="1.(少）servletcontext：同一项目"></a>1.(少）servletcontext：同一项目</h5><p>类似一个全局变量，服务器开始就存在，服务器关闭才释放，一个项目就一个servletContext实例</p>
<p><code>ServletContext cxt = getServletContext();</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//ServletCOntext:代表当前web应用，相当于这个项目的全局变量</span></span><br><span class="line">	ServletContext con=getServletContext();</span><br><span class="line">	<span class="comment">//获取真实路径</span></span><br><span class="line">	System.out.println(con.getRealPath(<span class="string">"/"</span>));</span><br><span class="line">	<span class="comment">//获取项目的上下文，一般用来获取项目名</span></span><br><span class="line">	System.out.println(con.getContextPath());</span><br></pre></td></tr></table></figure>
<p>​    getContextPath()一般用于获取当前项目名</p>
<h5 id="2-httpsession：在同一次会话中"><a href="#2-httpsession：在同一次会话中" class="headerlink" title="2.httpsession：在同一次会话中"></a>2.httpsession：在同一次会话中</h5><h5 id="3-httpservletrequest：在同一次请求中"><a href="#3-httpservletrequest：在同一次请求中" class="headerlink" title="3.httpservletrequest：在同一次请求中"></a>3.httpservletrequest：在同一次请求中</h5><p>httpservletrequest是servletrequest（🙅‍获取http）的子接口</p>
<h5 id="域对象三方法"><a href="#域对象三方法" class="headerlink" title="域对象三方法"></a>域对象三方法</h5><p>setAttriubute（）：放一个数据到servlContext中，便于后面取出</p>
<p>getAttriubute()：根据域对象名获取值</p>
<p>removeAttriubute()：根据域对象名删除值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">	<span class="comment">//创建servletContext</span></span><br><span class="line">	ServletContext cxt=getServletContext();</span><br><span class="line">	<span class="comment">//获取域对象值</span></span><br><span class="line">	Object obj=cxt.getAttribute(<span class="string">"count"</span>);</span><br><span class="line">	<span class="comment">//如果是第一次访问，设置访问量为1</span></span><br><span class="line">	<span class="keyword">int</span> count=<span class="number">0</span>;<span class="comment">//保存访问量</span></span><br><span class="line">	<span class="keyword">if</span>(obj==<span class="keyword">null</span>)&#123;</span><br><span class="line">		count=<span class="number">1</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="comment">//不是第一次。加1</span></span><br><span class="line">		count=((<span class="keyword">int</span>)obj)+<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//设置域对象值</span></span><br><span class="line">	cxt.setAttribute(<span class="string">"count"</span>, count);</span><br><span class="line">	response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">	response.getWriter().write(<span class="string">"访问量："</span>+count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="request和response"><a href="#request和response" class="headerlink" title="request和response"></a>request和response</h1><p>两种请求方式：</p>
<p>get方式（默认）<br>1.以地址栏的方式传输<br>2.会把用户输入的值显示在地址栏，不安全<br>3.速度快 查询用get()</p>
<p>post</p>
<p>1.文件形式传输<br>2.安全，传输数据大，增删改用post()</p>
<p>doget和dopost被service方法调用</p>
<p>两个方法改变了参数，针对http请求</p>
<h2 id="request"><a href="#request" class="headerlink" title="request"></a>request</h2><p>获取用户参数，转发，作为域对象也可以存放数据</p>
<p><strong>getParameter（String）</strong>：根据参数获取值，返回类型为String[]</p>
<p><strong>getparameterValues(String)</strong>:根据名获取一组值,返回类型为String[]</p>
<p><strong>getParameterNames</strong> ()方法 :获取所有参数的名字，返回类型为Enumeration</p>
<p><strong>setCharacterEncoding(“utf-8”);</strong></p>
<p><strong>getContextPath()</strong> </p>
<h2 id="response"><a href="#response" class="headerlink" title="response"></a>response</h2><p><code>getWriter()</code>：输出对象</p>
<p><code>response.setContentType(&quot;text/html;charset=utf-8&quot;);</code></p>
<h2 id="输出对象"><a href="#输出对象" class="headerlink" title="输出对象"></a>输出对象</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PrintWriter out = response.getWriter();</span><br><span class="line">out.write();</span><br></pre></td></tr></table></figure>
<p>把内容输出到浏览器上</p>
<h2 id="servlet对象"><a href="#servlet对象" class="headerlink" title="servlet对象"></a>servlet对象</h2><p><strong>Request</strong>和<strong>response</strong>在每一次访问时都被创建。由容器创建的</p>
<p><strong>Serlvet</strong>只会被创建一次，由用户来开发，由容器来创建，单一的实例。</p>
<p><strong>ServletConfig</strong>会为每一个Servlet创建一个Config对象，且由Servlet维护。就是声明成了成员变量。</p>
<p><strong>ServletContext</strong>对象，代表web应用，这一个项目就只有一个此对象。</p>
<h3 id="解决乱码问题："><a href="#解决乱码问题：" class="headerlink" title="解决乱码问题："></a>解决乱码问题：</h3><p>页面，类，浏览器，tomcat编码格式必须相同</p>
<h4 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h4><p>针对于get和post</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"><span class="built_in">String</span> name=request.getParameter(<span class="string">"name"</span>);<span class="comment">//name是iso-8859-1格式</span></span><br><span class="line">		byte[] byte1=name.getBytes(<span class="string">"iso-8859-1"</span>);<span class="comment">//把name转成字节码</span></span><br><span class="line">		<span class="built_in">String</span> name1=<span class="keyword">new</span> <span class="built_in">String</span>(byte1,<span class="string">"utf-8"</span>);</span><br><span class="line">		out.write(<span class="string">"姓名："</span>+name1);</span><br></pre></td></tr></table></figure>
<h4 id="第二种（推荐"><a href="#第二种（推荐" class="headerlink" title="第二种（推荐)"></a>第二种（推荐)</h4><p>只对post有效</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">request.setCharacterEncoding(<span class="string">"utf-8"</span>);<span class="comment">//必须放在接受参数之前</span></span><br><span class="line">PrintWriter out = response.getWriter();</span><br><span class="line">String name=request.getParameter(<span class="string">"name"</span>);</span><br><span class="line">out.write(<span class="string">"姓名："</span>+name);</span><br></pre></td></tr></table></figure>
<p>对于get方式，tomcat8.0默认配置转成UTF-8，8.0之前，默认ISO-8859-1，在改端口号的两个server.xml中的Connector节点加入<code>URIEncoding=utf-8</code></p>
<h3 id="✪请求转发，请求重定向"><a href="#✪请求转发，请求重定向" class="headerlink" title="✪请求转发，请求重定向"></a>✪请求转发，请求重定向</h3><ol>
<li><p>请求转发：地址栏还是初次请求的地址栏，</p>
<p>请求重定向：地址栏是最后一次响应的地址栏</p>
</li>
<li><p>本质区别：请求转发只发送一次一次请求，而重定向发送多次</p>
</li>
<li><p>请求转发：在最终的servlet中，request和中转的request是同一个request</p>
<p>重定向：不是同一个request</p>
</li>
<li><p>请求转发：/代表的是当前web应用的根目录，代表绝对路径<a href="http://localhost:8080/servlet02" target="_blank" rel="noopener">http://localhost:8080/servlet02</a></p>
<p>请求重定向：/代表的是当前web站点的根目录<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a></p>
</li>
<li><p>请求转发只能转发内部资源，请求重定向可以转发外部资源</p>
</li>
<li><p>外包是转发，还给服务器并告诉服务器谁可以完成任务为重定向</p>
</li>
</ol>
<h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><ol>
<li>一次会话：浏览器打开到浏览器关闭</li>
<li>在服务器端保持http状态信息的方案</li>
<li>客户请求里是否包含session标识表明是否是第一次访问</li>
<li>如果当前已经创建了session，则直接返回，如果没有创建，就创建一个session</li>
<li>数据共享：在同一个会话中</li>
</ol>
]]></content>
      <categories>
        <category>Java-Web&amp;Java</category>
      </categories>
  </entry>
  <entry>
    <title>ss科学上网</title>
    <url>/2019/01/26/ss%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
    <content><![CDATA[<p>嗯……第一次更博，有点晚了，一直在弄，期间走了不少弯路，今天可算是弄好了。</p>
<h3 id="一、vultr"><a href="#一、vultr" class="headerlink" title="一、vultr"></a>一、vultr</h3><p><strong>注册—&gt;绑定银行卡—&gt;建服务器</strong></p>
<p>前两个就不细说了</p>
<p>Server Location: sydney</p>
<p>Server Type：centos7 x64</p>
<p>Server Size: 按实际需要选</p>
<p>Deploy Now</p>
<p>接下来是漫长的等待……</p>
<h3 id="二、连接及搭建ss"><a href="#二、连接及搭建ss" class="headerlink" title="二、连接及搭建ss"></a>二、连接及搭建ss</h3><h4 id="连接："><a href="#连接：" class="headerlink" title="连接："></a>连接：</h4><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>ssh root<span class="variable">@IP</span></span><br></pre></td></tr></table></figure>
<p>之后有一个要输入yes</p>
<p>之后是密码</p>
<h4 id="一键搭建ss"><a href="#一键搭建ss" class="headerlink" title="一键搭建ss"></a>一键搭建ss</h4><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">wget --<span class="keyword">no</span>-check-certificate http<span class="variable">s:</span>//raw.githubusercontent.<span class="keyword">com</span>/teddysun/shadowsocks_install/master/shadowsocks.<span class="keyword">sh</span></span><br><span class="line">chmod +<span class="keyword">x</span> shadowsocks.<span class="keyword">sh</span></span><br><span class="line">./shadowsocks.<span class="keyword">sh</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span> | tee shadowsocks.<span class="built_in">log</span></span><br></pre></td></tr></table></figure>
<p>之后按照提示输入IP、端口、密码、加密方式</p>
<p>出现红框框的时候，恭喜，快要成功了……</p>
<h3 id="三、shadowsocks"><a href="#三、shadowsocks" class="headerlink" title="三、shadowsocks"></a>三、shadowsocks</h3><p>下载shadowsocks，然后打开，填好IP端口密码加密方式，其他默认就好。确定</p>
<p><strong>bingo~</strong></p>
<hr>
<h3 id="以下为我走的弯路学到的知识"><a href="#以下为我走的弯路学到的知识" class="headerlink" title="以下为我走的弯路学到的知识"></a>以下为我走的弯路学到的知识</h3><h4 id="一、新建centos7虚拟机"><a href="#一、新建centos7虚拟机" class="headerlink" title="一、新建centos7虚拟机"></a>一、新建centos7虚拟机</h4><ul>
<li><p>准备</p>
<p>VMware workstation 14 、镜像（<a href="https://www.centos.org/download/）" target="_blank" rel="noopener">https://www.centos.org/download/）</a></p>
</li>
<li><p>具体步骤</p>
<p><img src="http://ww1.sinaimg.cn/large/0069QpNUly1fzk9r2rc6vj30q20n0tah.jpg" alt=""></p>
<p>安装程序光盘映像文件，找到下载的路径</p>
<p><img src="http://ww1.sinaimg.cn/large/0069QpNUly1fzk9uivbarj30fp0fbaaa.jpg" alt=""></p>
<p>命名，选择位置<img src="http://ww1.sinaimg.cn/large/0069QpNUly1fzk9xn7lzpj30fu0fawei.jpg" alt=""></p>
<p>确定磁盘大小和是否拆分为多个文件<img src="http://ww1.sinaimg.cn/large/0069QpNUly1fzk9yvt8zyj30fw0f3t8x.jpg" alt=""></p>
<p>自定义硬件<img src="http://ww1.sinaimg.cn/large/0069QpNUly1fzk9zt3liej30ft0f974h.jpg" alt=""></p>
<p>选择使用ISO映像文件，并找到映像文件的路径<img src="http://ww1.sinaimg.cn/large/0069QpNUly1fzka09qvwqj30nq0lh0tb.jpg" alt=""></p>
<p>完成之后就可以打开虚拟机了</p>
<p>点黑色的地方，用上下键选第一条，漫长的等待……</p>
<p>选择语言（ENGLISH）</p>
<p>确定日期和时间，语言，软件选择—&gt;GNOME桌面，开始安装</p>
<p>之后设置root和新建用户</p>
<p>这次是非常漫长的等待……</p>
<p>reboot!</p>
<p>设置网络，登陆，bingo~</p>
<h4 id="二、端口放行（操作防火墙）"><a href="#二、端口放行（操作防火墙）" class="headerlink" title="二、端口放行（操作防火墙）"></a>二、端口放行（操作防火墙）</h4><p>主要是三个命令</p>
<figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">firewall</span><span class="literal">-</span><span class="comment">cmd</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">zone=public</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">add</span><span class="literal">-</span><span class="comment">port=80/tcp</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">permanent</span>   <span class="comment">//</span><span class="literal">-</span><span class="literal">-</span><span class="comment">zone</span> <span class="comment">:作用域</span> <span class="comment">80/tcp:端口/传输协议</span>  <span class="literal">-</span><span class="literal">-</span><span class="comment">permanent：没有这个重启以后还得再来一遍</span></span><br><span class="line"><span class="comment">firewall</span><span class="literal">-</span><span class="comment">cmd</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">reload</span></span><br><span class="line"><span class="comment">iptables</span><span class="literal">-</span><span class="comment">save</span></span><br></pre></td></tr></table></figure>
<p>第一条命令是添加端口，第二条命令是重载防火墙，第三条命令是查看开放的端口</p>
<p>##同时用到的对防火墙的操作</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">firewall-cmd    --state  <span class="comment">//查看防火墙状态</span></span><br><span class="line">systemctl  stop   firewalld<span class="selector-class">.service</span>   <span class="comment">//关闭防火墙</span></span><br><span class="line">systemctl  start   firewalld<span class="selector-class">.service</span>   <span class="comment">//开启防火墙</span></span><br><span class="line">systemctl disable firewalld<span class="selector-class">.service</span>       <span class="comment">//禁止firewall开机启动</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Others</category>
      </categories>
  </entry>
  <entry>
    <title>事务</title>
    <url>/2019/09/06/%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<p>数据库对同样的数据有不同的存储方式和管理方式，在mysql中称为存储引擎</p>
<p>myisam:速度快，不安全,不支持事务，不支持外键</p>
<p>InnoDB：速度慢，安全，如果支持事务，必须用InnoDB</p>
<p><strong>事务</strong>：</p>
<p>原子性：一组操作，要么全部执行成功要么全部执行失败</p>
<p>隔离性：一组操作未完成之前其他会话不能看到中间过程</p>
<p>一致性：事务发生前后，总金额依然匹配</p>
<p>持久性：事务产生的影响是不能撤销的</p>
<p>开启事务</p>
<p><code>START TRANSACTIOON</code></p>
<p><code>set autocommit=0</code></p>
<p>提交事务</p>
<p><code>commit;</code></p>
<p>回滚事务，回到未修改前</p>
<p><code>rollback;</code></p>
<p>事务处理放在service</p>
]]></content>
      <categories>
        <category>Java-Web&amp;Java</category>
      </categories>
  </entry>
  <entry>
    <title>数学建模之图与网络模型</title>
    <url>/2020/07/22/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E4%B9%8B%E5%9B%BE%E4%B8%8E%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="一、最短路问题"><a href="#一、最短路问题" class="headerlink" title="一、最短路问题"></a>一、最短路问题</h1><h2 id="1-两个指定顶点之间的最短路径"><a href="#1-两个指定顶点之间的最短路径" class="headerlink" title="1.两个指定顶点之间的最短路径"></a>1.两个指定顶点之间的最短路径</h2><p><strong>Dijkstra算法</strong>: $(u_0,v_0)$  按照距离$u_0$从近到远的顺序，依次求得$u_0$到<em>G</em>的个顶点的最短路径和距离，直至$v_0$或者<em>G</em>的所有顶点。</p>
<p>MATLAB代码如下（需要改图）：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">tulun1.m</span><br><span class="line">weight=    [<span class="number">0</span>     <span class="number">2</span>     <span class="number">8</span>     <span class="number">1</span>   Inf   Inf   Inf   Inf   Inf   Inf   Inf;</span><br><span class="line">            <span class="number">2</span>     <span class="number">0</span>     <span class="number">6</span>   Inf     <span class="number">1</span>   Inf   Inf   Inf   Inf   Inf   Inf;</span><br><span class="line">            <span class="number">8</span>     <span class="number">6</span>     <span class="number">0</span>     <span class="number">7</span>     <span class="number">5</span>     <span class="number">1</span>     <span class="number">2</span>   Inf   Inf   Inf   Inf;</span><br><span class="line">            <span class="number">1</span>   Inf     <span class="number">7</span>     <span class="number">0</span>   Inf   Inf     <span class="number">9</span>   Inf   Inf   Inf   Inf;</span><br><span class="line">          Inf     <span class="number">1</span>     <span class="number">5</span>   Inf     <span class="number">0</span>     <span class="number">3</span>   Inf     <span class="number">2</span>     <span class="number">9</span>   Inf   Inf;</span><br><span class="line">          Inf   Inf     <span class="number">1</span>   Inf     <span class="number">3</span>     <span class="number">0</span>     <span class="number">4</span>   Inf     <span class="number">6</span>   Inf   Inf;</span><br><span class="line">          Inf   Inf     <span class="number">2</span>     <span class="number">9</span>   Inf     <span class="number">4</span>     <span class="number">0</span>   Inf     <span class="number">3</span>     <span class="number">1</span>   Inf;</span><br><span class="line">          Inf   Inf   Inf   Inf     <span class="number">2</span>   Inf   Inf     <span class="number">0</span>     <span class="number">7</span>   Inf     <span class="number">9</span>;</span><br><span class="line">          Inf   Inf   Inf   Inf     <span class="number">9</span>     <span class="number">6</span>     <span class="number">3</span>     <span class="number">7</span>     <span class="number">0</span>     <span class="number">1</span>     <span class="number">2</span>;</span><br><span class="line">          Inf   Inf   Inf   Inf   Inf   Inf     <span class="number">1</span>   Inf     <span class="number">1</span>     <span class="number">0</span>     <span class="number">4</span>;</span><br><span class="line">          Inf   Inf   Inf   Inf   Inf   Inf   Inf     <span class="number">9</span>     <span class="number">2</span>     <span class="number">4</span>     <span class="number">0</span>;];</span><br><span class="line">[dis, path]=dijkstra(weight,<span class="number">1</span>, <span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dijkstra.m</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[min,path]</span>=<span class="title">dijkstra</span><span class="params">(w,start,terminal)</span></span></span><br><span class="line">n=<span class="built_in">size</span>(w,<span class="number">1</span>); label(start)=<span class="number">0</span>; f(start)=start;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:n</span><br><span class="line">   <span class="keyword">if</span> <span class="built_in">i</span>~=start</span><br><span class="line">       label(<span class="built_in">i</span>)=<span class="built_in">inf</span>;</span><br><span class="line"><span class="keyword">end</span>, <span class="keyword">end</span></span><br><span class="line">s(<span class="number">1</span>)=start; u=start;</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">length</span>(s)&lt;n</span><br><span class="line">   <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:n</span><br><span class="line">      ins=<span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:<span class="built_in">length</span>(s)</span><br><span class="line">         <span class="keyword">if</span> <span class="built_in">i</span>==s(<span class="built_in">j</span>)</span><br><span class="line">            ins=<span class="number">1</span>;</span><br><span class="line">         <span class="keyword">end</span>,  </span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">if</span> ins==<span class="number">0</span></span><br><span class="line">         v=<span class="built_in">i</span>;</span><br><span class="line">         <span class="keyword">if</span> label(v)&gt;(label(u)+w(u,v))</span><br><span class="line">            label(v)=(label(u)+w(u,v)); </span><br><span class="line">         f(v)=u;</span><br><span class="line">         <span class="keyword">end</span>, </span><br><span class="line">      <span class="keyword">end</span>, </span><br><span class="line">   <span class="keyword">end</span>   </span><br><span class="line">v1=<span class="number">0</span>;</span><br><span class="line">   k=<span class="built_in">inf</span>;</span><br><span class="line">   <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:n</span><br><span class="line">         ins=<span class="number">0</span>;</span><br><span class="line">         <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:<span class="built_in">length</span>(s)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">i</span>==s(<span class="built_in">j</span>)</span><br><span class="line">               ins=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">end</span>, </span><br><span class="line">         <span class="keyword">end</span></span><br><span class="line">         <span class="keyword">if</span> ins==<span class="number">0</span></span><br><span class="line">            v=<span class="built_in">i</span>;</span><br><span class="line">            <span class="keyword">if</span> k&gt;label(v)</span><br><span class="line">               k=label(v);  v1=v;</span><br><span class="line">            <span class="keyword">end</span>,  </span><br><span class="line">         <span class="keyword">end</span>,  </span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line">   s(<span class="built_in">length</span>(s)+<span class="number">1</span>)=v1;  </span><br><span class="line">   u=v1;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">min</span>=label(terminal); path(<span class="number">1</span>)=terminal;</span><br><span class="line"><span class="built_in">i</span>=<span class="number">1</span>; </span><br><span class="line"><span class="keyword">while</span> path(<span class="built_in">i</span>)~=start</span><br><span class="line">      path(<span class="built_in">i</span>+<span class="number">1</span>)=f(path(<span class="built_in">i</span>));</span><br><span class="line">      <span class="built_in">i</span>=<span class="built_in">i</span>+<span class="number">1</span> ;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">path(<span class="built_in">i</span>)=start;</span><br><span class="line">L=<span class="built_in">length</span>(path);</span><br><span class="line">path=path(L:<span class="number">-1</span>:<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<h2 id="2-每对顶点之间的最短路径"><a href="#2-每对顶点之间的最短路径" class="headerlink" title="2.每对顶点之间的最短路径"></a>2.每对顶点之间的最短路径</h2><p>Flord算法：递推产生矩阵序列$A_1,…,A_k,…,A_n$,其中$A_k$的第$i$ 行第 $j$列元素$A_k(i,j)$表示从顶点$v_i$到顶点$v_j$的路径上所经过的顶点序号不大于$k$的最短路径长度。</p>
<p>MATLAB代码如下：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a= [ <span class="number">0</span>,<span class="number">50</span>,<span class="built_in">inf</span>,<span class="number">40</span>,<span class="number">25</span>,<span class="number">10</span>;</span><br><span class="line">     <span class="number">50</span>,<span class="number">0</span>,<span class="number">15</span>,<span class="number">20</span>,<span class="built_in">inf</span>,<span class="number">25</span>;</span><br><span class="line">     <span class="built_in">inf</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="built_in">inf</span>;</span><br><span class="line">     <span class="number">40</span>,<span class="number">20</span>,<span class="number">10</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">25</span>;</span><br><span class="line">     <span class="number">25</span>,<span class="built_in">inf</span>,<span class="number">20</span>,<span class="number">10</span>,<span class="number">0</span>,<span class="number">55</span>;</span><br><span class="line">     <span class="number">10</span>,<span class="number">25</span>,<span class="built_in">inf</span>,<span class="number">25</span>,<span class="number">55</span>,<span class="number">0</span>];</span><br><span class="line">[D, path]=floyd(a)</span><br><span class="line"></span><br><span class="line">floyd.m</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[D,path,min1,path1]</span>=<span class="title">floyd</span><span class="params">(a,start,terminal)</span></span></span><br><span class="line">D=a;n=<span class="built_in">size</span>(D,<span class="number">1</span>);path=<span class="built_in">zeros</span>(n,n);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:n</span><br><span class="line">   <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:n</span><br><span class="line">      <span class="keyword">if</span> D(<span class="built_in">i</span>,<span class="built_in">j</span>)~=<span class="built_in">inf</span></span><br><span class="line">         path(<span class="built_in">i</span>,<span class="built_in">j</span>)=<span class="built_in">j</span>;</span><br><span class="line">      <span class="keyword">end</span>, </span><br><span class="line">   <span class="keyword">end</span>,</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> k=<span class="number">1</span>:n</span><br><span class="line">   <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:n</span><br><span class="line">      <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:n</span><br><span class="line">         <span class="keyword">if</span> D(<span class="built_in">i</span>,k)+D(k,<span class="built_in">j</span>)&lt;D(<span class="built_in">i</span>,<span class="built_in">j</span>)</span><br><span class="line">            D(<span class="built_in">i</span>,<span class="built_in">j</span>)=D(<span class="built_in">i</span>,k)+D(k,<span class="built_in">j</span>);</span><br><span class="line">            path(<span class="built_in">i</span>,<span class="built_in">j</span>)=path(<span class="built_in">i</span>,k);</span><br><span class="line">         <span class="keyword">end</span>, </span><br><span class="line">      <span class="keyword">end</span>, </span><br><span class="line">   <span class="keyword">end</span>,</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">if</span> nargin==<span class="number">3</span></span><br><span class="line">   min1=D(start,terminal);</span><br><span class="line">   m(<span class="number">1</span>)=start;</span><br><span class="line">   <span class="built_in">i</span>=<span class="number">1</span>;</span><br><span class="line">   path1=[ ];   </span><br><span class="line">   <span class="keyword">while</span>   path(m(<span class="built_in">i</span>),terminal)~=terminal</span><br><span class="line">      k=<span class="built_in">i</span>+<span class="number">1</span>;                                </span><br><span class="line">      m(k)=path(m(<span class="built_in">i</span>),terminal);</span><br><span class="line">      <span class="built_in">i</span>=<span class="built_in">i</span>+<span class="number">1</span>;</span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line">   m(<span class="built_in">i</span>+<span class="number">1</span>)=terminal;</span><br><span class="line">   path1=m;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h1 id="二、网络最大流问题（图-线性规划）"><a href="#二、网络最大流问题（图-线性规划）" class="headerlink" title="二、网络最大流问题（图+线性规划）"></a>二、网络最大流问题（图+线性规划）</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><p>有向图$D=(V,A)$，$A$为弧集，<strong>发点</strong>$v_s$，<strong>收点</strong>$v_t$,其余为<strong>中间点</strong>，$c_{ij}$为弧的<strong>容量</strong>，$f_{ij}$为弧的<strong>流量</strong></p>
<h2 id="2-最大流问题模型"><a href="#2-最大流问题模型" class="headerlink" title="2.最大流问题模型"></a>2.最大流问题模型</h2><p><img src="http://ww1.sinaimg.cn/large/0069QpNUly1ggzlsaz4sbj30fa061js4.jpg" alt="@5~1IVPAP6L9E}(@5J$P(ZA.png"></p>
<h2 id="3-寻求最大流的标号法（Ford-Fulkerson）"><a href="#3-寻求最大流的标号法（Ford-Fulkerson）" class="headerlink" title="3.寻求最大流的标号法（Ford-Fulkerson）"></a>3.寻求最大流的标号法（Ford-Fulkerson）</h2><h3 id="标号过程："><a href="#标号过程：" class="headerlink" title="标号过程："></a>标号过程：</h3><ol>
<li>给$v_s$标上$(0,\infty)$</li>
<li>找以$v_s$为起点的不饱和弧，标记$(v_s,l(v_j)$,$l(v_j)=min[(c_{ij}-f_ij),l(v_s)]$  </li>
<li>找以$v_s$为终点的非零弧，标记$(-v_s,l(v_j))=min[f_{ij},l(v_i)]$</li>
<li>重复上述步骤直到不能继续标号或者给所有的点进行标号</li>
<li>逆向寻找增广链，要求该链的每个顶点的$l(v_j)$都要大于最后一点的$l(v_t)$，可能方向不同</li>
<li>把该链所有弧±上$l(v_t)$</li>
<li>检查</li>
</ol>
<h3 id="最小费用最大流问题"><a href="#最小费用最大流问题" class="headerlink" title="最小费用最大流问题"></a>最小费用最大流问题</h3><h1 id="三、Matlab工具箱"><a href="#三、Matlab工具箱" class="headerlink" title="三、Matlab工具箱"></a>三、Matlab工具箱</h1><p><img src="http://ww1.sinaimg.cn/large/0069QpNUly1gh01uml84tj30s70c27a8.jpg" alt="B6GYITGSARRA{5$QAS23_LU.png"></p>
<ul>
<li>要求是下三角矩阵</li>
<li>求最大流的命令，只能解决权重都为正值，且两个顶点之见不能有两条弧，若有两条弧可以加一个点，用相同的权重</li>
</ul>
<h1 id="四、计划评审方法和关键路线法"><a href="#四、计划评审方法和关键路线法" class="headerlink" title="四、计划评审方法和关键路线法"></a>四、计划评审方法和关键路线法</h1><p><strong>作业</strong>：消耗时间或资源的行为</p>
<p><strong>事件</strong>：作业的开始或结束</p>
<h2 id="1-时间参数"><a href="#1-时间参数" class="headerlink" title="1.时间参数"></a>1.时间参数</h2><h3 id="1-1事件时间参数"><a href="#1-1事件时间参数" class="headerlink" title="1.1事件时间参数"></a>1.1事件时间参数</h3><ol>
<li>事件的最早时间：表示以事件$v_j$为始点的各工作最早可能开始的时间</li>
<li>事件的最迟时间：不影响任务总工期条件下，以事件$v_j$为始点的各工作最迟必须开始的时间</li>
</ol>
<h3 id="1-2工作的时间参数"><a href="#1-2工作的时间参数" class="headerlink" title="1.2工作的时间参数"></a>1.2工作的时间参数</h3><ol>
<li><p>工作的最早可能开工时间   和   工作的最早可能完工时间：</p>
<p>$t_{ES}：$：最早可能开工时间</p>
<p>$t_{EF}$:最早可能完工时间</p>
<p><img src="http://ww1.sinaimg.cn/large/0069QpNUly1gh026gegjqj30ex04sq3f.jpg" alt="05LPE~27E6LQ(Z})G6}1)RC.png"></p>
</li>
<li><p>工作最迟必须开工时间  和   工作最迟必须完工时间</p>
<p>$t_{LS}：$最迟必须开工时间</p>
<p>$t_{LF}$：最迟必须完工时间</p>
<p><img src="http://ww1.sinaimg.cn/large/0069QpNUly1gh028uo82kj30cy042mxu.jpg" alt="U8DH)%C7YG(K1GP(R3O457K.png"></p>
</li>
</ol>
<h2 id="2-完成作业期望和实现事件的概率"><a href="#2-完成作业期望和实现事件的概率" class="headerlink" title="2.完成作业期望和实现事件的概率"></a>2.完成作业期望和实现事件的概率</h2><p>$t_{ij}$是完成作业$(i,j)$的实际时间，则数学期望和方差如下：<br>$$<br>E(t_{ij})=\frac{a_{ij}+4m_{ij}+b_{ij}}{6}\<br>Var(t_{ij})=\frac{(b_{ij}-a_{ij})^2}{36}<br>$$<br>$T=\sum_{(i,j)\in关键线路}t_{ij}$</p>
<p>假设T服从正态分布，规定工期为d，则<br>$$<br>P{T\leq d}=\Phi(\frac{d-\overline T}{S})<br>$$</p>
<h1 id="五、油管订购和运输"><a href="#五、油管订购和运输" class="headerlink" title="五、油管订购和运输"></a>五、油管订购和运输</h1><p>直接看书QAQ</p>
]]></content>
      <categories>
        <category>数学建模</category>
      </categories>
  </entry>
  <entry>
    <title>信号与系统论文</title>
    <url>/2020/06/30/%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9F%E8%AE%BA%E6%96%87/</url>
    <content><![CDATA[<p>因为疫情期末考核变为论文，题目为 “基于傅里叶变换的图像去噪和图像增强”</p>
<p>文件见下（论文+matlab代码）</p>
<p>链接：<a href="https://pan.baidu.com/s/1QjwzEv705Vg2x5ydjLXB2A" target="_blank" rel="noopener">https://pan.baidu.com/s/1QjwzEv705Vg2x5ydjLXB2A</a><br>提取码：ua5s</p>
]]></content>
      <categories>
        <category>信号与系统</category>
      </categories>
  </entry>
  <entry>
    <title>分页查询</title>
    <url>/2019/09/04/%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<p><code>select * from 表名 limit 0，2;;</code></p>
<p>（页数-1）*要显示的条数，要显示的条数</p>
<p><strong>分页内容：</strong>上一页，下一页，首页，尾页，跳转页，总页数，当前页，每页的数量</p>
<p>每页的数量：程序员设置</p>
<p>总条数：<code>select count(*) from表名</code></p>
<p>总页数：总条数%每页的数量==0？（总条数%每页条数）：（总条数%每页条数+1）</p>
<p>首页： 判断当前页是否为第一页，如果是，超连接无效</p>
<p>尾页：判断当前页是否等于总页数，如果是，超链接无效</p>
<p>上一页：是否等于首页？无效：页码-1</p>
<p>下一页：是否等于尾页？无效：页码+1</p>
<p>当前页码：就是用户传递</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;tr&gt;</span><br><span class="line">	&lt;td <span class="class"><span class="keyword">class</span></span>=<span class="string">"line_table"</span> align=<span class="string">"center"</span> colspan=<span class="string">"11"</span> height=<span class="string">"20"</span>&gt;</span><br><span class="line">	&lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"left_bt2"</span>&gt;第$&#123;page.curPage &#125;页 &amp;nbsp;&amp;nbsp;共$&#123;page.totalPage &#125;页</span><br><span class="line">	&lt;/span&gt;&amp;nbsp;&amp;nbsp; </span><br><span class="line">	&lt;c:choose&gt;</span><br><span class="line">	&lt;c:when test=<span class="string">"$&#123;page.curPage eq 1 &#125;"</span>&gt;</span><br><span class="line">	&lt;span style="font-size: 12px; color:gray"&gt;[首页]&lt;/span&gt;</span><br><span class="line">	&lt;/c:when&gt;</span><br><span class="line">	&lt;c:otherwise&gt;</span><br><span class="line">	&lt;a href="$&#123;#&amp;&amp;curPage=1&#125;"&gt;[首页]&lt;/a&gt;</span><br><span class="line">	&lt;/c:otherwise&gt;</span><br><span class="line">	&lt;/c:choose&gt;</span><br><span class="line">								</span><br><span class="line">	&lt;c:choose&gt;</span><br><span class="line">	&lt;c:when test=<span class="string">"$&#123;page.curPage eq page.totalPage &#125;"</span>&gt;</span><br><span class="line">	&lt;span style="font-size: 12px; color:gray"&gt;[尾页]&lt;/span&gt;</span><br><span class="line">	&lt;/c:when&gt;</span><br><span class="line">	&lt;c:otherwise&gt;</span><br><span class="line">	&lt;a href="$&#123;#&amp;&amp;curPage=$&#123;page.totalPage&#125;"&gt;[尾页]&lt;/a&gt;</span><br><span class="line">	&lt;/c:otherwise&gt;</span><br><span class="line">	&lt;/c:choose&gt;</span><br><span class="line">	&lt;c:choose&gt;</span><br><span class="line">	&lt;c:when test=<span class="string">"$&#123;page.curPage eq 1 &#125;"</span>&gt;</span><br><span class="line">	&lt;span style="font-size: 12px; color:gray"&gt;[上一页]&lt;/span&gt;</span><br><span class="line">	&lt;/c:when&gt;</span><br><span class="line">	&lt;c:otherwise&gt;</span><br><span class="line">	&lt;a href="$&#123;#&amp;&amp;curPage=$&#123;page.curPage-1&#125;"&gt;[上一页]&lt;/a&gt;</span><br><span class="line">	&lt;/c:otherwise&gt;	</span><br><span class="line">	&lt;/c:choose&gt;</span><br><span class="line">								</span><br><span class="line">	&lt;c:choose&gt;</span><br><span class="line">	&lt;c:when test=<span class="string">"$&#123;page.curPage eq page.totalPage &#125;"</span>&gt;</span><br><span class="line">	&lt;span style="font-size: 12px; color:gray"&gt;[下一页]&lt;/span&gt;</span><br><span class="line">	&lt;/c:when&gt;</span><br><span class="line">	&lt;c:otherwise&gt;</span><br><span class="line">	&lt;a href="$&#123;#&amp;&amp;curPage=$&#123;page.curPage+1&#125;&amp;&amp;userid=$&#123;requestScope.ordersInfo.userid&#125;"&gt;[下一页]&lt;/a&gt;</span><br><span class="line">	&lt;/c:otherwise&gt;	</span><br><span class="line">	&lt;/c:choose&gt;</span><br><span class="line"></span><br><span class="line">	&lt;/td</span><br><span class="line">&lt;/tr&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java-Web&amp;Java</category>
      </categories>
  </entry>
  <entry>
    <title>数学建模之整数规划</title>
    <url>/2020/07/15/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E4%B9%8B%E6%95%B4%E6%95%B0%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h1 id="0-1型整数规划"><a href="#0-1型整数规划" class="headerlink" title="0-1型整数规划"></a>0-1型整数规划</h1><p>二进制变量</p>
<h2 id="相互排斥的约束条件"><a href="#相互排斥的约束条件" class="headerlink" title="相互排斥的约束条件"></a>相互排斥的约束条件</h2><p><strong>让未选中的约束条件恒成立</strong><br>$$<br>y_i=\begin{cases}1,第i个约束起作用\<br>                0,第i个约束不起作用, i = 1,2,…,m,<br>    \end{cases}<br>$$<br>加一个充分大的常数M<br>$$<br>a_{i1}x_1+…+a_{in}x_n\leq b_i+(1-y_i)M,i=1,2,…,m,\<br>y_1+y_2+…+y_m=1<br>$$</p>
<h2 id="固定费用问题"><a href="#固定费用问题" class="headerlink" title="固定费用问题"></a>固定费用问题</h2><p>用<br>$$<br>y_j\varepsilon \leq x_j \leq y_jM ,\varepsilon是充分小的正常数，M是充分大的正常数<br>$$<br>代替上面的yi，之后照旧</p>
<h2 id="指派问题"><a href="#指派问题" class="headerlink" title="指派问题"></a>指派问题</h2><p>$$<br>min \sum_{i=1}^n\sum_{j=1}^nc_{ij}x{ij},\<br>s.t.\begin{cases}<br>\sum_{j=1}^nx_{ij}=1,i=1,…,n,\<br>\sum_{i=1}^nx_{ij}=1,i=1,…,n,\<br>x_{ij}=0或1,i,j=1,…,n.<br>\end{cases}<br>$$</p>
<p>cij:第i个人去做第j项工作需花费cij单位时间</p>
<p>系数矩阵，匈牙利算法。</p>
<h1 id="蒙特卡洛法（随机取样）"><a href="#蒙特卡洛法（随机取样）" class="headerlink" title="蒙特卡洛法（随机取样）"></a>蒙特卡洛法（随机取样）</h1><p><img src="http://ww1.sinaimg.cn/large/0069QpNUly1ggrtuc8cglj30on08bdha.jpg" alt="$W2U{1H1@V{[75]`{Q@F7JH.png"></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%mente.m</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[f,g]</span> = <span class="title">mente</span><span class="params">(x)</span>;</span></span><br><span class="line">f=x(<span class="number">1</span>)^<span class="number">2</span>+x(<span class="number">2</span>)^<span class="number">2</span>+<span class="number">3</span>*x(<span class="number">3</span>)^<span class="number">2</span>+<span class="number">4</span>*x(<span class="number">4</span>)^<span class="number">2</span>+<span class="number">2</span>*x(<span class="number">5</span>)^<span class="number">2</span><span class="number">-8</span>*x(<span class="number">1</span>)<span class="number">-2</span>*x(<span class="number">2</span>)<span class="number">-3</span>*x(<span class="number">3</span>)-x(<span class="number">4</span>)<span class="number">-2</span>*x(<span class="number">5</span>);</span><br><span class="line">g=[sum(x)<span class="number">-400</span></span><br><span class="line">    x(<span class="number">1</span>)+<span class="number">2</span>*x(<span class="number">2</span>)+<span class="number">2</span>*x(<span class="number">3</span>)+x(<span class="number">4</span>)+<span class="number">6</span>*x(<span class="number">5</span>)<span class="number">-800</span></span><br><span class="line">    <span class="number">2</span>*x(<span class="number">1</span>)+x(<span class="number">2</span>)+<span class="number">6</span>*x(<span class="number">3</span>)<span class="number">-200</span></span><br><span class="line">    x(<span class="number">3</span>)+x(<span class="number">4</span>)+<span class="number">5</span>*x(<span class="number">5</span>)<span class="number">-200</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">%function.m</span></span><br><span class="line"><span class="built_in">rand</span>(<span class="string">'state'</span>,sum(clock));  <span class="comment">%初始化随机数发生器</span></span><br><span class="line">p0=<span class="number">0</span>;</span><br><span class="line">tic;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="number">10</span>^<span class="number">6</span> </span><br><span class="line">    x=randi([<span class="number">0</span>,<span class="number">99</span>],<span class="number">1</span>,<span class="number">5</span>);  <span class="comment">%产生一行五列的区间[0,99]的随机整数</span></span><br><span class="line">    [f,g]=mente(x);</span><br><span class="line">    <span class="keyword">if</span> all(g&lt;=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> p0&lt;f</span><br><span class="line">            x0=x;p0=f;  <span class="comment">%记录下当前较好的解</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">x0,p0</span><br><span class="line">toc</span><br></pre></td></tr></table></figure>
<h1 id="整数线性规划的计算机求解"><a href="#整数线性规划的计算机求解" class="headerlink" title="整数线性规划的计算机求解"></a>整数线性规划的计算机求解</h1><p>Lingo比MatLab好</p>
<p>因为matlab必须把所有决策变量变为一维决策向量</p>
]]></content>
      <categories>
        <category>数学建模</category>
      </categories>
  </entry>
  <entry>
    <title>数学建模之线性规划</title>
    <url>/2020/07/15/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E4%B9%8B%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<p><img src="http://ww1.sinaimg.cn/large/0069QpNUly1ggrq24i34qj314y0mawna.jpg" alt="TIM图片20200715160824.png"></p>
<h1 id="MATLAB求解："><a href="#MATLAB求解：" class="headerlink" title="MATLAB求解："></a>MATLAB求解：</h1><h3 id="1-标准形式"><a href="#1-标准形式" class="headerlink" title="1.标准形式"></a>1.标准形式</h3><p><img src="http://ww1.sinaimg.cn/large/0069QpNUly1ggrq6213w2j30bo05374y.jpg" alt="TIM图片20200715160824.png"></p>
<p>注意是min，而且是小于。</p>
<p>f,x,b,beq,lb,ub为列向量；</p>
<p>f:价值向量；</p>
<p>b:资源向量；</p>
<p>A，Aeq为矩阵。</p>
<h3 id="2-求解线性规划的命令"><a href="#2-求解线性规划的命令" class="headerlink" title="2.求解线性规划的命令"></a>2.求解线性规划的命令</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">[x,fval]= linprog(f,A,<span class="selector-tag">b</span>,Aeq,beq,lb,ub)</span><br></pre></td></tr></table></figure>
<h3 id="3-例子"><a href="#3-例子" class="headerlink" title="3.例子"></a>3.例子</h3><p><img src="http://ww1.sinaimg.cn/large/0069QpNUly1ggrq88la73j30ai0593yv.jpg" alt="}0W0@1[)AF8P5F]}LAKLE%U.png"></p>
<p>(1)化为标准型</p>
<p>​<br>$$<br>min\space\omega\space=\space -2x_1-3x_2+5x_3 \<br>s.t.<br>\begin{cases}<br>    \left[<br>    \begin{matrix}<br>       -2 &amp; 5 &amp; -1 \<br>        1 &amp; 3 &amp; 1 \<br>    \end{matrix}<br>    \right]<br>    \times<br>    \left[<br>    \begin{matrix}<br>    x_1\<br>    x_2\<br>    x_3<br>    \end{matrix}<br>    \right]<br>    \leq\left[\begin{matrix}<br>    -10\<br>    12<br>    \end{matrix}<br>    \right],\<br>    \left[\begin{matrix}1,1,1\end{matrix}\right]·\left[\begin{matrix}x_1,x_2,x_3\end{matrix}\right]^T=7,\left[\begin{matrix}x_1,x_2,x_3\end{matrix}\right]^T\geq\left[\begin{matrix}0,0,0\end{matrix}\right]^T.<br>\end{cases}<br>$$<br>(2)求解的MATLAB程序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">clc,clear</span><br><span class="line">f=[-2;-3;5];</span><br><span class="line">a=[-2,5,-1;1,3,1];b=[-10;12];</span><br><span class="line">aeq=[1,1,1];</span><br><span class="line">beq=7;</span><br><span class="line">[x,y]=linprog(f,a,b,aeq,beq,zeros(3,1));</span><br><span class="line">x,y=-y</span><br></pre></td></tr></table></figure>
<h1 id="绝对值问题"><a href="#绝对值问题" class="headerlink" title="绝对值问题"></a>绝对值问题</h1><p>变量变换<br>$$<br>u_i=\frac{x_i+|x_i|}{2},v_i=\frac{|x_i|-x_i}{2}<br>$$<br>所以有<br>$$<br>|x_i|=u_i+v_i<br>$$</p>
<h5 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h5><p><img src="http://ww1.sinaimg.cn/large/0069QpNUly1ggrs2woucoj30ni0arjt5.jpg" alt="3`H((1LJJ}VCJWS`3QNA9OB.png"></p>
<p><img src="http://ww1.sinaimg.cn/large/0069QpNUly1ggrrp8cavaj30gm06maac.jpg" alt="VAGBJ$JAE3CDDG8K0K{F)3M.png"></p>
<p>MATLAB代码：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clc,clear</span><br><span class="line">c=<span class="number">1</span>:<span class="number">4</span>;c=[c,c]';</span><br><span class="line">a=[<span class="number">1</span> <span class="number">-1</span> <span class="number">-1</span> <span class="number">1</span>;<span class="number">1</span> <span class="number">-1</span> <span class="number">1</span> <span class="number">-1</span>;<span class="number">1</span> <span class="number">-1</span> <span class="number">-2</span> <span class="number">3</span>];</span><br><span class="line">a=[a,-a];</span><br><span class="line">b=[<span class="number">-2</span> <span class="number">-1</span> <span class="number">-1</span>/<span class="number">2</span>]';</span><br><span class="line">[y,z]=linprog(c,a,b,[],[],<span class="built_in">zeros</span>(<span class="number">8</span>,<span class="number">1</span>))</span><br><span class="line">x=y(<span class="number">1</span>:<span class="number">4</span>) -y(<span class="number">5</span>:<span class="keyword">end</span>)</span><br></pre></td></tr></table></figure>
<h1 id="投资风险"><a href="#投资风险" class="headerlink" title="投资风险"></a>投资风险</h1>]]></content>
      <categories>
        <category>数学建模</category>
      </categories>
  </entry>
  <entry>
    <title>现代密码学思维导图</title>
    <url>/2020/06/30/%E7%8E%B0%E4%BB%A3%E5%AF%86%E7%A0%81%E5%AD%A6%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/</url>
    <content><![CDATA[<p>直接上链接。</p>
<p>链接：<a href="https://pan.baidu.com/s/1fRPKXfIDsZnDuHR9f7gHhA" target="_blank" rel="noopener">https://pan.baidu.com/s/1fRPKXfIDsZnDuHR9f7gHhA</a><br>提取码：5s1f</p>
]]></content>
      <categories>
        <category>密码学</category>
      </categories>
  </entry>
  <entry>
    <title>csapp_bombLab</title>
    <url>/2019/12/18/csapp-bombLab/</url>
    <content><![CDATA[<h1 id="phase-1"><a href="#phase-1" class="headerlink" title="phase_1"></a>phase_1</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">08048b30 &lt;phase_1&gt;:</span><br><span class="line"> 8048b30:	55                   	push   %ebp</span><br><span class="line"> 8048b31:	89 e5                	mov    %esp,%ebp</span><br><span class="line"> 8048b33:	83 ec 10             	sub    $0x10,%esp</span><br><span class="line"> 8048b36:	68 24 a1 04 08       	push   $0x804a124</span><br><span class="line"> 8048b3b:	ff 75 08             	pushl  0x8(%ebp)</span><br><span class="line"> 8048b3e:	e8 63 05 00 00       	call   80490a6 &lt;strings_not_equal&gt;</span><br><span class="line"> 8048b43:	83 c4 10             	add    $0x10,%esp</span><br><span class="line"> 8048b46:	85 c0                	test   %eax,%eax</span><br><span class="line"> 8048b48:	74 05                	je     8048b4f &lt;phase_1+0x1f&gt;</span><br><span class="line"> 8048b4a:	e8 5a 06 00 00       	call   80491a9 &lt;explode_bomb&gt;</span><br><span class="line"> 8048b4f:	c9                   	leave  </span><br><span class="line"> 8048b50:	c3                   	ret</span><br></pre></td></tr></table></figure>
<p>直接查看0x804a124地址里的值</p>
<p>Border relations with Canada have never been better.</p>
<h1 id="phase-2"><a href="#phase-2" class="headerlink" title="phase_2"></a>phase_2</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">08048b51 &lt;phase_2&gt;:</span><br><span class="line"> 8048b51:	55                   	push   %ebp</span><br><span class="line"> 8048b52:	89 e5                	mov    %esp,%ebp</span><br><span class="line"> 8048b54:	53                   	push   %ebx</span><br><span class="line"> 8048b55:	83 ec 2c             	sub    $0x2c,%esp</span><br><span class="line"> 8048b58:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax</span><br><span class="line"> 8048b5e:	89 45 f4             	mov    %eax,-0xc(%ebp)</span><br><span class="line"> 8048b61:	31 c0                	xor    %eax,%eax</span><br><span class="line"> 8048b63:	8d 45 dc             	lea    -0x24(%ebp),%eax</span><br><span class="line"> 8048b66:	50                   	push   %eax</span><br><span class="line"> 8048b67:	ff 75 08             	pushl  0x8(%ebp)#准备工作</span><br><span class="line"> 8048b6a:	e8 62 06 00 00       	call   80491d1 &lt;read_six_numbers&gt;</span><br><span class="line"> 8048b6f:	83 c4 10             	add    $0x10,%esp </span><br><span class="line"> 8048b72:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)</span><br><span class="line"> 8048b76:	79 05                	jns    8048b7d &lt;phase_2+0x2c&gt;  #-36(%ebp)=0</span><br><span class="line"> 8048b78:	e8 2c 06 00 00       	call   80491a9 &lt;explode_bomb&gt;</span><br><span class="line"> 8048b7d:	bb 01 00 00 00       	mov    $0x1,%ebx</span><br><span class="line"> 8048b82:	89 d8                	mov    %ebx,%eax</span><br><span class="line"> 8048b84:	03 44 9d d8          	add    -0x28(%ebp,%ebx,4),%eax #上一个数加上ebx也是eax里的值</span><br><span class="line"> 8048b88:	39 44 9d dc          	cmp    %eax,-0x24(%ebp,%ebx,4) #比较计算后的值和上一单元的值</span><br><span class="line"> 8048b8c:	74 05                	je     8048b93 &lt;phase_2+0x42&gt;</span><br><span class="line"> 8048b8e:	e8 16 06 00 00       	call   80491a9 &lt;explode_bomb&gt;</span><br><span class="line"> 8048b93:	83 c3 01             	add    $0x1,%ebx</span><br><span class="line"> 8048b96:	83 fb 06             	cmp    $0x6,%ebx</span><br><span class="line"> 8048b99:	75 e7                	jne    8048b82 &lt;phase_2+0x31&gt;</span><br><span class="line"> 8048b9b:	8b 45 f4             	mov    -0xc(%ebp),%eax</span><br><span class="line"> 8048b9e:	65 33 05 14 00 00 00 	xor    %gs:0x14,%eax</span><br><span class="line"> 8048ba5:	74 05                	je     8048bac &lt;phase_2+0x5b&gt;</span><br><span class="line"> 8048ba7:	e8 e4 fb ff ff       	call   8048790 &lt;__stack_chk_fail@plt&gt;</span><br><span class="line"> 8048bac:	8b 5d fc             	mov    -0x4(%ebp),%ebx</span><br><span class="line"> 8048baf:	c9                   	leave  </span><br><span class="line"> 8048bb0:	c3                   	ret</span><br></pre></td></tr></table></figure>
<p> 地址为8048b72一行和下一行表示ebp-36和0比较，如果0-（ebp-36)里面的值之后不是非负数那么就会调用bomb函数，引起爆炸，所以，ebp-36里的值只能为0。再往下看，设ebx里的值为i，地址为 8048b7d~ 8048b84三行运行之后就是eax赋值为1，地址为ebp+4i-40的值加上eax里的1相加后放到eax里。下一行是eax里的值和地址为ebp+4i-36也就是上一个单元里的值进行比较，不相等也会调用bomb函数，所以，根据这个，第一遍可以推出ebp-32的值为1，之后就可以一直如此（下一数等于其上一个数加上ebx里的值，ebx是逐一递增的）推出ebp-16~ebp-36之间的六个值分别为0 1 3 6 10 15</p>
<h1 id="phase-3"><a href="#phase-3" class="headerlink" title="phase_3"></a>phase_3</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;phase_3&gt;:</span><br><span class="line"> 8048bb1:	55                   	push   %ebp</span><br><span class="line"> 8048bb2:	89 e5                	mov    %esp,%ebp</span><br><span class="line"> 8048bb4:	83 ec 24             	sub    $0x24,%esp</span><br><span class="line"> 8048bb7:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax</span><br><span class="line"> 8048bbd:	89 45 f4             	mov    %eax,-0xc(%ebp)</span><br><span class="line"> 8048bc0:	31 c0                	xor    %eax,%eax</span><br><span class="line"> 8048bc2:	8d 45 f0             	lea    -0x10(%ebp),%eax</span><br><span class="line"> 8048bc5:	50                   	push   %eax</span><br><span class="line"> 8048bc6:	8d 45 eb             	lea    -0x15(%ebp),%eax</span><br><span class="line"> 8048bc9:	50                   	push   %eax</span><br><span class="line"> 8048bca:	8d 45 ec             	lea    -0x14(%ebp),%eax</span><br><span class="line"> 8048bcd:	50                   	push   %eax</span><br><span class="line"> 8048bce:	68 82 a1 04 08       	push   $0x804a182 #%d %c %d</span><br><span class="line"> 8048bd3:	ff 75 08             	pushl  0x8(%ebp)</span><br><span class="line"> 8048bd6:	e8 35 fc ff ff       	call   8048810 &lt;__isoc99_sscanf@plt&gt;</span><br><span class="line"> 8048bdb:	83 c4 20             	add    $0x20,%esp</span><br><span class="line"> 8048bde:	83 f8 02             	cmp    $0x2,%eax</span><br><span class="line"> 8048be1:	7f 05                	jg     8048be8 &lt;phase_3+0x37&gt; </span><br><span class="line"> 8048be3:	e8 c1 05 00 00       	call   80491a9 &lt;explode_bomb&gt;</span><br><span class="line"> 8048be8:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)</span><br><span class="line"> 8048bec:	0f 87 ef 00 00 00    	ja     8048ce1 &lt;phase_3+0x130&gt; #输入的数要小于7</span><br><span class="line"> 8048bf2:	8b 45 ec             	mov    -0x14(%ebp),%eax</span><br><span class="line"> 8048bf5:	ff 24 85 a0 a1 04 08 	jmp    *0x804a1a0(,%eax,4) #0x08048c3e</span><br><span class="line"> 8048bfc:	b8 6a 00 00 00       	mov    $0x6a,%eax</span><br><span class="line"> 8048c01:	81 7d f0 d9 00 00 00 	cmpl   $0xd9,-0x10(%ebp)</span><br><span class="line"> 8048c08:	0f 84 dd 00 00 00    	je     8048ceb &lt;phase_3+0x13a&gt;</span><br><span class="line"> 8048c0e:	e8 96 05 00 00       	call   80491a9 &lt;explode_bomb&gt;</span><br><span class="line"> 8048c13:	b8 6a 00 00 00       	mov    $0x6a,%eax</span><br><span class="line"> 8048c18:	e9 ce 00 00 00       	jmp    8048ceb &lt;phase_3+0x13a&gt;</span><br><span class="line"> 8048c1d:	b8 68 00 00 00       	mov    $0x68,%eax</span><br><span class="line"> 8048c22:	81 7d f0 e4 01 00 00 	cmpl   $0x1e4,-0x10(%ebp)</span><br><span class="line"> 8048c29:	0f 84 bc 00 00 00    	je     8048ceb &lt;phase_3+0x13a&gt;</span><br><span class="line"> 8048c2f:	e8 75 05 00 00       	call   80491a9 &lt;explode_bomb&gt;</span><br><span class="line"> 8048c34:	b8 68 00 00 00       	mov    $0x68,%eax</span><br><span class="line"> 8048c39:	e9 ad 00 00 00       	jmp    8048ceb &lt;phase_3+0x13a&gt;</span><br><span class="line"> 8048c3e:	b8 72 00 00 00       	mov    $0x72,%eax #跳到这</span><br><span class="line"> 8048c43:	81 7d f0 82 03 00 00 	cmpl   $0x382,-0x10(%ebp)#898 也就是第三个数</span><br><span class="line"> 8048c4a:	0f 84 9b 00 00 00    	je     8048ceb &lt;phase_3+0x13a&gt;</span><br><span class="line"> 8048c50:	e8 54 05 00 00       	call   80491a9 &lt;explode_bomb&gt;</span><br><span class="line"> 8048c55:	b8 72 00 00 00       	mov    $0x72,%eax</span><br><span class="line"> 8048c5a:	e9 8c 00 00 00       	jmp    8048ceb &lt;phase_3+0x13a&gt;</span><br><span class="line"> 8048c5f:	b8 6d 00 00 00       	mov    $0x6d,%eax</span><br><span class="line"> 8048c64:	81 7d f0 06 03 00 00 	cmpl   $0x306,-0x10(%ebp)</span><br><span class="line"> 8048c6b:	74 7e                	je     8048ceb &lt;phase_3+0x13a&gt;</span><br><span class="line"> 8048c6d:	e8 37 05 00 00       	call   80491a9 &lt;explode_bomb&gt;</span><br><span class="line"> 8048c72:	b8 6d 00 00 00       	mov    $0x6d,%eax</span><br><span class="line"> 8048c77:	eb 72                	jmp    8048ceb &lt;phase_3+0x13a&gt;</span><br><span class="line"> 8048c79:	b8 62 00 00 00       	mov    $0x62,%eax</span><br><span class="line"> 8048c7e:	81 7d f0 0d 02 00 00 	cmpl   $0x20d,-0x10(%ebp)</span><br><span class="line"> 8048c85:	74 64                	je     8048ceb &lt;phase_3+0x13a&gt;</span><br><span class="line"> 8048c87:	e8 1d 05 00 00       	call   80491a9 &lt;explode_bomb&gt;</span><br><span class="line"> 8048c8c:	b8 62 00 00 00       	mov    $0x62,%eax</span><br><span class="line"> 8048c91:	eb 58                	jmp    8048ceb &lt;phase_3+0x13a&gt;</span><br><span class="line"> 8048c93:	b8 63 00 00 00       	mov    $0x63,%eax</span><br><span class="line"> 8048c98:	81 7d f0 4b 02 00 00 	cmpl   $0x24b,-0x10(%ebp)</span><br><span class="line"> 8048c9f:	74 4a                	je     8048ceb &lt;phase_3+0x13a&gt;</span><br><span class="line"> 8048ca1:	e8 03 05 00 00       	call   80491a9 &lt;explode_bomb&gt;</span><br><span class="line"> 8048ca6:	b8 63 00 00 00       	mov    $0x63,%eax</span><br><span class="line"> 8048cab:	eb 3e                	jmp    8048ceb &lt;phase_3+0x13a&gt;</span><br><span class="line"> 8048cad:	b8 65 00 00 00       	mov    $0x65,%eax</span><br><span class="line"> 8048cb2:	81 7d f0 53 02 00 00 	cmpl   $0x253,-0x10(%ebp)</span><br><span class="line"> 8048cb9:	74 30                	je     8048ceb &lt;phase_3+0x13a&gt;</span><br><span class="line"> 8048cbb:	e8 e9 04 00 00       	call   80491a9 &lt;explode_bomb&gt;</span><br><span class="line"> 8048cc0:	b8 65 00 00 00       	mov    $0x65,%eax</span><br><span class="line"> 8048cc5:	eb 24                	jmp    8048ceb &lt;phase_3+0x13a&gt;</span><br><span class="line"> 8048cc7:	b8 65 00 00 00       	mov    $0x65,%eax</span><br><span class="line"> 8048ccc:	81 7d f0 5c 01 00 00 	cmpl   $0x15c,-0x10(%ebp)</span><br><span class="line"> 8048cd3:	74 16                	je     8048ceb &lt;phase_3+0x13a&gt;</span><br><span class="line"> 8048cd5:	e8 cf 04 00 00       	call   80491a9 &lt;explode_bomb&gt;</span><br><span class="line"> 8048cda:	b8 65 00 00 00       	mov    $0x65,%eax</span><br><span class="line"> 8048cdf:	eb 0a                	jmp    8048ceb &lt;phase_3+0x13a&gt;</span><br><span class="line"> 8048ce1:	e8 c3 04 00 00       	call   80491a9 &lt;explode_bomb&gt;</span><br><span class="line"> 8048ce6:	b8 73 00 00 00       	mov    $0x73,%eax</span><br><span class="line"> 8048ceb:	3a 45 eb             	cmp    -0x15(%ebp),%al #也就是第二个字符的ascii是0x72 也就是r</span><br><span class="line"> 8048cee:	74 05                	je     8048cf5 &lt;phase_3+0x144&gt;</span><br><span class="line"> 8048cf0:	e8 b4 04 00 00       	call   80491a9 &lt;explode_bomb&gt;</span><br><span class="line"> 8048cf5:	8b 45 f4             	mov    -0xc(%ebp),%eax</span><br><span class="line"> 8048cf8:	65 33 05 14 00 00 00 	xor    %gs:0x14,%eax</span><br><span class="line"> 8048cff:	74 05                	je     8048d06 &lt;phase_3+0x155&gt;</span><br><span class="line"> 8048d01:	e8 8a fa ff ff       	call   8048790 &lt;__stack_chk_fail@plt&gt;</span><br><span class="line"> 8048d06:	c9                   	leave  </span><br><span class="line"> 8048d07:	c3                   	ret</span><br></pre></td></tr></table></figure>
<p>首先给出了明地址8048bce，看看里面是啥 ，发现是<code>%d %c %d</code>，这意味着输入一个数一个字符和一个数，再往下看，8048bde这里把scanf函数的返回值和2比较，由于我们之前已经找到了输入的格式，所以此时的eax为确定的3。接着往后，地址为ebp-14里的内容和7比较，也就是说，第一个数要小于7，初步测试用2，之后通过gdb调试发现跳到0x08048c3e，之后是地址为ebp-16的值和0x382即898比较，只有相等才不会调用bomb函数，也就是说第三个数是898，再往后跳转到8048ceb，此时的eax里是0x72，要求地址为ebp-21的值和al里的值相等，又因为之前看到输入里有一个字符，也就是说，字符的ascii码为0x72，即<code>r</code>,至此，第三个字符完成。当然，如果一开始输入的不是二而是其他小于7的数，后面的各个跳转到的位置也会变化，后两个输入也会不同，也就是这个字符的答案不唯一。</p>
<h1 id="phase-4"><a href="#phase-4" class="headerlink" title="phase_4"></a>phase_4</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">08048d08 &lt;func4&gt;:</span><br><span class="line"> 8048d08:	55                   	push   %ebp</span><br><span class="line"> 8048d09:	89 e5                	mov    %esp,%ebp</span><br><span class="line"> 8048d0b:	56                   	push   %esi</span><br><span class="line"> 8048d0c:	53                   	push   %ebx</span><br><span class="line"> 8048d0d:	8b 4d 08             	mov    0x8(%ebp),%ecx</span><br><span class="line"> 8048d10:	8b 5d 0c             	mov    0xc(%ebp),%ebx</span><br><span class="line"> 8048d13:	8b 75 10             	mov    0x10(%ebp),%esi</span><br><span class="line"> 8048d16:	89 f0                	mov    %esi,%eax</span><br><span class="line"> 8048d18:	29 d8                	sub    %ebx,%eax</span><br><span class="line"> 8048d1a:	89 c2                	mov    %eax,%edx</span><br><span class="line"> 8048d1c:	c1 ea 1f             	shr    $0x1f,%edx</span><br><span class="line"> 8048d1f:	01 d0                	add    %edx,%eax</span><br><span class="line"> 8048d21:	d1 f8                	sar    %eax</span><br><span class="line"> 8048d23:	8d 14 18             	lea    (%eax,%ebx,1),%edx</span><br><span class="line"> 8048d26:	39 ca                	cmp    %ecx,%edx</span><br><span class="line"> 8048d28:	7e 15                	jle    8048d3f &lt;func4+0x37&gt;</span><br><span class="line"> 8048d2a:	83 ec 04             	sub    $0x4,%esp</span><br><span class="line"> 8048d2d:	83 ea 01             	sub    $0x1,%edx</span><br><span class="line"> 8048d30:	52                   	push   %edx</span><br><span class="line"> 8048d31:	53                   	push   %ebx</span><br><span class="line"> 8048d32:	51                   	push   %ecx</span><br><span class="line"> 8048d33:	e8 d0 ff ff ff       	call   8048d08 &lt;func4&gt;</span><br><span class="line"> 8048d38:	83 c4 10             	add    $0x10,%esp</span><br><span class="line"> 8048d3b:	01 c0                	add    %eax,%eax</span><br><span class="line"> 8048d3d:	eb 1e                	jmp    8048d5d &lt;func4+0x55&gt;</span><br><span class="line"> 8048d3f:	b8 00 00 00 00       	mov    $0x0,%eax</span><br><span class="line"> 8048d44:	39 ca                	cmp    %ecx,%edx</span><br><span class="line"> 8048d46:	7d 15                	jge    8048d5d &lt;func4+0x55&gt;</span><br><span class="line"> 8048d48:	83 ec 04             	sub    $0x4,%esp</span><br><span class="line"> 8048d4b:	56                   	push   %esi</span><br><span class="line"> 8048d4c:	83 c2 01             	add    $0x1,%edx</span><br><span class="line"> 8048d4f:	52                   	push   %edx</span><br><span class="line"> 8048d50:	51                   	push   %ecx</span><br><span class="line"> 8048d51:	e8 b2 ff ff ff       	call   8048d08 &lt;func4&gt;</span><br><span class="line"> 8048d56:	83 c4 10             	add    $0x10,%esp</span><br><span class="line"> 8048d59:	8d 44 00 01          	lea    0x1(%eax,%eax,1),%eax #eax=2</span><br><span class="line"> 8048d5d:	8d 65 f8             	lea    -0x8(%ebp),%esp</span><br><span class="line"> 8048d60:	5b                   	pop    %ebx</span><br><span class="line"> 8048d61:	5e                   	pop    %esi</span><br><span class="line"> 8048d62:	5d                   	pop    %ebp</span><br><span class="line"> 8048d63:	c3                   	ret</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">func4</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> tmp = (((c - b) + ((c - b) &gt;&gt; <span class="number">31</span>)) &gt;&gt; <span class="number">1</span>) + b;  </span><br><span class="line">	<span class="keyword">if</span> (tmp &lt;= a) &#123;      </span><br><span class="line">		<span class="keyword">if</span> (tmp == a) &#123;   </span><br><span class="line">	    	<span class="keyword">return</span> (<span class="number">0</span>);   &#125; </span><br><span class="line">	    <span class="keyword">else</span> &#123;      </span><br><span class="line"> 	 	  	<span class="keyword">return</span> func4(a, tmp + <span class="number">1</span>, c) * <span class="number">2</span> + <span class="number">1</span>; &#125; </span><br><span class="line"> 	       &#125; </span><br><span class="line">	<span class="keyword">else</span> &#123;        <span class="keyword">return</span> func4(a, b, tmp - <span class="number">1</span>) * <span class="number">2</span>;    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">08048d64 &lt;phase_4&gt;:</span><br><span class="line"> 8048d64:	55                   	push   %ebp</span><br><span class="line"> 8048d65:	89 e5                	mov    %esp,%ebp</span><br><span class="line"> 8048d67:	83 ec 18             	sub    $0x18,%esp</span><br><span class="line"> 8048d6a:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax</span><br><span class="line"> 8048d70:	89 45 f4             	mov    %eax,-0xc(%ebp)</span><br><span class="line"> 8048d73:	31 c0                	xor    %eax,%eax</span><br><span class="line"> 8048d75:	8d 45 f0             	lea    -0x10(%ebp),%eax</span><br><span class="line"> 8048d78:	50                   	push   %eax</span><br><span class="line"> 8048d79:	8d 45 ec             	lea    -0x14(%ebp),%eax</span><br><span class="line"> 8048d7c:	50                   	push   %eax </span><br><span class="line"> 8048d7d:	68 0f a3 04 08       	push   $0x804a30f  # %d %d</span><br><span class="line"> 8048d82:	ff 75 08             	pushl  0x8(%ebp)</span><br><span class="line"> 8048d85:	e8 86 fa ff ff       	call   8048810 &lt;__isoc99_sscanf@plt&gt;</span><br><span class="line"> 8048d8a:	83 c4 10             	add    $0x10,%esp</span><br><span class="line"> 8048d8d:	83 f8 02             	cmp    $0x2,%eax  #输入两个数</span><br><span class="line"> 8048d90:	75 06                	jne    8048d98 &lt;phase_4+0x34&gt;</span><br><span class="line"> 8048d92:	83 7d ec 0e          	cmpl   $0xe,-0x14(%ebp)</span><br><span class="line"> 8048d96:	76 05                	jbe    8048d9d &lt;phase_4+0x39&gt; #&lt;=</span><br><span class="line"> 8048d98:	e8 0c 04 00 00       	call   80491a9 &lt;explode_bomb&gt;</span><br><span class="line"> 8048d9d:	83 ec 04             	sub    $0x4,%esp</span><br><span class="line"> 8048da0:	6a 0e                	push   $0xe</span><br><span class="line"> 8048da2:	6a 00                	push   $0x0</span><br><span class="line"> 8048da4:	ff 75 ec             	pushl  -0x14(%ebp)</span><br><span class="line"> 8048da7:	e8 5c ff ff ff       	call   8048d08 &lt;func4&gt;</span><br><span class="line"> 8048dac:	83 c4 10             	add    $0x10,%esp</span><br><span class="line"> 8048daf:	83 f8 05             	cmp    $0x5,%eax #返回值必须为5</span><br><span class="line"> 8048db2:	75 06                	jne    8048dba &lt;phase_4+0x56&gt;</span><br><span class="line"> 8048db4:	83 7d f0 05          	cmpl   $0x5,-0x10(%ebp)</span><br><span class="line"> 8048db8:	74 05                	je     8048dbf &lt;phase_4+0x5b&gt;</span><br><span class="line"> 8048dba:	e8 ea 03 00 00       	call   80491a9 &lt;explode_bomb&gt;</span><br><span class="line"> 8048dbf:	8b 45 f4             	mov    -0xc(%ebp),%eax</span><br><span class="line"> 8048dc2:	65 33 05 14 00 00 00 	xor    %gs:0x14,%eax</span><br><span class="line"> 8048dc9:	74 05                	je     8048dd0 &lt;phase_4+0x6c&gt;</span><br><span class="line"> 8048dcb:	e8 c0 f9 ff ff       	call   8048790 &lt;__stack_chk_fail@plt&gt;</span><br><span class="line"> 8048dd0:	c9                   	leave  </span><br><span class="line"> 8048dd1:	c3                   	ret</span><br></pre></td></tr></table></figure>
<p>首先打印地址0x804a30f的内容发现是<code>%d %d</code>初步判定是输入两个整型，再往下看有一个输入返回值和2的比较也就是说必须输入两个数，这就基本确定是输入两个数。再往后看，发现是调用func4函数，这个函数的参数第一个是输入的值，第二个是0，第三个是0xe。看func4的功能，func4的c函数见上。再回来看phase_4函数，发现要求返回值是5，不然就会调用bomb函数。再去看func4，是一个递归，最后一次只能是0才能回去，那就从0开始，两个选择，要么是2×返回值，要么是2×返回值+1，从零开始，先乘二加一，再乘二，再乘二加一就是5，也就是第一次要输入的数&gt;tmp,在这里就是输入的数大于7，第二次是输入的数小于tmp，在这里是输入的数小于11，第三次是输入的数大于tmp，在这里是输入的数大于5，第四次就是输入的数等于tmp，计算出tmp=10，这就是输入的第一个参数。再往后看，很简单了，第二个参数和5比较，不相等就bomb，所以第二个参数是5.</p>
<h1 id="phase-5"><a href="#phase-5" class="headerlink" title="phase_5"></a>phase_5</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">08048dd2 &lt;phase_5&gt;:</span><br><span class="line"> 8048dd2:	55                   	push   %ebp</span><br><span class="line"> 8048dd3:	89 e5                	mov    %esp,%ebp</span><br><span class="line"> 8048dd5:	83 ec 18             	sub    $0x18,%esp</span><br><span class="line"> 8048dd8:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax</span><br><span class="line"> 8048dde:	89 45 f4             	mov    %eax,-0xc(%ebp)</span><br><span class="line"> 8048de1:	31 c0                	xor    %eax,%eax</span><br><span class="line"> 8048de3:	8d 45 f0             	lea    -0x10(%ebp),%eax</span><br><span class="line"> 8048de6:	50                   	push   %eax</span><br><span class="line"> 8048de7:	8d 45 ec             	lea    -0x14(%ebp),%eax</span><br><span class="line"> 8048dea:	50                   	push   %eax</span><br><span class="line"> 8048deb:	68 0f a3 04 08       	push   $0x804a30f  #%d %d</span><br><span class="line"> 8048df0:	ff 75 08             	pushl  0x8(%ebp)</span><br><span class="line"> 8048df3:	e8 18 fa ff ff       	call   8048810 &lt;__isoc99_sscanf@plt&gt;</span><br><span class="line"> 8048df8:	83 c4 10             	add    $0x10,%esp</span><br><span class="line"> 8048dfb:	83 f8 01             	cmp    $0x1,%eax</span><br><span class="line"> 8048dfe:	7f 05                	jg     8048e05 &lt;phase_5+0x33&gt;</span><br><span class="line"> 8048e00:	e8 a4 03 00 00       	call   80491a9 &lt;explode_bomb&gt;</span><br><span class="line"> 8048e05:	8b 45 ec             	mov    -0x14(%ebp),%eax</span><br><span class="line"> 8048e08:	83 e0 0f             	and    $0xf,%eax</span><br><span class="line"> 8048e0b:	89 45 ec             	mov    %eax,-0x14(%ebp)</span><br><span class="line"> 8048e0e:	83 f8 0f             	cmp    $0xf,%eax</span><br><span class="line"> 8048e11:	74 2c                	je     8048e3f &lt;phase_5+0x6d&gt;</span><br><span class="line"> 8048e13:	b9 00 00 00 00       	mov    $0x0,%ecx</span><br><span class="line"> 8048e18:	ba 00 00 00 00       	mov    $0x0,%edx</span><br><span class="line"> 8048e1d:	83 c2 01             	add    $0x1,%edx</span><br><span class="line"> 8048e20:	8b 04 85 c0 a1 04 08 	mov    0x804a1c0(,%eax,4),%eax</span><br><span class="line"> 8048e27:	01 c1                	add    %eax,%ecx</span><br><span class="line"> 8048e29:	83 f8 0f             	cmp    $0xf,%eax</span><br><span class="line"> 8048e2c:	75 ef                	jne    8048e1d &lt;phase_5+0x4b&gt;</span><br><span class="line"> 8048e2e:	c7 45 ec 0f 00 00 00 	movl   $0xf,-0x14(%ebp)</span><br><span class="line"> 8048e35:	83 fa 0f             	cmp    $0xf,%edx</span><br><span class="line"> 8048e38:	75 05                	jne    8048e3f &lt;phase_5+0x6d&gt;</span><br><span class="line"> 8048e3a:	3b 4d f0             	cmp    -0x10(%ebp),%ecx</span><br><span class="line"> 8048e3d:	74 05                	je     8048e44 &lt;phase_5+0x72&gt;</span><br><span class="line"> 8048e3f:	e8 65 03 00 00       	call   80491a9 &lt;explode_bomb&gt;</span><br><span class="line"> 8048e44:	8b 45 f4             	mov    -0xc(%ebp),%eax</span><br><span class="line"> 8048e47:	65 33 05 14 00 00 00 	xor    %gs:0x14,%eax</span><br><span class="line"> 8048e4e:	74 05                	je     8048e55 &lt;phase_5+0x83&gt;</span><br><span class="line"> 8048e50:	e8 3b f9 ff ff       	call   8048790 &lt;__stack_chk_fail@plt&gt;</span><br><span class="line"> 8048e55:	c9                   	leave  </span><br><span class="line"> 8048e56:	c3                   	ret</span><br></pre></td></tr></table></figure>
<p> 地址为0x804a30f  的内容是%d %d  ，根据之前的经验，还是输入两个整型。再往后看，这个的意思就是ecx中存放sum，edx中存放数组下标i，eax中存放a[i],a的起始地址为0x804a1c0，要求找到相应的正确起始下标并且保证值为15的数在数组下标为15的地方，打印出这个数组：12 3 7 11 13 9 4 8 0 10 1 2 14 6 15  也就是要想办法让第a[1]的值是12，<code>mov    %eax,-0x14(%ebp)</code>          <code>cmp    $0xf,%eax</code>       <code>je     8048e3f &lt;phase_5+0x6d&gt;</code>这三句给了提示，输入的数组下标不超过14，从头来，试到第五个就是12开头了。也就是第一个数是5，再往后看，<code>-0x10(%ebp),%ecx</code>要求第二个参数和ecx中的值一样，通过gdb调试发现执行到这步的时候，ecx值为115，也就是第二个数是115. </p>
<h1 id="phase-6"><a href="#phase-6" class="headerlink" title="phase_6"></a>phase_6</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">08048e57 &lt;phase_6&gt;:</span><br><span class="line"> 8048e57:	55                   	push   %ebp</span><br><span class="line"> 8048e58:	89 e5                	mov    %esp,%ebp</span><br><span class="line"> 8048e5a:	56                   	push   %esi</span><br><span class="line"> 8048e5b:	53                   	push   %ebx</span><br><span class="line"> 8048e5c:	83 ec 48             	sub    $0x48,%esp</span><br><span class="line"> 8048e5f:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax</span><br><span class="line"> 8048e65:	89 45 f4             	mov    %eax,-0xc(%ebp)</span><br><span class="line"> 8048e68:	31 c0                	xor    %eax,%eax</span><br><span class="line"> 8048e6a:	8d 45 c4             	lea    -0x3c(%ebp),%eax</span><br><span class="line"> 8048e6d:	50                   	push   %eax</span><br><span class="line"> 8048e6e:	ff 75 08             	pushl  0x8(%ebp)</span><br><span class="line"> 8048e71:	e8 5b 03 00 00       	call   80491d1 &lt;read_six_numbers&gt; #读六个数</span><br><span class="line"> 8048e76:	83 c4 10             	add    $0x10,%esp</span><br><span class="line"> 8048e79:	be 00 00 00 00       	mov    $0x0,%esi</span><br><span class="line"> 8048e7e:	8b 44 b5 c4          	mov    -0x3c(%ebp,%esi,4),%eax</span><br><span class="line"> 8048e82:	83 e8 01             	sub    $0x1,%eax</span><br><span class="line"> 8048e85:	83 f8 05             	cmp    $0x5,%eax</span><br><span class="line"> 8048e88:	76 05                	jbe    8048e8f &lt;phase_6+0x38&gt;</span><br><span class="line"> 8048e8a:	e8 1a 03 00 00       	call   80491a9 &lt;explode_bomb&gt;</span><br><span class="line"> 8048e8f:	83 c6 01             	add    $0x1,%esi</span><br><span class="line"> 8048e92:	83 fe 06             	cmp    $0x6,%esi</span><br><span class="line"> 8048e95:	74 1b                	je     8048eb2 &lt;phase_6+0x5b&gt;</span><br><span class="line"> 8048e97:	89 f3                	mov    %esi,%ebx</span><br><span class="line"> 8048e99:	8b 44 9d c4          	mov    -0x3c(%ebp,%ebx,4),%eax</span><br><span class="line"> 8048e9d:	39 44 b5 c0          	cmp    %eax,-0x40(%ebp,%esi,4)</span><br><span class="line"> 8048ea1:	75 05                	jne    8048ea8 &lt;phase_6+0x51&gt;</span><br><span class="line"> 8048ea3:	e8 01 03 00 00       	call   80491a9 &lt;explode_bomb&gt;</span><br><span class="line"> 8048ea8:	83 c3 01             	add    $0x1,%ebx</span><br><span class="line"> 8048eab:	83 fb 05             	cmp    $0x5,%ebx</span><br><span class="line"> 8048eae:	7e e9                	jle    8048e99 &lt;phase_6+0x42&gt;</span><br><span class="line"> 8048eb0:	eb cc                	jmp    8048e7e &lt;phase_6+0x27#6个小于等于6的不同的数</span><br><span class="line"> 8048eb2:	8d 45 c4             	lea    -0x3c(%ebp),%eax</span><br><span class="line"> 8048eb5:	8d 5d dc             	lea    -0x24(%ebp),%ebx</span><br><span class="line"> 8048eb8:	b9 07 00 00 00       	mov    $0x7,%ecx</span><br><span class="line"> 8048ebd:	89 ca                	mov    %ecx,%edx</span><br><span class="line"> 8048ebf:	2b 10                	sub    (%eax),%edx</span><br><span class="line"> 8048ec1:	89 10                	mov    %edx,(%eax)</span><br><span class="line"> 8048ec3:	83 c0 04             	add    $0x4,%eax</span><br><span class="line"> 8048ec6:	39 c3                	cmp    %eax,%ebx</span><br><span class="line"> 8048ec8:	75 f3                	jne    8048ebd &lt;phase_6+0x66&gt;</span><br><span class="line"> 8048eca:	bb 00 00 00 00       	mov    $0x0,%ebx</span><br><span class="line"> 8048ecf:	eb 16                	jmp    8048ee7 &lt;phase_6+0x90&gt;</span><br><span class="line"> 8048ed1:	8b 52 08             	mov    0x8(%edx),%edx</span><br><span class="line"> 8048ed4:	83 c0 01             	add    $0x1,%eax</span><br><span class="line"> 8048ed7:	39 c8                	cmp    %ecx,%eax</span><br><span class="line"> 8048ed9:	75 f6                	jne    8048ed1 &lt;phase_6+0x7a&gt;</span><br><span class="line"> 8048edb:	89 54 b5 dc          	mov    %edx,-0x24(%ebp,%esi,4)</span><br><span class="line"> 8048edf:	83 c3 01             	add    $0x1,%ebx</span><br><span class="line"> 8048ee2:	83 fb 060               cmp    $0x6,%ebx</span><br><span class="line"> 8048ee5:	74 17                	je     8048efe &lt;phase_6+0xa7&gt;</span><br><span class="line"> 8048ee7:	89 de                	mov    %ebx,%esi</span><br><span class="line"> 8048ee9:	8b 4c 9d c4          	mov    -0x3c(%ebp,%ebx,4),%ecx</span><br><span class="line"> 8048eed:	b8 01 00 00 00       	mov    $0x1,%eax</span><br><span class="line"> 8048ef2:	ba 3c c1 04 08       	mov    $0x804c13c,%edx</span><br><span class="line"> 8048ef7:	83 f9 01             	cmp    $0x1,%ecx</span><br><span class="line"> 8048efa:	7f d5                	jg     8048ed1 &lt;phase_6+0x7a&gt; </span><br><span class="line"> 8048efc:	eb dd                	jmp    8048edb &lt;phase_6+0x84&gt;</span><br><span class="line"> 8048efe:	8b 5d dc             	mov    -0x24(%ebp),%ebx</span><br><span class="line"> 8048f01:	8d 45 dc             	lea    -0x24(%ebp),%eax</span><br><span class="line"> 8048f04:	8d 75 f0             	lea    -0x10(%ebp),%esi</span><br><span class="line"> 8048f07:	89 d9                	mov    %ebx,%ecx</span><br><span class="line"> 8048f09:	8b 50 04             	mov    0x4(%eax),%edx</span><br><span class="line"> 8048f0c:	89 51 08             	mov    %edx,0x8(%ecx)#</span><br><span class="line"> 8048f0f:	83 c0 04             	add    $0x4,%eax</span><br><span class="line"> 8048f12:	89 d1                	mov    %edx,%ecx</span><br><span class="line"> 8048f14:	39 c6                	cmp    %eax,%esi</span><br><span class="line"> 8048f16:	75 f1                	jne    8048f09 &lt;phase_6+0xb2&gt;</span><br><span class="line"> 8048f18:	c7 42 08 00 00 00 00 	movl   $0x0,0x8(%edx)</span><br><span class="line"> 8048f1f:	be 05 00 00 00       	mov    $0x5,%esi</span><br><span class="line"> 8048f24:	8b 43 08             	mov    0x8(%ebx),%eax</span><br><span class="line"> 8048f27:	8b 00                	mov    (%eax),%eax</span><br><span class="line"> 8048f29:	39 03                	cmp    %eax,(%ebx)</span><br><span class="line"> 8048f2b:	7d 05                	jge    8048f32 &lt;phase_6+0xdb&gt;</span><br><span class="line"> 8048f2d:	e8 77 02 00 00       	call   80491a9 &lt;explode_bomb&gt;</span><br><span class="line"> 8048f32:	8b 5b 08             	mov    0x8(%ebx),%ebx</span><br><span class="line"> 8048f35:	83 ee 01             	sub    $0x1,%esi</span><br><span class="line"> 8048f38:	75 ea                	jne    8048f24 &lt;phase_6+0xcd&gt;</span><br><span class="line"> 8048f3a:	8b 45 f4             	mov    -0xc(%ebp),%eax</span><br><span class="line"> 8048f3d:	65 33 05 14 00 00 00 	xor    %gs:0x14,%eax</span><br><span class="line"> 8048f44:	74 05                	je     8048f4b &lt;phase_6+0xf4&gt;</span><br><span class="line"> 8048f46:	e8 45 f8 ff ff       	call   8048790 &lt;__stack_chk_fail@plt&gt;</span><br><span class="line"> 8048f4b:	8d 65 f8             	lea    -0x8(%ebp),%esp</span><br><span class="line"> 8048f4e:	5b                   	pop    %ebx</span><br><span class="line"> 8048f4f:	5e                   	pop    %esi</span><br><span class="line"> 8048f50:	5d                   	pop    %ebp</span><br><span class="line"> 8048f51:	c3                   	ret</span><br></pre></td></tr></table></figure>
<p>首先是调用了读取六个数的函数，也就是要输入六个数，再往后有两个循环，一个是保证每个数都不一样，另一个是保证每个数都小于等于6，也就是说，只能输入1 2 3 4 5 6，但是顺序不确定，之后是待保输入数组的值的范围在1 ~ 6且不存在重复值；再往后用7减去输入数组的每个元素，相当于求补。之后出现了一个常数地址0x804c13c，打印发现里面的内容是281，不知道是啥，但是有个node节点，再往后看看有啥，打印一下地址，发现，是一个链表，最后的next都指向了下一个节点,最后指向NULL。而地址里有六个数，分别如下表。</p>
<table>
<thead>
<tr>
<th style="text-align:center">1</th>
<th style="text-align:center">2</th>
<th style="text-align:center">3</th>
<th style="text-align:center">4</th>
<th style="text-align:center">5</th>
<th style="text-align:center">6</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">281</td>
<td style="text-align:center">438</td>
<td style="text-align:center">714</td>
<td style="text-align:center">78</td>
<td style="text-align:center">962</td>
<td style="text-align:center">875</td>
</tr>
</tbody>
</table>
<p>之后是根据前面构建的地址数组，修改结构体数组的next的值，实现单链表的排序，要求单链表递减排序，若满足要求，那么拆弹成功。也就是说排序顺序为5 6 3 2 1 4。而且前面有一个7-x的操作也就是答案为2 1 4 5 6 3。</p>
<h1 id="secret-phase"><a href="#secret-phase" class="headerlink" title="secret_phase"></a>secret_phase</h1><p>因为之前说过有个隐藏炸弹，正好在做phase_6的时候发现了一个叫secret_phase的函数，发现只有通过phase_defused这个函数才能调用这个隐藏函数，而phase_defused函数在main函数里每一次调用完相应的六个函数之后都会调用，但是在前面的拆弹过程中没有体现出来，比如说phase_1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8048a81:	e8 aa 00 00 00       	call   8048b30 &lt;phase_1&gt;</span><br><span class="line"> 8048a86:	e8 83 08 00 00       	call   804930e &lt;phase_defused&gt;</span><br></pre></td></tr></table></figure>
<p>defused函数如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0804930e &lt;phase_defused&gt;:</span><br><span class="line"> 804930e:	55                   	push   %ebp</span><br><span class="line"> 804930f:	89 e5                	mov    %esp,%ebp</span><br><span class="line"> 8049311:	83 ec 68             	sub    $0x68,%esp</span><br><span class="line"> 8049314:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax</span><br><span class="line"> 804931a:	89 45 f4             	mov    %eax,-0xc(%ebp)</span><br><span class="line"> 804931d:	31 c0                	xor    %eax,%eax</span><br><span class="line"> 804931f:	83 3d cc c3 04 08 06 	cmpl   $0x6,0x804c3cc #这个地址里存放着输入的字符串个数，也就是说，只有执行完上面六个phase之后才能解锁这个隐藏函数</span><br><span class="line"> 8049326:	75 6f                	jne    8049397 &lt;phase_defused+0x89&gt;</span><br><span class="line"> 8049328:	83 ec 0c             	sub    $0xc,%esp</span><br><span class="line"> 804932b:	8d 45 a4             	lea    -0x5c(%ebp),%eax</span><br><span class="line"> 804932e:	50                   	push   %eax</span><br><span class="line"> 804932f:	8d 45 a0             	lea    -0x60(%ebp),%eax</span><br><span class="line"> 8049332:	50                   	push   %eax</span><br><span class="line"> 8049333:	8d 45 9c             	lea    -0x64(%ebp),%eax</span><br><span class="line"> 8049336:	50                   	push   %eax</span><br><span class="line"> 8049337:	68 69 a3 04 08       	push   $0x804a369 #%d %d %s</span><br><span class="line"> 804933c:	68 d0 c4 04 08       	push   $0x804c4d0 #&lt;input_strings+240&gt;:	&quot;&quot;</span><br><span class="line"> 8049341:	e8 ca f4 ff ff       	call   8048810 &lt;__isoc99_sscanf@plt&gt;</span><br><span class="line"> 8049346:	83 c4 20             	add    $0x20,%esp</span><br><span class="line"> 8049349:	83 f8 03             	cmp    $0x3,%eax  #输入三个</span><br><span class="line"> 804934c:	75 39                	jne    8049387 &lt;phase_defused+0x79&gt;</span><br><span class="line"> 804934e:	83 ec 08             	sub    $0x8,%esp</span><br><span class="line"> 8049351:	68 72 a3 04 08       	push   $0x804a372  # 0x804a372  -&gt; DrEvil</span><br><span class="line"> 8049356:	8d 45 a4             	lea    -0x5c(%ebp),%eax</span><br><span class="line"> 8049359:	50                   	push   %eax</span><br><span class="line"> 804935a:	e8 47 fd ff ff       	call   80490a6 &lt;strings_not_equal&gt; #要找个地方输入 DrEvil</span><br><span class="line"> 804935f:	83 c4 10             	add    $0x10,%esp</span><br><span class="line"> 8049362:	85 c0                	test   %eax,%eax</span><br><span class="line"> 8049364:	75 21                	jne    8049387 &lt;phase_defused+0x79&gt;</span><br><span class="line"> 8049366:	83 ec 0c             	sub    $0xc,%esp</span><br><span class="line"> 8049369:	68 38 a2 04 08       	push   $0x804a238 #Curses, you&apos;ve found the secret phase!</span><br><span class="line"> 804936e:	e8 4d f4 ff ff       	call   80487c0 &lt;puts@plt&gt;</span><br><span class="line"> 8049373:	c7 04 24 60 a2 04 08 	movl   $0x804a260,(%esp) #But finding it and solving it are quite different...</span><br><span class="line"> 804937a:	e8 41 f4 ff ff       	call   80487c0 &lt;puts@plt&gt;</span><br><span class="line"> 804937f:	e8 20 fc ff ff       	call   8048fa4 &lt;secret_phase&gt;</span><br><span class="line"> 8049384:	83 c4 10             	add    $0x10,%esp</span><br><span class="line"> 8049387:	83 ec 0c             	sub    $0xc,%esp</span><br><span class="line"> 804938a:	68 98 a2 04 08       	push   $0x804a298  #&quot;Congratulations! You&apos;ve defused the bomb!&quot;</span><br><span class="line"></span><br><span class="line"> 804938f:	e8 2c f4 ff ff       	call   80487c0 &lt;puts@plt&gt;</span><br><span class="line"> 8049394:	83 c4 10             	add    $0x10,%esp</span><br><span class="line"> 8049397:	8b 45 f4             	mov    -0xc(%ebp),%eax</span><br><span class="line"> 804939a:	65 33 05 14 00 00 00 	xor    %gs:0x14,%eax</span><br><span class="line"> 80493a1:	74 05                	je     80493a8 &lt;phase_defused+0x9a&gt;</span><br><span class="line"> 80493a3:	e8 e8 f3 ff ff       	call   8048790 &lt;__stack_chk_fail@plt&gt;</span><br><span class="line"> 80493a8:	c9                   	leave  </span><br><span class="line"> 80493a9:	c3                   	ret</span><br></pre></td></tr></table></figure>
<p>分析第27行，因为 调用了string_not_equal函数，之前push了0x804a372  （DrEvil）也就是说要找一个地方输入这个字符串，又因为%d %d %s，猜测是在第四个或者第五个之后输入，在第四个尝试之后成功了。接下来就是secret-phase了。</p>
<p>secret_phase</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">08048fa4 &lt;secret_phase&gt;:</span><br><span class="line"> 8048fa4:	55                   	push   %ebp</span><br><span class="line"> 8048fa5:	89 e5                	mov    %esp,%ebp</span><br><span class="line"> 8048fa7:	53                   	push   %ebx</span><br><span class="line"> 8048fa8:	83 ec 04             	sub    $0x4,%esp</span><br><span class="line"> 8048fab:	e8 5b 02 00 00       	call   804920b &lt;read_line&gt;</span><br><span class="line"> 8048fb0:	83 ec 04             	sub    $0x4,%esp</span><br><span class="line"> 8048fb3:	6a 0a                	push   $0xa</span><br><span class="line"> 8048fb5:	6a 00                	push   $0x0</span><br><span class="line"> 8048fb7:	50                   	push   %eax</span><br><span class="line"> 8048fb8:	e8 c3 f8 ff ff       	call   8048880 &lt;strtol@plt&gt;</span><br><span class="line"> 8048fbd:	89 c3                	mov    %eax,%ebx</span><br><span class="line"> 8048fbf:	8d 40 ff             	lea    -0x1(%eax),%eax</span><br><span class="line"> 8048fc2:	83 c4 10             	add    $0x10,%esp</span><br><span class="line"> 8048fc5:	3d e8 03 00 00       	cmp    $0x3e8,%eax</span><br><span class="line"> 8048fca:	76 05                	jbe    8048fd1 &lt;secret_phase+0x2d&gt;</span><br><span class="line"> 8048fcc:	e8 d8 01 00 00       	call   80491a9 &lt;explode_bomb&gt;</span><br><span class="line"> 8048fd1:	83 ec 08             	sub    $0x8,%esp</span><br><span class="line"> 8048fd4:	53                   	push   %ebxr</span><br><span class="line"> 8048fd5:	68 88 c0 04 08       	push   $0x804c088 #&quot;$&quot;</span><br><span class="line"> 8048fda:	e8 73 ff ff ff       	call   8048f52 &lt;fun7&gt;</span><br><span class="line"> 8048fdf:	83 c4 10             	add    $0x10,%esp</span><br><span class="line"> 8048fe2:	83 f8 03             	cmp    $0x3,%eax #fun7返回值必须为3</span><br><span class="line"> 8048fe5:	74 05                	je     8048fec &lt;secret_phase+0x48&gt;</span><br><span class="line"> 8048fe7:	e8 bd 01 00 00       	call   80491a9 &lt;explode_bomb&gt;</span><br><span class="line"> 8048fec:	83 ec 0c             	sub    $0xc,%esp</span><br><span class="line"> 8048fef:	68 5c a1 04 08       	push   $0x804a15c #Wow! You&apos;ve defused the secret stage!</span><br><span class="line"> 8048ff4:	e8 c7 f7 ff ff       	call   80487c0 &lt;puts@plt&gt;</span><br><span class="line"> 8048ff9:	e8 10 03 00 00       	call   804930e &lt;phase_defused&gt;</span><br><span class="line"> 8048ffe:	83 c4 10             	add    $0x10,%esp</span><br><span class="line"> 8049001:	8b 5d fc             	mov    -0x4(%ebp),%ebx</span><br><span class="line"> 8049004:	c9                   	leave  </span><br><span class="line"> 8049005:	c3                   	ret</span><br></pre></td></tr></table></figure>
<p>根据第23行，也就是说调用fun7之后，返回值必须是3，这样就结束了。</p>
<p>fun7</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">08048f52 &lt;fun7&gt;:</span><br><span class="line"> 8048f52:	55                   	push   %ebp</span><br><span class="line"> 8048f53:	89 e5                	mov    %esp,%ebp</span><br><span class="line"> 8048f55:	53                   	push   %ebx</span><br><span class="line"> 8048f56:	83 ec 04             	sub    $0x4,%esp</span><br><span class="line"> 8048f59:	8b 55 08             	mov    0x8(%ebp),%edx</span><br><span class="line"> 8048f5c:	8b 4d 0c             	mov    0xc(%ebp),%ecx</span><br><span class="line"> 8048f5f:	85 d2                	test   %edx,%edx</span><br><span class="line"> 8048f61:	74 37                	je     8048f9a &lt;fun7+0x48&gt;</span><br><span class="line"> 8048f63:	8b 1a                	mov    (%edx),%ebx</span><br><span class="line"> 8048f65:	39 cb                	cmp    %ecx,%ebx</span><br><span class="line"> 8048f67:	7e 13                	jle    8048f7c &lt;fun7+0x2a&gt;</span><br><span class="line"> 8048f69:	83 ec 08             	sub    $0x8,%esp</span><br><span class="line"> 8048f6c:	51                   	push   %ecx</span><br><span class="line"> 8048f6d:	ff 72 04             	pushl  0x4(%edx)</span><br><span class="line"> 8048f70:	e8 dd ff ff ff       	call   8048f52 &lt;fun7&gt;</span><br><span class="line"> 8048f75:	83 c4 10             	add    $0x10</span><br><span class="line"> ,%esp</span><br><span class="line"> 8048f78:	01 c0                	add    %eax,%eax</span><br><span class="line"> 8048f7a:	eb 23                	jmp    8048f9f &lt;fun7+0x4d&gt;</span><br><span class="line"> 8048f7c:	b8 00 00 00 00       	mov    $0x0,%eax</span><br><span class="line"> 8048f81:	39 cb                	cmp    %ecx,%ebx</span><br><span class="line"> 8048f83:	74 1a                	je     8048f9f &lt;fun7+0x4d&gt;</span><br><span class="line"> 8048f85:	83 ec 08             	sub    $0x8,%esp</span><br><span class="line"> 8048f88:	51                   	push   %ecx</span><br><span class="line"> 8048f89:	ff 72 08             	pushl  0x8(%edx)</span><br><span class="line"> 8048f8c:	e8 c1 ff ff ff       	call   8048f52 &lt;fun7&gt;</span><br><span class="line"> 8048f91:	83 c4 10             	add    $0x10,%esp</span><br><span class="line"> 8048f94:	8d 44 00 01          	lea    0x1(%eax,%eax,1),%eax</span><br><span class="line"> 8048f98:	eb 05                	jmp    8048f9f &lt;fun7+0x4d&gt;</span><br><span class="line"> 8048f9a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax</span><br><span class="line"> 8048f9f:	8b 5d fc             	mov    -0x4(%ebp),%ebx</span><br><span class="line"> 8048fa2:	c9                   	leave  </span><br><span class="line"> 8048fa3:	c3                   	ret</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func7</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (b== *a)  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(*a&gt;b) <span class="keyword">return</span> <span class="number">2</span>*fun7(x+<span class="number">4</span>,y); <span class="comment">//root-&gt;left</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">2</span>*fun7(x+<span class="number">8</span>,y)+<span class="number">1</span>;<span class="comment">//root—&gt;right</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是fun7的c代码，是一个和fun4很像的递归代码。最后一个数是3，那么上一个就是1，再上一个就是0，二叉树方向：root-&gt;right-&gt;right。从节点最初在secret_phase中传入的地址作为根节点开始往回找，</p>
<p><img src="http://ww1.sinaimg.cn/large/0069QpNUly1ga0treiosoj309e03it8s.jpg" alt="1576647719(1).png"></p>
<p>也就是0x6b=107</p>
<p>至此所有的炸弹都拆完了。</p>
<p><img src="http://ww1.sinaimg.cn/large/0069QpNUly1ga0trryshej30g8064mxx.jpg" alt="1576641101(1).png"></p>
]]></content>
      <categories>
        <category>计算机系统基础</category>
      </categories>
  </entry>
  <entry>
    <title>数据库</title>
    <url>/2019/08/26/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<p>登陆</p>
<p>进入MySQL的bin目录下</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">mysql -hlocalhost -uroot -p</span></span><br></pre></td></tr></table></figure>
<p><img src="http://ww1.sinaimg.cn/large/0069QpNUly1g69gnlc4joj30lm07m4o8.jpg" alt=""></p>
<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><p>数据库是一个二维表，每行是一个实体，列叫字段</p>
<p>decimal小数更精确</p>
<p>Varchar：变长字符串</p>
<p>date：YYYY-MM-DD</p>
<p>time：HH：MM：SS</p>
<p>datetime：YYYY-MM-DD HH：MM：SS</p>
<p>整型 int</p>
<p>不是很精确的 double</p>
<p>时间 datetime</p>
<p>字符串 varchar</p>
<p>表的约束：主键，非空，自增</p>
<p>主键唯一（内容不能重复），不能为空，一个表只能有一个主键</p>
<p>数据库不区分大小写</p>
<h2 id="增删改查语句"><a href="#增删改查语句" class="headerlink" title="增删改查语句"></a>增删改查语句</h2><p>–（空格） ：注释</p>
<h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO 表名 VALUS（不指定列名按照表的顺序写）;</span><br><span class="line">-- 推荐下面的（指定列名）</span><br><span class="line">INSERT INTO stu(stuid,stuname,age,tel,address) VALUES(1001,&apos;lisi&apos;,12,&apos;1233&apos;,&apos;buxiang&apos;)</span><br><span class="line">	,(1010.......);</span><br><span class="line">-- 自增</span><br><span class="line">INSERT INTO stu (stuname,age,tel,address) VALUES(&apos;lisi&apos;,13,&apos;779&apos;,&apos;buxiang&apos;);</span><br></pre></td></tr></table></figure>
<p>指定列名，可以省略自增的列名，可以实行添加多条，逗号隔开</p>
<h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM stu;</span><br><span class="line">UPDATE stu SET stuname=&apos;liwu&apos;，address=&apos;shandong&apos;WHERE stuid=1001;</span><br></pre></td></tr></table></figure>
<p>可以更新主键（一般不要更新），要保证更新后不会出现重复</p>
<p>*代表所有列</p>
<h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELETE FROM stu WHERE stuid=1001;</span><br></pre></td></tr></table></figure>
<p>where后面一般是主键</p>
<p><img src="http://ww1.sinaimg.cn/large/0069QpNUly1g69nzjsul8j30fr02ygnf.jpg" alt=""></p>
<h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><h4 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a><strong>单表查询</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT 列名 FROM 表名;</span><br></pre></td></tr></table></figure>
<ol>
<li><p>列名之间用  , </p>
</li>
<li><p>*代表所有列</p>
</li>
<li><p>DISTINCT：对查询结果去重</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT DISTINCT cid FROM student;</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以进行+ - * / </p>
</li>
<li><p>给列起别名，（as和  ）之后只能用换后的名字：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT socre as 加分前的成绩, socre+5 加分后的成绩 FROM score;</span><br></pre></td></tr></table></figure>
</li>
<li><p>select五种子句</p>
<p>| 子句     | 描述     |<br>| ——– | ——– |<br>| WHERE    | 条件查询 |<br>| group by | 分组     |<br>| having   | 筛选     |<br>| order by | 排序     |<br>| limit    | 截取     |</p>
<p><strong>where</strong></p>
<p>=，&gt;，&lt;，&lt;=，&gt;=，</p>
<p>between…and…   包含边界，日期加‘ ’</p>
<p>in（集合），满足集合中一个值即可</p>
<p>not 取反 ，</p>
<p>like 模糊查询  ‘%字符%’，_代表一个字符，%代表多个字符</p>
<p>is NULL</p>
<p><strong>聚合函数</strong></p>
<p>AVG（）平均值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT AVG(socre) 平均成绩 FROM score WHERE subid=1;</span><br></pre></td></tr></table></figure>
<p>COUNT() 数据的数量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT COUNT(*) FROM score WHERE subid=1;</span><br></pre></td></tr></table></figure>
<p>SUM（）求和</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT SUM(socre) FROM score;</span><br></pre></td></tr></table></figure>
<p>MAX（）MIN（）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT MAX(socre) from score;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>分组group by</strong></p>
<p>每    各    要分组</p>
<p>带聚合函数 一般都要分组</p>
<p><code>SELECT...FROM....WHERE...GRUP BY 列名</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT AVG(socre) FROM score GROUP BY subid;</span><br><span class="line"></span><br><span class="line">-- sqlserver</span><br><span class="line">SELECT AVG(socre),subid FROM score GROUP BY subid;</span><br></pre></td></tr></table></figure>
<p><strong>having</strong></p>
<p>where 针对表中真正存在的列</p>
<p>having 针对查询结果，但是在<code>group by</code>之后执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- where （✕）</span><br><span class="line">SELECT stuid,socre+5 加分后的成绩 FROM score WHERE 加分后的成绩&lt;60;    </span><br><span class="line">-- having（√）</span><br><span class="line">SELECT stuid,socre+5 加分后的成绩 FROM score HAVING 加分后的成绩&lt;60;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- sqlserver</span><br><span class="line">-- having必须和group by一起用</span><br></pre></td></tr></table></figure>
<p><strong>order by</strong></p>
<p><code>asc</code>升序，默认</p>
<p><code>desc</code>降序</p>
<p>在select语句结尾</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM student ORDER BY 字段1,字段2, ... ASC;</span><br></pre></td></tr></table></figure>
<p>根据字段一进行排，排完基础上根据字段2进行排……</p>
<p><strong>limit</strong></p>
<p>limit    数据的坐标，显示的条数;</p>
<p>数据的坐标从0开始</p>
<p>常用在分页</p>
<h4 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h4><p><strong>等值连接</strong></p>
<p>两个表有相同字段</p>
<p>eg：查询李四所在班级，显示班级编号，姓名，班级名</p>
<ol>
<li><p>把两个表连成一个大表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM student,classinfo;</span><br></pre></td></tr></table></figure>
</li>
<li><p>确定连接条件(用表名加以区分)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">student.cid=classinfo.cid</span><br></pre></td></tr></table></figure>
</li>
<li><p>确定其他筛选条件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AND name=&quot;李四&quot;;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>内连接</strong></p>
<p>查询李四所考科目的平均成绩，显示姓名，平均成绩</p>
<ol>
<li><p>把两个表连成一个大表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM student INNER JOIN score</span><br></pre></td></tr></table></figure>
</li>
<li><p>连接条件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ON student.stuid=score.stuid</span><br></pre></td></tr></table></figure>
<p>可以多次重复上述两步以实现多张表相连</p>
</li>
<li><p>筛选条件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WHERE `name`=&apos;李四&apos;;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>左外连接</strong></p>
<p>以左表为主，去右表找匹配数据，如果找不到就用null填充，也就是说，左表的数据必须被查询</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT student.stuid,`name`,sex,subid,socre FROM student LEFT JOIN score</span><br><span class="line">ON student.stuid=score.stuid;</span><br></pre></td></tr></table></figure>
<p><strong>右外连接</strong></p>
<p>与左外连接相反</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT student.stuid,`name`,sex,subid,socre FROM score LEFT JOIN student</span><br><span class="line">ON student.stuid=score.stuid;</span><br></pre></td></tr></table></figure>
<p>左外和右外例子效果相同</p>
<p>尽量使用左外连接替代右外连接（大型数据库DB2只支持左外连接，不支持右外连接）</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>图论总结</title>
    <url>/2020/06/30/%E5%9B%BE%E8%AE%BA%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="第七章-图"><a href="#第七章-图" class="headerlink" title="第七章 图"></a>第七章 图</h1><p>7.1 零图，基图，标定图，关联，相邻，关联集，邻域，点v的度数，出度，入度，孤立点，G的最大（小）度，握手定理（有向图和无向图），度数列，可简单图化的判断及画图，图的同构定义，必要条件；简单图，平凡图，竞赛图，k-正则图，n阶无向完全图Kn，n阶有向完全图，彼得森图，二部图（偶图，不含有奇圈），完全二部图，二部图的充要条件，子图，生成子图，，同构定义及必要条件，自补图，图的运算（边的收缩，加新边，G1∪G2，G1∩G2，G1-G2，环和G1⊕G2，</p>
<p>7.2 通路，回路，路径，圈，周长，围长，直径，扩大路径法（证明圈的存在），</p>
<p>7.3 连通图，不连通图，连通分支，连通分支数p(G), </p>
<p>7.4 点连通度，最小点割集V’，边连通度，最小边割集E’，断集E’’, p(G-V’)&gt;=2, p(G-E’)=2, p(G-E’’)&gt;=2, 扇形割集, Whitney定理，Th7.14，不含割点（2-连通）的无向图的充要条件，不含割边（2-边连通）的图的充要条件，块，含有割点的图的充要条件，含割边的图的充要条件，</p>
<p>7.5 可达，短程线，弱连通，单向连通，强连通</p>
<h1 id="第8章-欧拉图和哈密顿图"><a href="#第8章-欧拉图和哈密顿图" class="headerlink" title="第8章 欧拉图和哈密顿图"></a>第8章 欧拉图和哈密顿图</h1><p>8.1<strong>（半）欧拉图</strong>：定义（必须是连通图）；充要条件（通过度数，或圈）；如何将非（半）欧拉图通过添边的方式改成（半）欧拉图；列出欧拉图的欧拉回路；欧拉图与中国邮递员问题的联系；轮盘设计中的欧拉图。欧拉图中的圈，欧拉回路与连通度，连通性的联系；</p>
<p>8.2<strong>（半）哈密顿图</strong>：定义（必须是连通图）；充分条件，必要条件；棋盘走马，旅行商问题。</p>
<h1 id="第9章-树"><a href="#第9章-树" class="headerlink" title="第9章 树"></a>第9章 树</h1><p>9.1 无向树的6个等价定义的内容；树的边数和点数的关系m=n-1；树中不相邻结点间添加任意一条新边，均产生一个唯一的圈；非平凡树至少含有两片树叶；星形图；</p>
<p>9.2 生成树与连通图的联系，树枝，余树，弦，n阶连通图的边数m&gt;=n-1, 其生成树含n-1条边，余树的边（弦）m-n+1条；基本回路，基本回路系统；基本割集，基本割集系统；连通图中所有不同的生成树，不同生成树的个数计算；</p>
<p>9.3-9.4 环路，环路空间；断集，断集空间；</p>
<p>9.5有向树，根树，数额，分支点，层高，树高，r叉完全正则有序树，根树的前（中，后）序遍历，Huffman编码，平均码字长度；</p>
<h1 id="第十章、图的矩阵表示"><a href="#第十章、图的矩阵表示" class="headerlink" title="第十章、图的矩阵表示"></a>第十章、图的矩阵表示</h1><p>10.1 有向图关联矩阵求法、性质；无向图关联矩阵求法、性质；结合点合并运算；关联矩阵的秩；基本关联矩阵以及生成树的求法</p>
<p>10.2邻接矩阵、可达矩阵、相邻矩阵、连通矩阵的求法及性质</p>
<h1 id="第十一章、平面图"><a href="#第十一章、平面图" class="headerlink" title="第十一章、平面图"></a>第十一章、平面图</h1><p>平面图证明两种方法；约当定理；球面嵌入与曲面嵌入；面；平面图里的”握手定理”；极大平面图；技校非平面图（G5，G3，3）；一些计算的性质；对偶图及其性质；外平面图及其证明；极大外平面图；</p>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h1><p>（1）用图论的语言描述问题和解决问题，</p>
<p>（2）建模过程中，G=&lt;V,E&gt;，V的定义，E的定义，是否有（无）向图，简单图，二部图。</p>
<p>（3）学习中总结图论的实际应用，和重要算法。</p>
<p>（4）若证明某个点不是割点，可以通过证明该点在回路上（如欧拉回路，哈密顿回路，圈等），或者证明该点是生成树的树叶（不是生成树的分支点）</p>
<p>（5）证明某边不是割边，可通过证明该边在回路上，或不是该连通图生成树的树枝。</p>
<h3 id="啊不想写了。"><a href="#啊不想写了。" class="headerlink" title="啊不想写了。"></a>啊不想写了。</h3>]]></content>
      <categories>
        <category>离散数学</category>
      </categories>
  </entry>
</search>
